{"meta":{"title":"WHY","subtitle":"","description":"","author":"WangHaoyang","url":"https://why-1513.github.io.git","root":"/"},"pages":[{"title":"标签","date":"2024-04-28T02:08:10.000Z","updated":"2024-04-28T02:09:40.374Z","comments":true,"path":"tags/index.html","permalink":"https://why-1513.github.io.git/tags/index.html","excerpt":"","text":""},{"title":"分类","date":"2024-04-28T02:07:22.000Z","updated":"2024-04-28T02:09:35.774Z","comments":true,"path":"categories/index.html","permalink":"https://why-1513.github.io.git/categories/index.html","excerpt":"","text":""},{"title":"about","date":"2024-04-28T02:19:20.000Z","updated":"2024-04-28T02:19:20.039Z","comments":true,"path":"about/index.html","permalink":"https://why-1513.github.io.git/about/index.html","excerpt":"","text":""},{"title":"links","date":"2024-04-28T02:19:15.000Z","updated":"2024-04-28T02:19:15.572Z","comments":true,"path":"links/index.html","permalink":"https://why-1513.github.io.git/links/index.html","excerpt":"","text":""},{"title":"repository","date":"2024-04-28T02:19:07.000Z","updated":"2024-04-28T02:19:07.386Z","comments":true,"path":"repository/index.html","permalink":"https://why-1513.github.io.git/repository/index.html","excerpt":"","text":""}],"posts":[{"title":"C++基础编程","slug":"C++基础编程","date":"2024-04-28T02:07:22.000Z","updated":"2024-04-28T02:14:28.586Z","comments":true,"path":"2024/04/28/C++基础编程/","permalink":"https://why-1513.github.io.git/2024/04/28/C++%E5%9F%BA%E7%A1%80%E7%BC%96%E7%A8%8B/","excerpt":"","text":"C++基础入门1 C++初识1.1 第一个C++程序编写一个C++程序总共分为4个步骤 创建项目 创建文件 编写代码 运行程序 1.1.1 创建项目​Visual Studio是我们用来编写C++程序的主要工具，我们先将它打开 1.1.2 创建文件右键源文件，选择添加-&gt;新建项 给C++文件起个名称，然后点击添加即可。 1.1.3 编写代码1234567891011#include&lt;iostream&gt;using namespace std;int main() &#123; cout &lt;&lt; &quot;Hello world&quot; &lt;&lt; endl; system(&quot;pause&quot;); return 0;&#125; 1.1.4 运行程序1.2 注释作用：在代码中加一些说明和解释，方便自己或其他程序员程序员阅读代码 两种格式 单行注释：// 描述信息 通常放在一行代码的上方，或者一条语句的末尾，&#x3D;&#x3D;对该行代码说明&#x3D;&#x3D; 多行注释： /* 描述信息 */ 通常放在一段代码的上方，&#x3D;&#x3D;对该段代码做整体说明&#x3D;&#x3D; 提示：编译器在编译代码时，会忽略注释的内容 1.3 变量作用：给一段指定的内存空间起名，方便操作这段内存 语法：数据类型 变量名 = 初始值; 示例： 12345678910111213141516#include&lt;iostream&gt;using namespace std;int main() &#123; //变量的定义 //语法：数据类型 变量名 = 初始值 int a = 10; cout &lt;&lt; &quot;a = &quot; &lt;&lt; a &lt;&lt; endl; system(&quot;pause&quot;); return 0;&#125; 注意：C++在创建变量时，必须给变量一个初始值，否则会报错 1.4 常量作用：用于记录程序中不可更改的数据 C++定义常量两种方式 #define 宏常量： #define 常量名 常量值 &#x3D;&#x3D;通常在文件上方定义&#x3D;&#x3D;，表示一个常量 const修饰的变量 const 数据类型 常量名 = 常量值 &#x3D;&#x3D;通常在变量定义前加关键字const&#x3D;&#x3D;，修饰该变量为常量，不可修改 示例： 123456789101112131415161718//1、宏常量#define day 7int main() &#123; cout &lt;&lt; &quot;一周里总共有 &quot; &lt;&lt; day &lt;&lt; &quot; 天&quot; &lt;&lt; endl; //day = 8; //报错，宏常量不可以修改 //2、const修饰变量 const int month = 12; cout &lt;&lt; &quot;一年里总共有 &quot; &lt;&lt; month &lt;&lt; &quot; 个月份&quot; &lt;&lt; endl; //month = 24; //报错，常量是不可以修改的 system(&quot;pause&quot;); return 0;&#125; 1.5 关键字作用：关键字是C++中预先保留的单词（标识符） 在定义变量或者常量时候，不要用关键字 C++关键字如下： asm do if return typedef auto double inline short typeid bool dynamic_cast int signed typename break else long sizeof union case enum mutable static unsigned catch explicit namespace static_cast using char export new struct virtual class extern operator switch void const false private template volatile const_cast float protected this wchar_t continue for public throw while default friend register true delete goto reinterpret_cast try 提示：在给变量或者常量起名称时候，不要用C++得关键字，否则会产生歧义。 1.6 标识符命名规则作用：C++规定给标识符（变量、常量）命名时，有一套自己的规则 标识符不能是关键字 标识符只能由字母、数字、下划线组成 第一个字符必须为字母或下划线 标识符中字母区分大小写 建议：给标识符命名时，争取做到见名知意的效果，方便自己和他人的阅读 2 数据类型C++规定在创建一个变量或者常量时，必须要指定出相应的数据类型，否则无法给变量分配内存 2.1 整型作用：整型变量表示的是&#x3D;&#x3D;整数类型&#x3D;&#x3D;的数据 C++中能够表示整型的类型有以下几种方式，区别在于所占内存空间不同： 数据类型 占用空间 取值范围 short(短整型) 2字节 (-2^15 ~ 2^15-1) int(整型) 4字节 (-2^31 ~ 2^31-1) long(长整形) Windows为4字节，Linux为4字节(32位)，8字节(64位) (-2^31 ~ 2^31-1) long long(长长整形) 8字节 (-2^63 ~ 2^63-1) 2.2 sizeof关键字作用：利用sizeof关键字可以&#x3D;&#x3D;统计数据类型所占内存大小&#x3D;&#x3D; 语法： sizeof( 数据类型 / 变量) 示例： 1234567891011121314int main() &#123; cout &lt;&lt; &quot;short 类型所占内存空间为： &quot; &lt;&lt; sizeof(short) &lt;&lt; endl; cout &lt;&lt; &quot;int 类型所占内存空间为： &quot; &lt;&lt; sizeof(int) &lt;&lt; endl; cout &lt;&lt; &quot;long 类型所占内存空间为： &quot; &lt;&lt; sizeof(long) &lt;&lt; endl; cout &lt;&lt; &quot;long long 类型所占内存空间为： &quot; &lt;&lt; sizeof(long long) &lt;&lt; endl; system(&quot;pause&quot;); return 0;&#125; 整型结论：&#x3D;&#x3D;short &lt; int &lt;&#x3D; long &lt;&#x3D; long long&#x3D;&#x3D; 2.3 实型（浮点型）作用：用于&#x3D;&#x3D;表示小数&#x3D;&#x3D; 浮点型变量分为两种： 单精度float 双精度double 两者的区别在于表示的有效数字范围不同。 数据类型 占用空间 有效数字范围 float 4字节 7位有效数字 double 8字节 15～16位有效数字 示例： 12345678910111213141516171819202122int main() &#123; float f1 = 3.14f; double d1 = 3.14; cout &lt;&lt; f1 &lt;&lt; endl; cout &lt;&lt; d1&lt;&lt; endl; cout &lt;&lt; &quot;float sizeof = &quot; &lt;&lt; sizeof(f1) &lt;&lt; endl; cout &lt;&lt; &quot;double sizeof = &quot; &lt;&lt; sizeof(d1) &lt;&lt; endl; //科学计数法 float f2 = 3e2; // 3 * 10 ^ 2 cout &lt;&lt; &quot;f2 = &quot; &lt;&lt; f2 &lt;&lt; endl; float f3 = 3e-2; // 3 * 0.1 ^ 2 cout &lt;&lt; &quot;f3 = &quot; &lt;&lt; f3 &lt;&lt; endl; system(&quot;pause&quot;); return 0;&#125; 2.4 字符型作用：字符型变量用于显示单个字符 语法：char ch = &#39;a&#39;; 注意1：在显示字符型变量时，用单引号将字符括起来，不要用双引号 注意2：单引号内只能有一个字符，不可以是字符串 C和C++中字符型变量只占用&#x3D;&#x3D;1个字节&#x3D;&#x3D;。 字符型变量并不是把字符本身放到内存中存储，而是将对应的ASCII编码放入到存储单元 示例： 1234567891011121314151617int main() &#123; char ch = &#x27;a&#x27;; cout &lt;&lt; ch &lt;&lt; endl; cout &lt;&lt; sizeof(char) &lt;&lt; endl; //ch = &quot;abcde&quot;; //错误，不可以用双引号 //ch = &#x27;abcde&#x27;; //错误，单引号内只能引用一个字符 cout &lt;&lt; (int)ch &lt;&lt; endl; //查看字符a对应的ASCII码 ch = 97; //可以直接用ASCII给字符型变量赋值 cout &lt;&lt; ch &lt;&lt; endl; system(&quot;pause&quot;); return 0;&#125; ASCII码表格： ASCII值 控制字符 ASCII值 字符 ASCII值 字符 ASCII值 字符 0 NUT 32 (space) 64 @ 96 、 1 SOH 33 ! 65 A 97 a 2 STX 34 “ 66 B 98 b 3 ETX 35 # 67 C 99 c 4 EOT 36 $ 68 D 100 d 5 ENQ 37 % 69 E 101 e 6 ACK 38 &amp; 70 F 102 f 7 BEL 39 , 71 G 103 g 8 BS 40 ( 72 H 104 h 9 HT 41 ) 73 I 105 i 10 LF 42 * 74 J 106 j 11 VT 43 + 75 K 107 k 12 FF 44 , 76 L 108 l 13 CR 45 - 77 M 109 m 14 SO 46 . 78 N 110 n 15 SI 47 &#x2F; 79 O 111 o 16 DLE 48 0 80 P 112 p 17 DCI 49 1 81 Q 113 q 18 DC2 50 2 82 R 114 r 19 DC3 51 3 83 S 115 s 20 DC4 52 4 84 T 116 t 21 NAK 53 5 85 U 117 u 22 SYN 54 6 86 V 118 v 23 TB 55 7 87 W 119 w 24 CAN 56 8 88 X 120 x 25 EM 57 9 89 Y 121 y 26 SUB 58 : 90 Z 122 z 27 ESC 59 ; 91 [ 123 { 28 FS 60 &lt; 92 &#x2F; 124 | 29 GS 61 &#x3D; 93 ] 125 } 30 RS 62 &gt; 94 ^ 126 &#96; 31 US 63 ? 95 _ 127 DEL ASCII 码大致由以下两部分组成： ASCII 非打印控制字符： ASCII 表上的数字 0-31 分配给了控制字符，用于控制像打印机等一些外围设备。 ASCII 打印字符：数字 32-126 分配给了能在键盘上找到的字符，当查看或打印文档时就会出现。 2.5 转义字符作用：用于表示一些&#x3D;&#x3D;不能显示出来的ASCII字符&#x3D;&#x3D; 现阶段我们常用的转义字符有： \\n \\\\ \\t 转义字符 含义 ASCII码值（十进制） \\a 警报 007 \\b 退格(BS) ，将当前位置移到前一列 008 \\f 换页(FF)，将当前位置移到下页开头 012 \\n 换行(LF) ，将当前位置移到下一行开头 010 \\r 回车(CR) ，将当前位置移到本行开头 013 \\t 水平制表(HT) （跳到下一个TAB位置） 009 \\v 垂直制表(VT) 011 \\\\ 代表一个反斜线字符”&quot; 092 &#39; 代表一个单引号（撇号）字符 039 &quot; 代表一个双引号字符 034 ? 代表一个问号 063 \\0 数字0 000 \\ddd 8进制转义字符，d范围0~7 3位8进制 \\xhh 16进制转义字符，h范围09，af，A~F 3位16进制 示例： 1234567891011int main() &#123; cout &lt;&lt; &quot;\\\\&quot; &lt;&lt; endl; cout &lt;&lt; &quot;\\tHello&quot; &lt;&lt; endl; cout &lt;&lt; &quot;\\n&quot; &lt;&lt; endl; system(&quot;pause&quot;); return 0;&#125; 2.6 字符串型作用：用于表示一串字符 两种风格 C风格字符串： char 变量名[] = &quot;字符串值&quot; 示例： 123456789int main() &#123; char str1[] = &quot;hello world&quot;; cout &lt;&lt; str1 &lt;&lt; endl; system(&quot;pause&quot;); return 0;&#125; 注意：C风格的字符串要用双引号括起来 C++风格字符串： string 变量名 = &quot;字符串值&quot; 示例： 123456789int main() &#123; string str = &quot;hello world&quot;; cout &lt;&lt; str &lt;&lt; endl; system(&quot;pause&quot;); return 0;&#125; ​ 注意：C++风格字符串，需要加入头文件&#x3D;&#x3D;#include&lt;string&gt;&#x3D;&#x3D; 2.7 布尔类型 bool作用：布尔数据类型代表真或假的值 bool类型只有两个值： true — 真（本质是1） false — 假（本质是0） bool类型占&#x3D;&#x3D;1个字节&#x3D;&#x3D;大小 示例： 1234567891011121314int main() &#123; bool flag = true; cout &lt;&lt; flag &lt;&lt; endl; // 1 flag = false; cout &lt;&lt; flag &lt;&lt; endl; // 0 cout &lt;&lt; &quot;size of bool = &quot; &lt;&lt; sizeof(bool) &lt;&lt; endl; //1 system(&quot;pause&quot;); return 0;&#125; 2.8 数据的输入作用：用于从键盘获取数据 关键字：cin 语法： cin &gt;&gt; 变量 示例： 12345678910111213141516171819202122232425262728293031323334int main()&#123; //整型输入 int a = 0; cout &lt;&lt; &quot;请输入整型变量：&quot; &lt;&lt; endl; cin &gt;&gt; a; cout &lt;&lt; a &lt;&lt; endl; //浮点型输入 double d = 0; cout &lt;&lt; &quot;请输入浮点型变量：&quot; &lt;&lt; endl; cin &gt;&gt; d; cout &lt;&lt; d &lt;&lt; endl; //字符型输入 char ch = 0; cout &lt;&lt; &quot;请输入字符型变量：&quot; &lt;&lt; endl; cin &gt;&gt; ch; cout &lt;&lt; ch &lt;&lt; endl; //字符串型输入 string str; cout &lt;&lt; &quot;请输入字符串型变量：&quot; &lt;&lt; endl; cin &gt;&gt; str; cout &lt;&lt; str &lt;&lt; endl; //布尔类型输入 bool flag = true; cout &lt;&lt; &quot;请输入布尔型变量：&quot; &lt;&lt; endl; cin &gt;&gt; flag; cout &lt;&lt; flag &lt;&lt; endl; system(&quot;pause&quot;); return EXIT_SUCCESS;&#125; 3 运算符作用：用于执行代码的运算 本章我们主要讲解以下几类运算符： 运算符类型 作用 算术运算符 用于处理四则运算 赋值运算符 用于将表达式的值赋给变量 比较运算符 用于表达式的比较，并返回一个真值或假值 逻辑运算符 用于根据表达式的值返回真值或假值 3.1 算术运算符作用：用于处理四则运算 算术运算符包括以下符号： 运算符 术语 示例 结果 + 正号 +3 3 - 负号 -3 -3 + 加 10 + 5 15 - 减 10 - 5 5 * 乘 10 * 5 50 &#x2F; 除 10 &#x2F; 5 2 % 取模(取余) 10 % 3 1 ++ 前置递增 a&#x3D;2; b&#x3D;++a; a&#x3D;3; b&#x3D;3; ++ 后置递增 a&#x3D;2; b&#x3D;a++; a&#x3D;3; b&#x3D;2; – 前置递减 a&#x3D;2; b&#x3D;–a; a&#x3D;1; b&#x3D;1; – 后置递减 a&#x3D;2; b&#x3D;a–; a&#x3D;1; b&#x3D;2; 示例1： 1234567891011121314151617181920212223242526272829//加减乘除int main() &#123; int a1 = 10; int b1 = 3; cout &lt;&lt; a1 + b1 &lt;&lt; endl; cout &lt;&lt; a1 - b1 &lt;&lt; endl; cout &lt;&lt; a1 * b1 &lt;&lt; endl; cout &lt;&lt; a1 / b1 &lt;&lt; endl; //两个整数相除结果依然是整数 int a2 = 10; int b2 = 20; cout &lt;&lt; a2 / b2 &lt;&lt; endl; int a3 = 10; int b3 = 0; //cout &lt;&lt; a3 / b3 &lt;&lt; endl; //报错，除数不可以为0 //两个小数可以相除 double d1 = 0.5; double d2 = 0.25; cout &lt;&lt; d1 / d2 &lt;&lt; endl; system(&quot;pause&quot;); return 0;&#125; 总结：在除法运算中，除数不能为0 示例2： 1234567891011121314151617181920212223242526272829//取模int main() &#123; int a1 = 10; int b1 = 3; cout &lt;&lt; 10 % 3 &lt;&lt; endl; int a2 = 10; int b2 = 20; cout &lt;&lt; a2 % b2 &lt;&lt; endl; int a3 = 10; int b3 = 0; //cout &lt;&lt; a3 % b3 &lt;&lt; endl; //取模运算时，除数也不能为0 //两个小数不可以取模 double d1 = 3.14; double d2 = 1.1; //cout &lt;&lt; d1 % d2 &lt;&lt; endl; system(&quot;pause&quot;); return 0;&#125; 总结：只有整型变量可以进行取模运算 示例3： 1234567891011121314151617181920212223242526272829//递增int main() &#123; //后置递增 int a = 10; a++; //等价于a = a + 1 cout &lt;&lt; a &lt;&lt; endl; // 11 //前置递增 int b = 10; ++b; cout &lt;&lt; b &lt;&lt; endl; // 11 //区别 //前置递增先对变量进行++，再计算表达式 int a2 = 10; int b2 = ++a2 * 10; cout &lt;&lt; b2 &lt;&lt; endl; //后置递增先计算表达式，后对变量进行++ int a3 = 10; int b3 = a3++ * 10; cout &lt;&lt; b3 &lt;&lt; endl; system(&quot;pause&quot;); return 0;&#125; 总结：前置递增先对变量进行++，再计算表达式，后置递增相反 3.2 赋值运算符作用：用于将表达式的值赋给变量 赋值运算符包括以下几个符号： 运算符 术语 示例 结果 &#x3D; 赋值 a&#x3D;2; b&#x3D;3; a&#x3D;2; b&#x3D;3; +&#x3D; 加等于 a&#x3D;0; a+&#x3D;2; a&#x3D;2; -&#x3D; 减等于 a&#x3D;5; a-&#x3D;3; a&#x3D;2; *&#x3D; 乘等于 a&#x3D;2; a*&#x3D;2; a&#x3D;4; &#x2F;&#x3D; 除等于 a&#x3D;4; a&#x2F;&#x3D;2; a&#x3D;2; %&#x3D; 模等于 a&#x3D;3; a%2; a&#x3D;1; 示例： 1234567891011121314151617181920212223242526272829303132333435363738int main() &#123; //赋值运算符 // = int a = 10; a = 100; cout &lt;&lt; &quot;a = &quot; &lt;&lt; a &lt;&lt; endl; // += a = 10; a += 2; // a = a + 2; cout &lt;&lt; &quot;a = &quot; &lt;&lt; a &lt;&lt; endl; // -= a = 10; a -= 2; // a = a - 2 cout &lt;&lt; &quot;a = &quot; &lt;&lt; a &lt;&lt; endl; // *= a = 10; a *= 2; // a = a * 2 cout &lt;&lt; &quot;a = &quot; &lt;&lt; a &lt;&lt; endl; // /= a = 10; a /= 2; // a = a / 2; cout &lt;&lt; &quot;a = &quot; &lt;&lt; a &lt;&lt; endl; // %= a = 10; a %= 2; // a = a % 2; cout &lt;&lt; &quot;a = &quot; &lt;&lt; a &lt;&lt; endl; system(&quot;pause&quot;); return 0;&#125; 3.3 比较运算符作用：用于表达式的比较，并返回一个真值或假值 比较运算符有以下符号： 运算符 术语 示例 结果 &#x3D;&#x3D; 相等于 4 &#x3D;&#x3D; 3 0 !&#x3D; 不等于 4 !&#x3D; 3 1 &lt; 小于 4 &lt; 3 0 &gt; 大于 4 &gt; 3 1 &lt;&#x3D; 小于等于 4 &lt;&#x3D; 3 0 &gt;&#x3D; 大于等于 4 &gt;&#x3D; 1 1 示例： 123456789101112131415161718192021int main() &#123; int a = 10; int b = 20; cout &lt;&lt; (a == b) &lt;&lt; endl; // 0 cout &lt;&lt; (a != b) &lt;&lt; endl; // 1 cout &lt;&lt; (a &gt; b) &lt;&lt; endl; // 0 cout &lt;&lt; (a &lt; b) &lt;&lt; endl; // 1 cout &lt;&lt; (a &gt;= b) &lt;&lt; endl; // 0 cout &lt;&lt; (a &lt;= b) &lt;&lt; endl; // 1 system(&quot;pause&quot;); return 0;&#125; 注意：C和C++ 语言的比较运算中， &#x3D;&#x3D;“真”用数字“1”来表示， “假”用数字“0”来表示。&#x3D;&#x3D; 3.4 逻辑运算符作用：用于根据表达式的值返回真值或假值 逻辑运算符有以下符号： 运算符 术语 示例 结果 ! 非 !a 如果a为假，则!a为真； 如果a为真，则!a为假。 &amp;&amp; 与 a &amp;&amp; b 如果a和b都为真，则结果为真，否则为假。 || 或 a || b 如果a和b有一个为真，则结果为真，二者都为假时，结果为假。 示例1：逻辑非 12345678910111213//逻辑运算符 --- 非int main() &#123; int a = 10; cout &lt;&lt; !a &lt;&lt; endl; // 0 cout &lt;&lt; !!a &lt;&lt; endl; // 1 system(&quot;pause&quot;); return 0;&#125; 总结： 真变假，假变真 示例2：逻辑与 1234567891011121314151617181920212223//逻辑运算符 --- 与int main() &#123; int a = 10; int b = 10; cout &lt;&lt; (a &amp;&amp; b) &lt;&lt; endl;// 1 a = 10; b = 0; cout &lt;&lt; (a &amp;&amp; b) &lt;&lt; endl;// 0 a = 0; b = 0; cout &lt;&lt; (a &amp;&amp; b) &lt;&lt; endl;// 0 system(&quot;pause&quot;); return 0;&#125; 总结：逻辑&#x3D;&#x3D;与&#x3D;&#x3D;运算符总结： &#x3D;&#x3D;同真为真，其余为假&#x3D;&#x3D; 示例3：逻辑或 12345678910111213141516171819202122//逻辑运算符 --- 或int main() &#123; int a = 10; int b = 10; cout &lt;&lt; (a || b) &lt;&lt; endl;// 1 a = 10; b = 0; cout &lt;&lt; (a || b) &lt;&lt; endl;// 1 a = 0; b = 0; cout &lt;&lt; (a || b) &lt;&lt; endl;// 0 system(&quot;pause&quot;); return 0;&#125; 逻辑&#x3D;&#x3D;或&#x3D;&#x3D;运算符总结： &#x3D;&#x3D;同假为假，其余为真&#x3D;&#x3D; 4 程序流程结构C&#x2F;C++支持最基本的三种程序运行结构：&#x3D;&#x3D;顺序结构、选择结构、循环结构&#x3D;&#x3D; 顺序结构：程序按顺序执行，不发生跳转 选择结构：依据条件是否满足，有选择的执行相应功能 循环结构：依据条件是否满足，循环多次执行某段代码 4.1 选择结构4.1.1 if语句作用：执行满足条件的语句 if语句的三种形式 单行格式if语句 多行格式if语句 多条件的if语句 ​ 单行格式if语句：if(条件)&#123; 条件满足执行的语句 &#125; 示例： 12345678910111213141516171819202122int main() &#123; //选择结构-单行if语句 //输入一个分数，如果分数大于600分，视为考上一本大学，并在屏幕上打印 int score = 0; cout &lt;&lt; &quot;请输入一个分数：&quot; &lt;&lt; endl; cin &gt;&gt; score; cout &lt;&lt; &quot;您输入的分数为： &quot; &lt;&lt; score &lt;&lt; endl; //if语句 //注意事项，在if判断语句后面，不要加分号 if (score &gt; 600) &#123; cout &lt;&lt; &quot;我考上了一本大学！！！&quot; &lt;&lt; endl; &#125; system(&quot;pause&quot;); return 0;&#125; ​ 注意：if条件表达式后不要加分号 多行格式if语句：if(条件)&#123; 条件满足执行的语句 &#125;else&#123; 条件不满足执行的语句 &#125;; ​ 示例： 123456789101112131415161718192021int main() &#123; int score = 0; cout &lt;&lt; &quot;请输入考试分数：&quot; &lt;&lt; endl; cin &gt;&gt; score; if (score &gt; 600) &#123; cout &lt;&lt; &quot;我考上了一本大学&quot; &lt;&lt; endl; &#125; else &#123; cout &lt;&lt; &quot;我未考上一本大学&quot; &lt;&lt; endl; &#125; system(&quot;pause&quot;); return 0;&#125; 多条件的if语句：if(条件1)&#123; 条件1满足执行的语句 &#125;else if(条件2)&#123;条件2满足执行的语句&#125;... else&#123; 都不满足执行的语句&#125; ​ ​ ​ 示例： 1234567891011121314151617181920212223242526272829 int main() &#123; int score = 0; cout &lt;&lt; &quot;请输入考试分数：&quot; &lt;&lt; endl; cin &gt;&gt; score; if (score &gt; 600) &#123; cout &lt;&lt; &quot;我考上了一本大学&quot; &lt;&lt; endl; &#125; else if (score &gt; 500) &#123; cout &lt;&lt; &quot;我考上了二本大学&quot; &lt;&lt; endl; &#125; else if (score &gt; 400) &#123; cout &lt;&lt; &quot;我考上了三本大学&quot; &lt;&lt; endl; &#125; else &#123; cout &lt;&lt; &quot;我未考上本科&quot; &lt;&lt; endl; &#125; system(&quot;pause&quot;); return 0;&#125; ​ 嵌套if语句：在if语句中，可以嵌套使用if语句，达到更精确的条件判断 案例需求： 提示用户输入一个高考考试分数，根据分数做如下判断 分数如果大于600分视为考上一本，大于500分考上二本，大于400考上三本，其余视为未考上本科； 在一本分数中，如果大于700分，考入北大，大于650分，考入清华，大于600考入人大。 示例： 123456789101112131415161718192021222324252627282930313233343536373839404142int main() &#123; int score = 0; cout &lt;&lt; &quot;请输入考试分数：&quot; &lt;&lt; endl; cin &gt;&gt; score; if (score &gt; 600) &#123; cout &lt;&lt; &quot;我考上了一本大学&quot; &lt;&lt; endl; if (score &gt; 700) &#123; cout &lt;&lt; &quot;我考上了北大&quot; &lt;&lt; endl; &#125; else if (score &gt; 650) &#123; cout &lt;&lt; &quot;我考上了清华&quot; &lt;&lt; endl; &#125; else &#123; cout &lt;&lt; &quot;我考上了人大&quot; &lt;&lt; endl; &#125; &#125; else if (score &gt; 500) &#123; cout &lt;&lt; &quot;我考上了二本大学&quot; &lt;&lt; endl; &#125; else if (score &gt; 400) &#123; cout &lt;&lt; &quot;我考上了三本大学&quot; &lt;&lt; endl; &#125; else &#123; cout &lt;&lt; &quot;我未考上本科&quot; &lt;&lt; endl; &#125; system(&quot;pause&quot;); return 0;&#125; 练习案例： 三只小猪称体重 有三只小猪ABC，请分别输入三只小猪的体重，并且判断哪只小猪最重？ 4.1.2 三目运算符作用： 通过三目运算符实现简单的判断 语法：表达式1 ? 表达式2 ：表达式3 解释： 如果表达式1的值为真，执行表达式2，并返回表达式2的结果； 如果表达式1的值为假，执行表达式3，并返回表达式3的结果。 示例： 123456789101112131415161718192021int main() &#123; int a = 10; int b = 20; int c = 0; c = a &gt; b ? a : b; cout &lt;&lt; &quot;c = &quot; &lt;&lt; c &lt;&lt; endl; //C++中三目运算符返回的是变量,可以继续赋值 (a &gt; b ? a : b) = 100; cout &lt;&lt; &quot;a = &quot; &lt;&lt; a &lt;&lt; endl; cout &lt;&lt; &quot;b = &quot; &lt;&lt; b &lt;&lt; endl; cout &lt;&lt; &quot;c = &quot; &lt;&lt; c &lt;&lt; endl; system(&quot;pause&quot;); return 0;&#125; 总结：和if语句比较，三目运算符优点是短小整洁，缺点是如果用嵌套，结构不清晰 4.1.3 switch语句作用：执行多条件分支语句 语法： 1234567891011121314switch(表达式)&#123; case 结果1：执行语句;break; case 结果2：执行语句;break; ... default:执行语句;break;&#125; 示例： 12345678910111213141516171819202122232425262728293031323334int main() &#123; //请给电影评分 //10 ~ 9 经典 // 8 ~ 7 非常好 // 6 ~ 5 一般 // 5分以下 烂片 int score = 0; cout &lt;&lt; &quot;请给电影打分&quot; &lt;&lt; endl; cin &gt;&gt; score; switch (score) &#123; case 10: case 9: cout &lt;&lt; &quot;经典&quot; &lt;&lt; endl; break; case 8: cout &lt;&lt; &quot;非常好&quot; &lt;&lt; endl; break; case 7: case 6: cout &lt;&lt; &quot;一般&quot; &lt;&lt; endl; break; default: cout &lt;&lt; &quot;烂片&quot; &lt;&lt; endl; break; &#125; system(&quot;pause&quot;); return 0;&#125; 注意1：switch语句中表达式类型只能是整型或者字符型 注意2：case里如果没有break，那么程序会一直向下执行 总结：与if语句比，对于多条件判断时，switch的结构清晰，执行效率高，缺点是switch不可以判断区间 4.2 循环结构4.2.1 while循环语句作用：满足循环条件，执行循环语句 语法： while(循环条件)&#123; 循环语句 &#125; 解释：&#x3D;&#x3D;只要循环条件的结果为真，就执行循环语句&#x3D;&#x3D; 示例： 12345678910111213int main() &#123; int num = 0; while (num &lt; 10) &#123; cout &lt;&lt; &quot;num = &quot; &lt;&lt; num &lt;&lt; endl; num++; &#125; system(&quot;pause&quot;); return 0;&#125; 注意：在执行循环语句时候，程序必须提供跳出循环的出口，否则出现死循环 while循环练习案例：&#x3D;&#x3D;猜数字&#x3D;&#x3D; 案例描述：系统随机生成一个1到100之间的数字，玩家进行猜测，如果猜错，提示玩家数字过大或过小，如果猜对恭喜玩家胜利，并且退出游戏。 4.2.2 do…while循环语句作用： 满足循环条件，执行循环语句 语法： do&#123; 循环语句 &#125; while(循环条件); 注意：与while的区别在于&#x3D;&#x3D;do…while会先执行一次循环语句&#x3D;&#x3D;，再判断循环条件 示例： 12345678910111213141516int main() &#123; int num = 0; do &#123; cout &lt;&lt; num &lt;&lt; endl; num++; &#125; while (num &lt; 10); system(&quot;pause&quot;); return 0;&#125; 总结：与while循环区别在于，do…while先执行一次循环语句，再判断循环条件 练习案例：水仙花数 案例描述：水仙花数是指一个 3 位数，它的每个位上的数字的 3次幂之和等于它本身 例如：1^3 + 5^3+ 3^3 &#x3D; 153 请利用do…while语句，求出所有3位数中的水仙花数 4.2.3 for循环语句作用： 满足循环条件，执行循环语句 语法： for(起始表达式;条件表达式;末尾循环体) &#123; 循环语句; &#125; 示例： 1234567891011int main() &#123; for (int i = 0; i &lt; 10; i++) &#123; cout &lt;&lt; i &lt;&lt; endl; &#125; system(&quot;pause&quot;); return 0;&#125; 详解： 注意：for循环中的表达式，要用分号进行分隔 总结：while , do…while, for都是开发中常用的循环语句，for循环结构比较清晰，比较常用 练习案例：敲桌子 案例描述：从1开始数到数字100， 如果数字个位含有7，或者数字十位含有7，或者该数字是7的倍数，我们打印敲桌子，其余数字直接打印输出。 4.2.4 嵌套循环作用： 在循环体中再嵌套一层循环，解决一些实际问题 例如我们想在屏幕中打印如下图片，就需要利用嵌套循环 示例： 12345678910111213141516int main() &#123; //外层循环执行1次，内层循环执行1轮 for (int i = 0; i &lt; 10; i++) &#123; for (int j = 0; j &lt; 10; j++) &#123; cout &lt;&lt; &quot;*&quot; &lt;&lt; &quot; &quot;; &#125; cout &lt;&lt; endl; &#125; system(&quot;pause&quot;); return 0;&#125; 练习案例：乘法口诀表 案例描述：利用嵌套循环，实现九九乘法表 4.3 跳转语句4.3.1 break语句作用: 用于跳出&#x3D;&#x3D;选择结构&#x3D;&#x3D;或者&#x3D;&#x3D;循环结构&#x3D;&#x3D; break使用的时机： 出现在switch条件语句中，作用是终止case并跳出switch 出现在循环语句中，作用是跳出当前的循环语句 出现在嵌套循环中，跳出最近的内层循环语句 示例1： 12345678910111213141516171819202122232425262728int main() &#123; //1、在switch 语句中使用break cout &lt;&lt; &quot;请选择您挑战副本的难度：&quot; &lt;&lt; endl; cout &lt;&lt; &quot;1、普通&quot; &lt;&lt; endl; cout &lt;&lt; &quot;2、中等&quot; &lt;&lt; endl; cout &lt;&lt; &quot;3、困难&quot; &lt;&lt; endl; int num = 0; cin &gt;&gt; num; switch (num) &#123; case 1: cout &lt;&lt; &quot;您选择的是普通难度&quot; &lt;&lt; endl; break; case 2: cout &lt;&lt; &quot;您选择的是中等难度&quot; &lt;&lt; endl; break; case 3: cout &lt;&lt; &quot;您选择的是困难难度&quot; &lt;&lt; endl; break; &#125; system(&quot;pause&quot;); return 0;&#125; 示例2： 123456789101112131415int main() &#123; //2、在循环语句中用break for (int i = 0; i &lt; 10; i++) &#123; if (i == 5) &#123; break; //跳出循环语句 &#125; cout &lt;&lt; i &lt;&lt; endl; &#125; system(&quot;pause&quot;); return 0;&#125; 示例3： 12345678910111213141516171819int main() &#123; //在嵌套循环语句中使用break，退出内层循环 for (int i = 0; i &lt; 10; i++) &#123; for (int j = 0; j &lt; 10; j++) &#123; if (j == 5) &#123; break; &#125; cout &lt;&lt; &quot;*&quot; &lt;&lt; &quot; &quot;; &#125; cout &lt;&lt; endl; &#125; system(&quot;pause&quot;); return 0;&#125; 4.3.2 continue语句作用：在&#x3D;&#x3D;循环语句&#x3D;&#x3D;中，跳过本次循环中余下尚未执行的语句，继续执行下一次循环 示例： 123456789101112131415int main() &#123; for (int i = 0; i &lt; 100; i++) &#123; if (i % 2 == 0) &#123; continue; &#125; cout &lt;&lt; i &lt;&lt; endl; &#125; system(&quot;pause&quot;); return 0;&#125; 注意：continue并没有使整个循环终止，而break会跳出循环 4.3.3 goto语句作用：可以无条件跳转语句 语法： goto 标记; 解释：如果标记的名称存在，执行到goto语句时，会跳转到标记的位置 示例： 123456789101112131415161718int main() &#123; cout &lt;&lt; &quot;1&quot; &lt;&lt; endl; goto FLAG; cout &lt;&lt; &quot;2&quot; &lt;&lt; endl; cout &lt;&lt; &quot;3&quot; &lt;&lt; endl; cout &lt;&lt; &quot;4&quot; &lt;&lt; endl; FLAG: cout &lt;&lt; &quot;5&quot; &lt;&lt; endl; system(&quot;pause&quot;); return 0;&#125; 注意：在程序中不建议使用goto语句，以免造成程序流程混乱 5 数组5.1 概述所谓数组，就是一个集合，里面存放了相同类型的数据元素 特点1：数组中的每个&#x3D;&#x3D;数据元素都是相同的数据类型&#x3D;&#x3D; 特点2：数组是由&#x3D;&#x3D;连续的内存&#x3D;&#x3D;位置组成的 5.2 一维数组5.2.1 一维数组定义方式一维数组定义的三种方式： 数据类型 数组名[ 数组长度 ]; 数据类型 数组名[ 数组长度 ] = &#123; 值1，值2 ...&#125;; 数据类型 数组名[ ] = &#123; 值1，值2 ...&#125;; 示例 123456789101112131415161718192021222324252627282930313233343536373839404142434445int main() &#123; //定义方式1 //数据类型 数组名[元素个数]; int score[10]; //利用下标赋值 score[0] = 100; score[1] = 99; score[2] = 85; //利用下标输出 cout &lt;&lt; score[0] &lt;&lt; endl; cout &lt;&lt; score[1] &lt;&lt; endl; cout &lt;&lt; score[2] &lt;&lt; endl; //第二种定义方式 //数据类型 数组名[元素个数] = &#123;值1，值2 ，值3 ...&#125;; //如果&#123;&#125;内不足10个数据，剩余数据用0补全 int score2[10] = &#123; 100, 90,80,70,60,50,40,30,20,10 &#125;; //逐个输出 //cout &lt;&lt; score2[0] &lt;&lt; endl; //cout &lt;&lt; score2[1] &lt;&lt; endl; //一个一个输出太麻烦，因此可以利用循环进行输出 for (int i = 0; i &lt; 10; i++) &#123; cout &lt;&lt; score2[i] &lt;&lt; endl; &#125; //定义方式3 //数据类型 数组名[] = &#123;值1，值2 ，值3 ...&#125;; int score3[] = &#123; 100,90,80,70,60,50,40,30,20,10 &#125;; for (int i = 0; i &lt; 10; i++) &#123; cout &lt;&lt; score3[i] &lt;&lt; endl; &#125; system(&quot;pause&quot;); return 0;&#125; 总结1：数组名的命名规范与变量名命名规范一致，不要和变量重名 总结2：数组中下标是从0开始索引 5.2.2 一维数组数组名一维数组名称的用途： 可以统计整个数组在内存中的长度 可以获取数组在内存中的首地址 示例： 12345678910111213141516171819202122int main() &#123; //数组名用途 //1、可以获取整个数组占用内存空间大小 int arr[10] = &#123; 1,2,3,4,5,6,7,8,9,10 &#125;; cout &lt;&lt; &quot;整个数组所占内存空间为： &quot; &lt;&lt; sizeof(arr) &lt;&lt; endl; cout &lt;&lt; &quot;每个元素所占内存空间为： &quot; &lt;&lt; sizeof(arr[0]) &lt;&lt; endl; cout &lt;&lt; &quot;数组的元素个数为： &quot; &lt;&lt; sizeof(arr) / sizeof(arr[0]) &lt;&lt; endl; //2、可以通过数组名获取到数组首地址 cout &lt;&lt; &quot;数组首地址为： &quot; &lt;&lt; (int)arr &lt;&lt; endl; cout &lt;&lt; &quot;数组中第一个元素地址为： &quot; &lt;&lt; (int)&amp;arr[0] &lt;&lt; endl; cout &lt;&lt; &quot;数组中第二个元素地址为： &quot; &lt;&lt; (int)&amp;arr[1] &lt;&lt; endl; //arr = 100; 错误，数组名是常量，因此不可以赋值 system(&quot;pause&quot;); return 0;&#125; 注意：数组名是常量，不可以赋值 总结1：直接打印数组名，可以查看数组所占内存的首地址 总结2：对数组名进行sizeof，可以获取整个数组占内存空间的大小 练习案例1：五只小猪称体重 案例描述： 在一个数组中记录了五只小猪的体重，如：int arr[5] &#x3D; {300,350,200,400,250}; 找出并打印最重的小猪体重。 练习案例2：数组元素逆置 案例描述：请声明一个5个元素的数组，并且将元素逆置. (如原数组元素为：1,3,2,5,4;逆置后输出结果为:4,5,2,3,1); 5.2.3 冒泡排序作用： 最常用的排序算法，对数组内元素进行排序 比较相邻的元素。如果第一个比第二个大，就交换他们两个。 对每一对相邻元素做同样的工作，执行完毕后，找到第一个最大值。 重复以上的步骤，每次比较次数-1，直到不需要比较 示例： 将数组 { 4,2,8,0,5,7,1,3,9 } 进行升序排序 1234567891011121314151617181920212223242526int main() &#123; int arr[9] = &#123; 4,2,8,0,5,7,1,3,9 &#125;; for (int i = 0; i &lt; 9 - 1; i++) &#123; for (int j = 0; j &lt; 9 - 1 - i; j++) &#123; if (arr[j] &gt; arr[j + 1]) &#123; int temp = arr[j]; arr[j] = arr[j + 1]; arr[j + 1] = temp; &#125; &#125; &#125; for (int i = 0; i &lt; 9; i++) &#123; cout &lt;&lt; arr[i] &lt;&lt; endl; &#125; system(&quot;pause&quot;); return 0;&#125; 5.3 二维数组二维数组就是在一维数组上，多加一个维度。 5.3.1 二维数组定义方式二维数组定义的四种方式： 数据类型 数组名[ 行数 ][ 列数 ]; 数据类型 数组名[ 行数 ][ 列数 ] = &#123; &#123;数据1，数据2 &#125; ，&#123;数据3，数据4 &#125; &#125;; 数据类型 数组名[ 行数 ][ 列数 ] = &#123; 数据1，数据2，数据3，数据4&#125;; 数据类型 数组名[ ][ 列数 ] = &#123; 数据1，数据2，数据3，数据4&#125;; 建议：以上4种定义方式，利用&#x3D;&#x3D;第二种更加直观，提高代码的可读性&#x3D;&#x3D; 示例： 1234567891011121314151617181920212223242526272829303132333435363738394041int main() &#123; //方式1 //数组类型 数组名 [行数][列数] int arr[2][3]; arr[0][0] = 1; arr[0][1] = 2; arr[0][2] = 3; arr[1][0] = 4; arr[1][1] = 5; arr[1][2] = 6; for (int i = 0; i &lt; 2; i++) &#123; for (int j = 0; j &lt; 3; j++) &#123; cout &lt;&lt; arr[i][j] &lt;&lt; &quot; &quot;; &#125; cout &lt;&lt; endl; &#125; //方式2 //数据类型 数组名[行数][列数] = &#123; &#123;数据1，数据2 &#125; ，&#123;数据3，数据4 &#125; &#125;; int arr2[2][3] = &#123; &#123;1,2,3&#125;, &#123;4,5,6&#125; &#125;; //方式3 //数据类型 数组名[行数][列数] = &#123; 数据1，数据2 ,数据3，数据4 &#125;; int arr3[2][3] = &#123; 1,2,3,4,5,6 &#125;; //方式4 //数据类型 数组名[][列数] = &#123; 数据1，数据2 ,数据3，数据4 &#125;; int arr4[][3] = &#123; 1,2,3,4,5,6 &#125;; system(&quot;pause&quot;); return 0;&#125; 总结：在定义二维数组时，如果初始化了数据，可以省略行数 5.3.2 二维数组数组名 查看二维数组所占内存空间 获取二维数组首地址 示例： 12345678910111213141516171819202122232425262728int main() &#123; //二维数组数组名 int arr[2][3] = &#123; &#123;1,2,3&#125;, &#123;4,5,6&#125; &#125;; cout &lt;&lt; &quot;二维数组大小： &quot; &lt;&lt; sizeof(arr) &lt;&lt; endl; cout &lt;&lt; &quot;二维数组一行大小： &quot; &lt;&lt; sizeof(arr[0]) &lt;&lt; endl; cout &lt;&lt; &quot;二维数组元素大小： &quot; &lt;&lt; sizeof(arr[0][0]) &lt;&lt; endl; cout &lt;&lt; &quot;二维数组行数： &quot; &lt;&lt; sizeof(arr) / sizeof(arr[0]) &lt;&lt; endl; cout &lt;&lt; &quot;二维数组列数： &quot; &lt;&lt; sizeof(arr[0]) / sizeof(arr[0][0]) &lt;&lt; endl; //地址 cout &lt;&lt; &quot;二维数组首地址：&quot; &lt;&lt; arr &lt;&lt; endl; cout &lt;&lt; &quot;二维数组第一行地址：&quot; &lt;&lt; arr[0] &lt;&lt; endl; cout &lt;&lt; &quot;二维数组第二行地址：&quot; &lt;&lt; arr[1] &lt;&lt; endl; cout &lt;&lt; &quot;二维数组第一个元素地址：&quot; &lt;&lt; &amp;arr[0][0] &lt;&lt; endl; cout &lt;&lt; &quot;二维数组第二个元素地址：&quot; &lt;&lt; &amp;arr[0][1] &lt;&lt; endl; system(&quot;pause&quot;); return 0;&#125; 总结1：二维数组名就是这个数组的首地址 总结2：对二维数组名进行sizeof时，可以获取整个二维数组占用的内存空间大小 5.3.3 二维数组应用案例考试成绩统计： 案例描述：有三名同学（张三，李四，王五），在一次考试中的成绩分别如下表，请分别输出三名同学的总成绩 语文 数学 英语 张三 100 100 100 李四 90 50 100 王五 60 70 80 参考答案： 12345678910111213141516171819202122232425int main() &#123; int scores[3][3] = &#123; &#123;100,100,100&#125;, &#123;90,50,100&#125;, &#123;60,70,80&#125;, &#125;; string names[3] = &#123; &quot;张三&quot;,&quot;李四&quot;,&quot;王五&quot; &#125;; for (int i = 0; i &lt; 3; i++) &#123; int sum = 0; for (int j = 0; j &lt; 3; j++) &#123; sum += scores[i][j]; &#125; cout &lt;&lt; names[i] &lt;&lt; &quot;同学总成绩为： &quot; &lt;&lt; sum &lt;&lt; endl; &#125; system(&quot;pause&quot;); return 0;&#125; 6 函数6.1 概述作用：将一段经常使用的代码封装起来，减少重复代码 一个较大的程序，一般分为若干个程序块，每个模块实现特定的功能。 6.2 函数的定义函数的定义一般主要有5个步骤： 1、返回值类型 2、函数名 3、参数表列 4、函数体语句 5、return 表达式 语法： 12345678返回值类型 函数名 （参数列表）&#123; 函数体语句 return表达式&#125; 返回值类型 ：一个函数可以返回一个值。在函数定义中 函数名：给函数起个名称 参数列表：使用该函数时，传入的数据 函数体语句：花括号内的代码，函数内需要执行的语句 return表达式： 和返回值类型挂钩，函数执行完后，返回相应的数据 示例：定义一个加法函数，实现两个数相加 123456//函数定义int add(int num1, int num2)&#123; int sum = num1 + num2; return sum;&#125; 6.3 函数的调用功能：使用定义好的函数 语法： 函数名（参数） 示例： 12345678910111213141516171819202122232425//函数定义int add(int num1, int num2) //定义中的num1,num2称为形式参数，简称形参&#123; int sum = num1 + num2; return sum;&#125;int main() &#123; int a = 10; int b = 10; //调用add函数 int sum = add(a, b);//调用时的a，b称为实际参数，简称实参 cout &lt;&lt; &quot;sum = &quot; &lt;&lt; sum &lt;&lt; endl; a = 100; b = 100; sum = add(a, b); cout &lt;&lt; &quot;sum = &quot; &lt;&lt; sum &lt;&lt; endl; system(&quot;pause&quot;); return 0;&#125; 总结：函数定义里小括号内称为形参，函数调用时传入的参数称为实参 6.4 值传递 所谓值传递，就是函数调用时实参将数值传入给形参 值传递时，&#x3D;&#x3D;如果形参发生，并不会影响实参&#x3D;&#x3D; 示例： 12345678910111213141516171819202122232425262728293031void swap(int num1, int num2)&#123; cout &lt;&lt; &quot;交换前：&quot; &lt;&lt; endl; cout &lt;&lt; &quot;num1 = &quot; &lt;&lt; num1 &lt;&lt; endl; cout &lt;&lt; &quot;num2 = &quot; &lt;&lt; num2 &lt;&lt; endl; int temp = num1; num1 = num2; num2 = temp; cout &lt;&lt; &quot;交换后：&quot; &lt;&lt; endl; cout &lt;&lt; &quot;num1 = &quot; &lt;&lt; num1 &lt;&lt; endl; cout &lt;&lt; &quot;num2 = &quot; &lt;&lt; num2 &lt;&lt; endl; //return ; 当函数声明时候，不需要返回值，可以不写return&#125;int main() &#123; int a = 10; int b = 20; swap(a, b); cout &lt;&lt; &quot;mian中的 a = &quot; &lt;&lt; a &lt;&lt; endl; cout &lt;&lt; &quot;mian中的 b = &quot; &lt;&lt; b &lt;&lt; endl; system(&quot;pause&quot;); return 0;&#125; 总结： 值传递时，形参是修饰不了实参的 6.5 函数的常见样式常见的函数样式有4种 无参无返 有参无返 无参有返 有参有返 示例： 123456789101112131415161718192021222324252627282930//函数常见样式//1、 无参无返void test01()&#123; //void a = 10; //无类型不可以创建变量,原因无法分配内存 cout &lt;&lt; &quot;this is test01&quot; &lt;&lt; endl; //test01(); 函数调用&#125;//2、 有参无返void test02(int a)&#123; cout &lt;&lt; &quot;this is test02&quot; &lt;&lt; endl; cout &lt;&lt; &quot;a = &quot; &lt;&lt; a &lt;&lt; endl;&#125;//3、无参有返int test03()&#123; cout &lt;&lt; &quot;this is test03 &quot; &lt;&lt; endl; return 10;&#125;//4、有参有返int test04(int a, int b)&#123; cout &lt;&lt; &quot;this is test04 &quot; &lt;&lt; endl; int sum = a + b; return sum;&#125; 6.6 函数的声明作用： 告诉编译器函数名称及如何调用函数。函数的实际主体可以单独定义。 函数的声明可以多次，但是函数的定义只能有一次 示例： 123456789101112131415161718192021//声明可以多次，定义只能一次//声明int max(int a, int b);int max(int a, int b);//定义int max(int a, int b)&#123; return a &gt; b ? a : b;&#125;int main() &#123; int a = 100; int b = 200; cout &lt;&lt; max(a, b) &lt;&lt; endl; system(&quot;pause&quot;); return 0;&#125; 6.7 函数的分文件编写作用：让代码结构更加清晰 函数分文件编写一般有4个步骤 创建后缀名为.h的头文件 创建后缀名为.cpp的源文件 在头文件中写函数的声明 在源文件中写函数的定义 示例： 1234567//swap.h文件#include&lt;iostream&gt;using namespace std;//实现两个数字交换的函数声明void swap(int a, int b); 123456789101112//swap.cpp文件#include &quot;swap.h&quot;void swap(int a, int b)&#123; int temp = a; a = b; b = temp; cout &lt;&lt; &quot;a = &quot; &lt;&lt; a &lt;&lt; endl; cout &lt;&lt; &quot;b = &quot; &lt;&lt; b &lt;&lt; endl;&#125; 12345678910111213//main函数文件#include &quot;swap.h&quot;int main() &#123; int a = 100; int b = 200; swap(a, b); system(&quot;pause&quot;); return 0;&#125; 7 指针7.1 指针的基本概念指针的作用： 可以通过指针间接访问内存 内存编号是从0开始记录的，一般用十六进制数字表示 可以利用指针变量保存地址 ​ 7.2 指针变量的定义和使用指针变量定义语法： 数据类型 * 变量名； 示例： 123456789101112131415161718192021int main() &#123; //1、指针的定义 int a = 10; //定义整型变量a //指针定义语法： 数据类型 * 变量名 ; int * p; //指针变量赋值 p = &amp;a; //指针指向变量a的地址 cout &lt;&lt; &amp;a &lt;&lt; endl; //打印数据a的地址 cout &lt;&lt; p &lt;&lt; endl; //打印指针变量p //2、指针的使用 //通过*操作指针变量指向的内存 cout &lt;&lt; &quot;*p = &quot; &lt;&lt; *p &lt;&lt; endl; system(&quot;pause&quot;); return 0;&#125; 指针变量和普通变量的区别 普通变量存放的是数据,指针变量存放的是地址 指针变量可以通过” * “操作符，操作指针变量指向的内存空间，这个过程称为解引用 总结1： 我们可以通过 &amp; 符号 获取变量的地址 总结2：利用指针可以记录地址 总结3：对指针变量解引用，可以操作指针指向的内存 7.3 指针所占内存空间提问：指针也是种数据类型，那么这种数据类型占用多少内存空间？ 示例： 1234567891011121314151617int main() &#123; int a = 10; int * p; p = &amp;a; //指针指向数据a的地址 cout &lt;&lt; *p &lt;&lt; endl; //* 解引用 cout &lt;&lt; sizeof(p) &lt;&lt; endl; cout &lt;&lt; sizeof(char *) &lt;&lt; endl; cout &lt;&lt; sizeof(float *) &lt;&lt; endl; cout &lt;&lt; sizeof(double *) &lt;&lt; endl; system(&quot;pause&quot;); return 0;&#125; 总结：所有指针类型在32位操作系统下是4个字节 7.4 空指针和野指针空指针：指针变量指向内存中编号为0的空间 用途：初始化指针变量 注意：空指针指向的内存是不可以访问的 示例1：空指针 12345678910111213int main() &#123; //指针变量p指向内存地址编号为0的空间 int * p = NULL; //访问空指针报错 //内存编号0 ~255为系统占用内存，不允许用户访问 cout &lt;&lt; *p &lt;&lt; endl; system(&quot;pause&quot;); return 0;&#125; 野指针：指针变量指向非法的内存空间 示例2：野指针 123456789101112int main() &#123; //指针变量p指向内存地址编号为0x1100的空间 int * p = (int *)0x1100; //访问野指针报错 cout &lt;&lt; *p &lt;&lt; endl; system(&quot;pause&quot;); return 0;&#125; 总结：空指针和野指针都不是我们申请的空间，因此不要访问。 7.5 const修饰指针const修饰指针有三种情况 const修饰指针 — 常量指针 const修饰常量 — 指针常量 const即修饰指针，又修饰常量 示例： 12345678910111213141516171819202122232425int main() &#123; int a = 10; int b = 10; //const修饰的是指针，指针指向可以改，指针指向的值不可以更改 const int * p1 = &amp;a; p1 = &amp;b; //正确 //*p1 = 100; 报错 //const修饰的是常量，指针指向不可以改，指针指向的值可以更改 int * const p2 = &amp;a; //p2 = &amp;b; //错误 *p2 = 100; //正确 //const既修饰指针又修饰常量 const int * const p3 = &amp;a; //p3 = &amp;b; //错误 //*p3 = 100; //错误 system(&quot;pause&quot;); return 0;&#125; 技巧：看const右侧紧跟着的是指针还是常量, 是指针就是常量指针，是常量就是指针常量 7.6 指针和数组作用：利用指针访问数组中元素 示例： 1234567891011121314151617181920int main() &#123; int arr[] = &#123; 1,2,3,4,5,6,7,8,9,10 &#125;; int * p = arr; //指向数组的指针 cout &lt;&lt; &quot;第一个元素： &quot; &lt;&lt; arr[0] &lt;&lt; endl; cout &lt;&lt; &quot;指针访问第一个元素： &quot; &lt;&lt; *p &lt;&lt; endl; for (int i = 0; i &lt; 10; i++) &#123; //利用指针遍历数组 cout &lt;&lt; *p &lt;&lt; endl; p++; &#125; system(&quot;pause&quot;); return 0;&#125; 7.7 指针和函数作用：利用指针作函数参数，可以修改实参的值 示例： 12345678910111213141516171819202122232425262728293031//值传递void swap1(int a ,int b)&#123; int temp = a; a = b; b = temp;&#125;//地址传递void swap2(int * p1, int *p2)&#123; int temp = *p1; *p1 = *p2; *p2 = temp;&#125;int main() &#123; int a = 10; int b = 20; swap1(a, b); // 值传递不会改变实参 swap2(&amp;a, &amp;b); //地址传递会改变实参 cout &lt;&lt; &quot;a = &quot; &lt;&lt; a &lt;&lt; endl; cout &lt;&lt; &quot;b = &quot; &lt;&lt; b &lt;&lt; endl; system(&quot;pause&quot;); return 0;&#125; 总结：如果不想修改实参，就用值传递，如果想修改实参，就用地址传递 7.8 指针、数组、函数案例描述：封装一个函数，利用冒泡排序，实现对整型数组的升序排序 例如数组：int arr[10] &#x3D; { 4,3,6,9,1,2,10,8,7,5 }; 示例： 123456789101112131415161718192021222324252627282930313233343536373839//冒泡排序函数void bubbleSort(int * arr, int len) //int * arr 也可以写为int arr[]&#123; for (int i = 0; i &lt; len - 1; i++) &#123; for (int j = 0; j &lt; len - 1 - i; j++) &#123; if (arr[j] &gt; arr[j + 1]) &#123; int temp = arr[j]; arr[j] = arr[j + 1]; arr[j + 1] = temp; &#125; &#125; &#125;&#125;//打印数组函数void printArray(int arr[], int len)&#123; for (int i = 0; i &lt; len; i++) &#123; cout &lt;&lt; arr[i] &lt;&lt; endl; &#125;&#125;int main() &#123; int arr[10] = &#123; 4,3,6,9,1,2,10,8,7,5 &#125;; int len = sizeof(arr) / sizeof(int); bubbleSort(arr, len); printArray(arr, len); system(&quot;pause&quot;); return 0;&#125; 总结：当数组名传入到函数作为参数时，被退化为指向首元素的指针 8 结构体8.1 结构体基本概念结构体属于用户&#x3D;&#x3D;自定义的数据类型&#x3D;&#x3D;，允许用户存储不同的数据类型 8.2 结构体定义和使用语法：struct 结构体名 &#123; 结构体成员列表 &#125;； 通过结构体创建变量的方式有三种： struct 结构体名 变量名 struct 结构体名 变量名 &#x3D; { 成员1值 ， 成员2值…} 定义结构体时顺便创建变量 示例： 1234567891011121314151617181920212223242526272829303132333435363738//结构体定义struct student&#123; //成员列表 string name; //姓名 int age; //年龄 int score; //分数&#125;stu3; //结构体变量创建方式3 int main() &#123; //结构体变量创建方式1 struct student stu1; //struct 关键字可以省略 stu1.name = &quot;张三&quot;; stu1.age = 18; stu1.score = 100; cout &lt;&lt; &quot;姓名：&quot; &lt;&lt; stu1.name &lt;&lt; &quot; 年龄：&quot; &lt;&lt; stu1.age &lt;&lt; &quot; 分数：&quot; &lt;&lt; stu1.score &lt;&lt; endl; //结构体变量创建方式2 struct student stu2 = &#123; &quot;李四&quot;,19,60 &#125;; cout &lt;&lt; &quot;姓名：&quot; &lt;&lt; stu2.name &lt;&lt; &quot; 年龄：&quot; &lt;&lt; stu2.age &lt;&lt; &quot; 分数：&quot; &lt;&lt; stu2.score &lt;&lt; endl; stu3.name = &quot;王五&quot;; stu3.age = 18; stu3.score = 80; cout &lt;&lt; &quot;姓名：&quot; &lt;&lt; stu3.name &lt;&lt; &quot; 年龄：&quot; &lt;&lt; stu3.age &lt;&lt; &quot; 分数：&quot; &lt;&lt; stu3.score &lt;&lt; endl; system(&quot;pause&quot;); return 0;&#125; 总结1：定义结构体时的关键字是struct，不可省略 总结2：创建结构体变量时，关键字struct可以省略 总结3：结构体变量利用操作符 ‘’.’’ 访问成员 8.3 结构体数组作用：将自定义的结构体放入到数组中方便维护 语法： struct 结构体名 数组名[元素个数] = &#123; &#123;&#125; , &#123;&#125; , ... &#123;&#125; &#125; 示例： 12345678910111213141516171819202122232425262728//结构体定义struct student&#123; //成员列表 string name; //姓名 int age; //年龄 int score; //分数&#125;int main() &#123; //结构体数组 struct student arr[3]= &#123; &#123;&quot;张三&quot;,18,80 &#125;, &#123;&quot;李四&quot;,19,60 &#125;, &#123;&quot;王五&quot;,20,70 &#125; &#125;; for (int i = 0; i &lt; 3; i++) &#123; cout &lt;&lt; &quot;姓名：&quot; &lt;&lt; arr[i].name &lt;&lt; &quot; 年龄：&quot; &lt;&lt; arr[i].age &lt;&lt; &quot; 分数：&quot; &lt;&lt; arr[i].score &lt;&lt; endl; &#125; system(&quot;pause&quot;); return 0;&#125; 8.4 结构体指针作用：通过指针访问结构体中的成员 利用操作符 -&gt; 可以通过结构体指针访问结构体属性 示例： 123456789101112131415161718192021222324//结构体定义struct student&#123; //成员列表 string name; //姓名 int age; //年龄 int score; //分数&#125;;int main() &#123; struct student stu = &#123; &quot;张三&quot;,18,100, &#125;; struct student * p = &amp;stu; p-&gt;score = 80; //指针通过 -&gt; 操作符可以访问成员 cout &lt;&lt; &quot;姓名：&quot; &lt;&lt; p-&gt;name &lt;&lt; &quot; 年龄：&quot; &lt;&lt; p-&gt;age &lt;&lt; &quot; 分数：&quot; &lt;&lt; p-&gt;score &lt;&lt; endl; system(&quot;pause&quot;); return 0;&#125; 总结：结构体指针可以通过 -&gt; 操作符 来访问结构体中的成员 8.5 结构体嵌套结构体作用： 结构体中的成员可以是另一个结构体 例如：每个老师辅导一个学员，一个老师的结构体中，记录一个学生的结构体 示例： 123456789101112131415161718192021222324252627282930313233343536373839//学生结构体定义struct student&#123; //成员列表 string name; //姓名 int age; //年龄 int score; //分数&#125;;//教师结构体定义struct teacher&#123; //成员列表 int id; //职工编号 string name; //教师姓名 int age; //教师年龄 struct student stu; //子结构体 学生&#125;;int main() &#123; struct teacher t1; t1.id = 10000; t1.name = &quot;老王&quot;; t1.age = 40; t1.stu.name = &quot;张三&quot;; t1.stu.age = 18; t1.stu.score = 100; cout &lt;&lt; &quot;教师 职工编号： &quot; &lt;&lt; t1.id &lt;&lt; &quot; 姓名： &quot; &lt;&lt; t1.name &lt;&lt; &quot; 年龄： &quot; &lt;&lt; t1.age &lt;&lt; endl; cout &lt;&lt; &quot;辅导学员 姓名： &quot; &lt;&lt; t1.stu.name &lt;&lt; &quot; 年龄：&quot; &lt;&lt; t1.stu.age &lt;&lt; &quot; 考试分数： &quot; &lt;&lt; t1.stu.score &lt;&lt; endl; system(&quot;pause&quot;); return 0;&#125; 总结：在结构体中可以定义另一个结构体作为成员，用来解决实际问题 8.6 结构体做函数参数作用：将结构体作为参数向函数中传递 传递方式有两种： 值传递 地址传递 示例： 12345678910111213141516171819202122232425262728293031323334353637383940//学生结构体定义struct student&#123; //成员列表 string name; //姓名 int age; //年龄 int score; //分数&#125;;//值传递void printStudent(student stu )&#123; stu.age = 28; cout &lt;&lt; &quot;子函数中 姓名：&quot; &lt;&lt; stu.name &lt;&lt; &quot; 年龄： &quot; &lt;&lt; stu.age &lt;&lt; &quot; 分数：&quot; &lt;&lt; stu.score &lt;&lt; endl;&#125;//地址传递void printStudent2(student *stu)&#123; stu-&gt;age = 28; cout &lt;&lt; &quot;子函数中 姓名：&quot; &lt;&lt; stu-&gt;name &lt;&lt; &quot; 年龄： &quot; &lt;&lt; stu-&gt;age &lt;&lt; &quot; 分数：&quot; &lt;&lt; stu-&gt;score &lt;&lt; endl;&#125;int main() &#123; student stu = &#123; &quot;张三&quot;,18,100&#125;; //值传递 printStudent(stu); cout &lt;&lt; &quot;主函数中 姓名：&quot; &lt;&lt; stu.name &lt;&lt; &quot; 年龄： &quot; &lt;&lt; stu.age &lt;&lt; &quot; 分数：&quot; &lt;&lt; stu.score &lt;&lt; endl; cout &lt;&lt; endl; //地址传递 printStudent2(&amp;stu); cout &lt;&lt; &quot;主函数中 姓名：&quot; &lt;&lt; stu.name &lt;&lt; &quot; 年龄： &quot; &lt;&lt; stu.age &lt;&lt; &quot; 分数：&quot; &lt;&lt; stu.score &lt;&lt; endl; system(&quot;pause&quot;); return 0;&#125; 总结：如果不想修改主函数中的数据，用值传递，反之用地址传递 8.7 结构体中 const使用场景作用：用const来防止误操作 示例： 123456789101112131415161718192021222324252627//学生结构体定义struct student&#123; //成员列表 string name; //姓名 int age; //年龄 int score; //分数&#125;;//const使用场景void printStudent(const student *stu) //加const防止函数体中的误操作&#123; //stu-&gt;age = 100; //操作失败，因为加了const修饰 cout &lt;&lt; &quot;姓名：&quot; &lt;&lt; stu-&gt;name &lt;&lt; &quot; 年龄：&quot; &lt;&lt; stu-&gt;age &lt;&lt; &quot; 分数：&quot; &lt;&lt; stu-&gt;score &lt;&lt; endl;&#125;int main() &#123; student stu = &#123; &quot;张三&quot;,18,100 &#125;; printStudent(&amp;stu); system(&quot;pause&quot;); return 0;&#125; 8.8 结构体案例8.8.1 案例1案例描述： 学校正在做毕设项目，每名老师带领5个学生，总共有3名老师，需求如下 设计学生和老师的结构体，其中在老师的结构体中，有老师姓名和一个存放5名学生的数组作为成员 学生的成员有姓名、考试分数，创建数组存放3名老师，通过函数给每个老师及所带的学生赋值 最终打印出老师数据以及老师所带的学生数据。 示例： 1234567891011121314151617181920212223242526272829303132333435363738394041424344454647484950515253545556struct Student&#123; string name; int score;&#125;;struct Teacher&#123; string name; Student sArray[5];&#125;;void allocateSpace(Teacher tArray[] , int len)&#123; string tName = &quot;教师&quot;; string sName = &quot;学生&quot;; string nameSeed = &quot;ABCDE&quot;; for (int i = 0; i &lt; len; i++) &#123; tArray[i].name = tName + nameSeed[i]; for (int j = 0; j &lt; 5; j++) &#123; tArray[i].sArray[j].name = sName + nameSeed[j]; tArray[i].sArray[j].score = rand() % 61 + 40; &#125; &#125;&#125;void printTeachers(Teacher tArray[], int len)&#123; for (int i = 0; i &lt; len; i++) &#123; cout &lt;&lt; tArray[i].name &lt;&lt; endl; for (int j = 0; j &lt; 5; j++) &#123; cout &lt;&lt; &quot;\\t姓名：&quot; &lt;&lt; tArray[i].sArray[j].name &lt;&lt; &quot; 分数：&quot; &lt;&lt; tArray[i].sArray[j].score &lt;&lt; endl; &#125; &#125;&#125;int main() &#123; srand((unsigned int)time(NULL)); //随机数种子 头文件 #include &lt;ctime&gt; Teacher tArray[3]; //老师数组 int len = sizeof(tArray) / sizeof(Teacher); allocateSpace(tArray, len); //创建数据 printTeachers(tArray, len); //打印数据 system(&quot;pause&quot;); return 0;&#125; 8.8.2 案例2案例描述： 设计一个英雄的结构体，包括成员姓名，年龄，性别;创建结构体数组，数组中存放5名英雄。 通过冒泡排序的算法，将数组中的英雄按照年龄进行升序排序，最终打印排序后的结果。 五名英雄信息如下： 12345&#123;&quot;刘备&quot;,23,&quot;男&quot;&#125;,&#123;&quot;关羽&quot;,22,&quot;男&quot;&#125;,&#123;&quot;张飞&quot;,20,&quot;男&quot;&#125;,&#123;&quot;赵云&quot;,21,&quot;男&quot;&#125;,&#123;&quot;貂蝉&quot;,19,&quot;女&quot;&#125;, 示例： 1234567891011121314151617181920212223242526272829303132333435363738394041424344454647484950515253//英雄结构体struct hero&#123; string name; int age; string sex;&#125;;//冒泡排序void bubbleSort(hero arr[] , int len)&#123; for (int i = 0; i &lt; len - 1; i++) &#123; for (int j = 0; j &lt; len - 1 - i; j++) &#123; if (arr[j].age &gt; arr[j + 1].age) &#123; hero temp = arr[j]; arr[j] = arr[j + 1]; arr[j + 1] = temp; &#125; &#125; &#125;&#125;//打印数组void printHeros(hero arr[], int len)&#123; for (int i = 0; i &lt; len; i++) &#123; cout &lt;&lt; &quot;姓名： &quot; &lt;&lt; arr[i].name &lt;&lt; &quot; 性别： &quot; &lt;&lt; arr[i].sex &lt;&lt; &quot; 年龄： &quot; &lt;&lt; arr[i].age &lt;&lt; endl; &#125;&#125;int main() &#123; struct hero arr[5] = &#123; &#123;&quot;刘备&quot;,23,&quot;男&quot;&#125;, &#123;&quot;关羽&quot;,22,&quot;男&quot;&#125;, &#123;&quot;张飞&quot;,20,&quot;男&quot;&#125;, &#123;&quot;赵云&quot;,21,&quot;男&quot;&#125;, &#123;&quot;貂蝉&quot;,19,&quot;女&quot;&#125;, &#125;; int len = sizeof(arr) / sizeof(hero); //获取数组元素个数 bubbleSort(arr, len); //排序 printHeros(arr, len); //打印 system(&quot;pause&quot;); return 0;&#125;","categories":[{"name":"C++","slug":"C","permalink":"https://why-1513.github.io.git/categories/C/"}],"tags":[]},{"title":"C++核心编程","slug":"C++核心编程","date":"2024-04-28T02:07:22.000Z","updated":"2024-04-28T02:14:24.295Z","comments":true,"path":"2024/04/28/C++核心编程/","permalink":"https://why-1513.github.io.git/2024/04/28/C++%E6%A0%B8%E5%BF%83%E7%BC%96%E7%A8%8B/","excerpt":"","text":"C++核心编程本阶段主要针对C++&#x3D;&#x3D;面向对象&#x3D;&#x3D;编程技术做详细讲解，探讨C++中的核心和精髓。 1 内存分区模型C++程序在执行时，将内存大方向划分为4个区域 代码区：存放函数体的二进制代码，由操作系统进行管理的 全局区：存放全局变量和静态变量以及常量 栈区：由编译器自动分配释放, 存放函数的参数值,局部变量等 堆区：由程序员分配和释放,若程序员不释放,程序结束时由操作系统回收 内存四区意义： 不同区域存放的数据，赋予不同的生命周期, 给我们更大的灵活编程 1.1 程序运行前​ 在程序编译后，生成了exe可执行程序，未执行该程序前分为两个区域 ​ 代码区： ​ 存放 CPU 执行的机器指令 ​ 代码区是共享的，共享的目的是对于频繁被执行的程序，只需要在内存中有一份代码即可 ​ 代码区是只读的，使其只读的原因是防止程序意外地修改了它的指令 ​ 全局区： ​ 全局变量和静态变量存放在此. ​ 全局区还包含了常量区, 字符串常量和其他常量也存放在此. ​ &#x3D;&#x3D;该区域的数据在程序结束后由操作系统释放&#x3D;&#x3D;. 示例： 12345678910111213141516171819202122232425262728293031323334353637383940414243//全局变量int g_a = 10;int g_b = 10;//全局常量const int c_g_a = 10;const int c_g_b = 10;int main() &#123; //局部变量 int a = 10; int b = 10; //打印地址 cout &lt;&lt; &quot;局部变量a地址为： &quot; &lt;&lt; (int)&amp;a &lt;&lt; endl; cout &lt;&lt; &quot;局部变量b地址为： &quot; &lt;&lt; (int)&amp;b &lt;&lt; endl; cout &lt;&lt; &quot;全局变量g_a地址为： &quot; &lt;&lt; (int)&amp;g_a &lt;&lt; endl; cout &lt;&lt; &quot;全局变量g_b地址为： &quot; &lt;&lt; (int)&amp;g_b &lt;&lt; endl; //静态变量 static int s_a = 10; static int s_b = 10; cout &lt;&lt; &quot;静态变量s_a地址为： &quot; &lt;&lt; (int)&amp;s_a &lt;&lt; endl; cout &lt;&lt; &quot;静态变量s_b地址为： &quot; &lt;&lt; (int)&amp;s_b &lt;&lt; endl; cout &lt;&lt; &quot;字符串常量地址为： &quot; &lt;&lt; (int)&amp;&quot;hello world&quot; &lt;&lt; endl; cout &lt;&lt; &quot;字符串常量地址为： &quot; &lt;&lt; (int)&amp;&quot;hello world1&quot; &lt;&lt; endl; cout &lt;&lt; &quot;全局常量c_g_a地址为： &quot; &lt;&lt; (int)&amp;c_g_a &lt;&lt; endl; cout &lt;&lt; &quot;全局常量c_g_b地址为： &quot; &lt;&lt; (int)&amp;c_g_b &lt;&lt; endl; const int c_l_a = 10; const int c_l_b = 10; cout &lt;&lt; &quot;局部常量c_l_a地址为： &quot; &lt;&lt; (int)&amp;c_l_a &lt;&lt; endl; cout &lt;&lt; &quot;局部常量c_l_b地址为： &quot; &lt;&lt; (int)&amp;c_l_b &lt;&lt; endl; system(&quot;pause&quot;); return 0;&#125; 打印结果： 总结： C++中在程序运行前分为全局区和代码区 代码区特点是共享和只读 全局区中存放全局变量、静态变量、常量 常量区中存放 const修饰的全局常量 和 字符串常量 1.2 程序运行后​ 栈区： ​ 由编译器自动分配释放, 存放函数的参数值,局部变量等 ​ 注意事项：不要返回局部变量的地址，栈区开辟的数据由编译器自动释放 示例： 1234567891011121314151617int * func()&#123; int a = 10; return &amp;a;&#125;int main() &#123; int *p = func(); cout &lt;&lt; *p &lt;&lt; endl; cout &lt;&lt; *p &lt;&lt; endl; system(&quot;pause&quot;); return 0;&#125; ​ 堆区： ​ 由程序员分配释放,若程序员不释放,程序结束时由操作系统回收 ​ 在C++中主要利用new在堆区开辟内存 示例： 1234567891011121314151617int* func()&#123; int* a = new int(10); return a;&#125;int main() &#123; int *p = func(); cout &lt;&lt; *p &lt;&lt; endl; cout &lt;&lt; *p &lt;&lt; endl; system(&quot;pause&quot;); return 0;&#125; 总结： 堆区数据由程序员管理开辟和释放 堆区数据利用new关键字进行开辟内存 1.3 new操作符​ C++中利用&#x3D;&#x3D;new&#x3D;&#x3D;操作符在堆区开辟数据 ​ 堆区开辟的数据，由程序员手动开辟，手动释放，释放利用操作符 &#x3D;&#x3D;delete&#x3D;&#x3D; ​ 语法： new 数据类型 ​ 利用new创建的数据，会返回该数据对应的类型的指针 示例1： 基本语法 12345678910111213141516171819202122int* func()&#123; int* a = new int(10); return a;&#125;int main() &#123; int *p = func(); cout &lt;&lt; *p &lt;&lt; endl; cout &lt;&lt; *p &lt;&lt; endl; //利用delete释放堆区数据 delete p; //cout &lt;&lt; *p &lt;&lt; endl; //报错，释放的空间不可访问 system(&quot;pause&quot;); return 0;&#125; 示例2：开辟数组 12345678910111213141516171819202122//堆区开辟数组int main() &#123; int* arr = new int[10]; for (int i = 0; i &lt; 10; i++) &#123; arr[i] = i + 100; &#125; for (int i = 0; i &lt; 10; i++) &#123; cout &lt;&lt; arr[i] &lt;&lt; endl; &#125; //释放数组 delete 后加 [] delete[] arr; system(&quot;pause&quot;); return 0;&#125; 2 引用2.1 引用的基本使用**作用： **给变量起别名 语法： 数据类型 &amp;别名 = 原名 示例： 1234567891011121314151617int main() &#123; int a = 10; int &amp;b = a; cout &lt;&lt; &quot;a = &quot; &lt;&lt; a &lt;&lt; endl; cout &lt;&lt; &quot;b = &quot; &lt;&lt; b &lt;&lt; endl; b = 100; cout &lt;&lt; &quot;a = &quot; &lt;&lt; a &lt;&lt; endl; cout &lt;&lt; &quot;b = &quot; &lt;&lt; b &lt;&lt; endl; system(&quot;pause&quot;); return 0;&#125; 2.2 引用注意事项 引用必须初始化 引用在初始化后，不可以改变 示例： 12345678910111213141516int main() &#123; int a = 10; int b = 20; //int &amp;c; //错误，引用必须初始化 int &amp;c = a; //一旦初始化后，就不可以更改 c = b; //这是赋值操作，不是更改引用 cout &lt;&lt; &quot;a = &quot; &lt;&lt; a &lt;&lt; endl; cout &lt;&lt; &quot;b = &quot; &lt;&lt; b &lt;&lt; endl; cout &lt;&lt; &quot;c = &quot; &lt;&lt; c &lt;&lt; endl; system(&quot;pause&quot;); return 0;&#125; 2.3 引用做函数参数作用：函数传参时，可以利用引用的技术让形参修饰实参 优点：可以简化指针修改实参 示例： 12345678910111213141516171819202122232425262728293031323334353637383940//1. 值传递void mySwap01(int a, int b) &#123; int temp = a; a = b; b = temp;&#125;//2. 地址传递void mySwap02(int* a, int* b) &#123; int temp = *a; *a = *b; *b = temp;&#125;//3. 引用传递void mySwap03(int&amp; a, int&amp; b) &#123; int temp = a; a = b; b = temp;&#125;int main() &#123; int a = 10; int b = 20; mySwap01(a, b); cout &lt;&lt; &quot;a:&quot; &lt;&lt; a &lt;&lt; &quot; b:&quot; &lt;&lt; b &lt;&lt; endl; mySwap02(&amp;a, &amp;b); cout &lt;&lt; &quot;a:&quot; &lt;&lt; a &lt;&lt; &quot; b:&quot; &lt;&lt; b &lt;&lt; endl; mySwap03(a, b); cout &lt;&lt; &quot;a:&quot; &lt;&lt; a &lt;&lt; &quot; b:&quot; &lt;&lt; b &lt;&lt; endl; system(&quot;pause&quot;); return 0;&#125; 总结：通过引用参数产生的效果同按地址传递是一样的。引用的语法更清楚简单 2.4 引用做函数返回值作用：引用是可以作为函数的返回值存在的 注意：不要返回局部变量引用 用法：函数调用作为左值 示例： 123456789101112131415161718192021222324252627282930313233//返回局部变量引用int&amp; test01() &#123; int a = 10; //局部变量 return a;&#125;//返回静态变量引用int&amp; test02() &#123; static int a = 20; return a;&#125;int main() &#123; //不能返回局部变量的引用 int&amp; ref = test01(); cout &lt;&lt; &quot;ref = &quot; &lt;&lt; ref &lt;&lt; endl; cout &lt;&lt; &quot;ref = &quot; &lt;&lt; ref &lt;&lt; endl; //如果函数做左值，那么必须返回引用 int&amp; ref2 = test02(); cout &lt;&lt; &quot;ref2 = &quot; &lt;&lt; ref2 &lt;&lt; endl; cout &lt;&lt; &quot;ref2 = &quot; &lt;&lt; ref2 &lt;&lt; endl; test02() = 1000; cout &lt;&lt; &quot;ref2 = &quot; &lt;&lt; ref2 &lt;&lt; endl; cout &lt;&lt; &quot;ref2 = &quot; &lt;&lt; ref2 &lt;&lt; endl; system(&quot;pause&quot;); return 0;&#125; ​ 2.5 引用的本质本质：引用的本质在c++内部实现是一个指针常量. 讲解示例： 1234567891011121314151617//发现是引用，转换为 int* const ref = &amp;a;void func(int&amp; ref)&#123; ref = 100; // ref是引用，转换为*ref = 100&#125;int main()&#123; int a = 10; //自动转换为 int* const ref = &amp;a; 指针常量是指针指向不可改，也说明为什么引用不可更改 int&amp; ref = a; ref = 20; //内部发现ref是引用，自动帮我们转换为: *ref = 20; cout &lt;&lt; &quot;a:&quot; &lt;&lt; a &lt;&lt; endl; cout &lt;&lt; &quot;ref:&quot; &lt;&lt; ref &lt;&lt; endl; func(a); return 0;&#125; 结论：C++推荐用引用技术，因为语法方便，引用本质是指针常量，但是所有的指针操作编译器都帮我们做了 2.6 常量引用作用：常量引用主要用来修饰形参，防止误操作 在函数形参列表中，可以加&#x3D;&#x3D;const修饰形参&#x3D;&#x3D;，防止形参改变实参 示例： 1234567891011121314151617181920212223//引用使用的场景，通常用来修饰形参void showValue(const int&amp; v) &#123; //v += 10; cout &lt;&lt; v &lt;&lt; endl;&#125;int main() &#123; //int&amp; ref = 10; 引用本身需要一个合法的内存空间，因此这行错误 //加入const就可以了，编译器优化代码，int temp = 10; const int&amp; ref = temp; const int&amp; ref = 10; //ref = 100; //加入const后不可以修改变量 cout &lt;&lt; ref &lt;&lt; endl; //函数中利用常量引用防止误操作修改实参 int a = 10; showValue(a); system(&quot;pause&quot;); return 0;&#125; 3 函数提高3.1 函数默认参数在C++中，函数的形参列表中的形参是可以有默认值的。 语法： 返回值类型 函数名 （参数= 默认值）&#123;&#125; 示例： 1234567891011121314151617181920int func(int a, int b = 10, int c = 10) &#123; return a + b + c;&#125;//1. 如果某个位置参数有默认值，那么从这个位置往后，从左向右，必须都要有默认值//2. 如果函数声明有默认值，函数实现的时候就不能有默认参数int func2(int a = 10, int b = 10);int func2(int a, int b) &#123; return a + b;&#125;int main() &#123; cout &lt;&lt; &quot;ret = &quot; &lt;&lt; func(20, 20) &lt;&lt; endl; cout &lt;&lt; &quot;ret = &quot; &lt;&lt; func(100) &lt;&lt; endl; system(&quot;pause&quot;); return 0;&#125; 3.2 函数占位参数C++中函数的形参列表里可以有占位参数，用来做占位，调用函数时必须填补该位置 语法： 返回值类型 函数名 (数据类型)&#123;&#125; 在现阶段函数的占位参数存在意义不大，但是后面的课程中会用到该技术 示例： 12345678910111213//函数占位参数 ，占位参数也可以有默认参数void func(int a, int) &#123; cout &lt;&lt; &quot;this is func&quot; &lt;&lt; endl;&#125;int main() &#123; func(10,10); //占位参数必须填补 system(&quot;pause&quot;); return 0;&#125; 3.3 函数重载3.3.1 函数重载概述作用：函数名可以相同，提高复用性 函数重载满足条件： 同一个作用域下 函数名称相同 函数参数类型不同 或者 个数不同 或者 顺序不同 注意: 函数的返回值不可以作为函数重载的条件 示例： 1234567891011121314151617181920212223242526272829303132333435363738394041//函数重载需要函数都在同一个作用域下void func()&#123; cout &lt;&lt; &quot;func 的调用！&quot; &lt;&lt; endl;&#125;void func(int a)&#123; cout &lt;&lt; &quot;func (int a) 的调用！&quot; &lt;&lt; endl;&#125;void func(double a)&#123; cout &lt;&lt; &quot;func (double a)的调用！&quot; &lt;&lt; endl;&#125;void func(int a ,double b)&#123; cout &lt;&lt; &quot;func (int a ,double b) 的调用！&quot; &lt;&lt; endl;&#125;void func(double a ,int b)&#123; cout &lt;&lt; &quot;func (double a ,int b)的调用！&quot; &lt;&lt; endl;&#125;//函数返回值不可以作为函数重载条件//int func(double a, int b)//&#123;// cout &lt;&lt; &quot;func (double a ,int b)的调用！&quot; &lt;&lt; endl;//&#125;int main() &#123; func(); func(10); func(3.14); func(10,3.14); func(3.14 , 10); system(&quot;pause&quot;); return 0;&#125; 3.3.2 函数重载注意事项 引用作为重载条件 函数重载碰到函数默认参数 示例： 123456789101112131415161718192021222324252627282930313233343536373839//函数重载注意事项//1、引用作为重载条件void func(int &amp;a)&#123; cout &lt;&lt; &quot;func (int &amp;a) 调用 &quot; &lt;&lt; endl;&#125;void func(const int &amp;a)&#123; cout &lt;&lt; &quot;func (const int &amp;a) 调用 &quot; &lt;&lt; endl;&#125;//2、函数重载碰到函数默认参数void func2(int a, int b = 10)&#123; cout &lt;&lt; &quot;func2(int a, int b = 10) 调用&quot; &lt;&lt; endl;&#125;void func2(int a)&#123; cout &lt;&lt; &quot;func2(int a) 调用&quot; &lt;&lt; endl;&#125;int main() &#123; int a = 10; func(a); //调用无const func(10);//调用有const //func2(10); //碰到默认参数产生歧义，需要避免 system(&quot;pause&quot;); return 0;&#125; 4 类和对象C++面向对象的三大特性为：&#x3D;&#x3D;封装、继承、多态&#x3D;&#x3D; C++认为&#x3D;&#x3D;万事万物都皆为对象&#x3D;&#x3D;，对象上有其属性和行为 例如： ​ 人可以作为对象，属性有姓名、年龄、身高、体重…，行为有走、跑、跳、吃饭、唱歌… ​ 车也可以作为对象，属性有轮胎、方向盘、车灯…,行为有载人、放音乐、放空调… ​ 具有相同性质的&#x3D;&#x3D;对象&#x3D;&#x3D;，我们可以抽象称为&#x3D;&#x3D;类&#x3D;&#x3D;，人属于人类，车属于车类 4.1 封装4.1.1 封装的意义封装是C++面向对象三大特性之一 封装的意义： 将属性和行为作为一个整体，表现生活中的事物 将属性和行为加以权限控制 封装意义一： ​ 在设计类的时候，属性和行为写在一起，表现事物 语法： class 类名&#123; 访问权限： 属性 / 行为 &#125;; 示例1：设计一个圆类，求圆的周长 示例代码： 123456789101112131415161718192021222324252627282930313233343536373839//圆周率const double PI = 3.14;//1、封装的意义//将属性和行为作为一个整体，用来表现生活中的事物//封装一个圆类，求圆的周长//class代表设计一个类，后面跟着的是类名class Circle&#123;public: //访问权限 公共的权限 //属性 int m_r;//半径 //行为 //获取到圆的周长 double calculateZC() &#123; //2 * pi * r //获取圆的周长 return 2 * PI * m_r; &#125;&#125;;int main() &#123; //通过圆类，创建圆的对象 // c1就是一个具体的圆 Circle c1; c1.m_r = 10; //给圆对象的半径 进行赋值操作 //2 * pi * 10 = = 62.8 cout &lt;&lt; &quot;圆的周长为： &quot; &lt;&lt; c1.calculateZC() &lt;&lt; endl; system(&quot;pause&quot;); return 0;&#125; 示例2：设计一个学生类，属性有姓名和学号，可以给姓名和学号赋值，可以显示学生的姓名和学号 示例2代码： 123456789101112131415161718192021222324252627282930//学生类class Student &#123;public: void setName(string name) &#123; m_name = name; &#125; void setID(int id) &#123; m_id = id; &#125; void showStudent() &#123; cout &lt;&lt; &quot;name:&quot; &lt;&lt; m_name &lt;&lt; &quot; ID:&quot; &lt;&lt; m_id &lt;&lt; endl; &#125;public: string m_name; int m_id;&#125;;int main() &#123; Student stu; stu.setName(&quot;德玛西亚&quot;); stu.setID(250); stu.showStudent(); system(&quot;pause&quot;); return 0;&#125; 封装意义二： 类在设计时，可以把属性和行为放在不同的权限下，加以控制 访问权限有三种： public 公共权限 protected 保护权限 private 私有权限 示例： 123456789101112131415161718192021222324252627282930313233343536373839//三种权限//公共权限 public 类内可以访问 类外可以访问//保护权限 protected 类内可以访问 类外不可以访问//私有权限 private 类内可以访问 类外不可以访问class Person&#123; //姓名 公共权限public: string m_Name; //汽车 保护权限protected: string m_Car; //银行卡密码 私有权限private: int m_Password;public: void func() &#123; m_Name = &quot;张三&quot;; m_Car = &quot;拖拉机&quot;; m_Password = 123456; &#125;&#125;;int main() &#123; Person p; p.m_Name = &quot;李四&quot;; //p.m_Car = &quot;奔驰&quot;; //保护权限类外访问不到 //p.m_Password = 123; //私有权限类外访问不到 system(&quot;pause&quot;); return 0;&#125; 4.1.2 struct和class区别在C++中 struct和class唯一的区别就在于 默认的访问权限不同 区别： struct 默认权限为公共 class 默认权限为私有 12345678910111213141516171819202122class C1&#123; int m_A; //默认是私有权限&#125;;struct C2&#123; int m_A; //默认是公共权限&#125;;int main() &#123; C1 c1; c1.m_A = 10; //错误，访问权限是私有 C2 c2; c2.m_A = 10; //正确，访问权限是公共 system(&quot;pause&quot;); return 0;&#125; 4.1.3 成员属性设置为私有优点1：将所有成员属性设置为私有，可以自己控制读写权限 优点2：对于写权限，我们可以检测数据的有效性 示例： 1234567891011121314151617181920212223242526272829303132333435363738394041424344454647484950515253545556575859class Person &#123;public: //姓名设置可读可写 void setName(string name) &#123; m_Name = name; &#125; string getName() &#123; return m_Name; &#125; //获取年龄 int getAge() &#123; return m_Age; &#125; //设置年龄 void setAge(int age) &#123; if (age &lt; 0 || age &gt; 150) &#123; cout &lt;&lt; &quot;你个老妖精!&quot; &lt;&lt; endl; return; &#125; m_Age = age; &#125; //情人设置为只写 void setLover(string lover) &#123; m_Lover = lover; &#125;private: string m_Name; //可读可写 姓名 int m_Age; //只读 年龄 string m_Lover; //只写 情人&#125;;int main() &#123; Person p; //姓名设置 p.setName(&quot;张三&quot;); cout &lt;&lt; &quot;姓名： &quot; &lt;&lt; p.getName() &lt;&lt; endl; //年龄设置 p.setAge(50); cout &lt;&lt; &quot;年龄： &quot; &lt;&lt; p.getAge() &lt;&lt; endl; //情人设置 p.setLover(&quot;苍井&quot;); //cout &lt;&lt; &quot;情人： &quot; &lt;&lt; p.m_Lover &lt;&lt; endl; //只写属性，不可以读取 system(&quot;pause&quot;); return 0;&#125; 练习案例1：设计立方体类 设计立方体类(Cube) 求出立方体的面积和体积 分别用全局函数和成员函数判断两个立方体是否相等。 练习案例2：点和圆的关系 设计一个圆形类（Circle），和一个点类（Point），计算点和圆的关系。 4.2 对象的初始化和清理 生活中我们买的电子产品都基本会有出厂设置，在某一天我们不用时候也会删除一些自己信息数据保证安全 C++中的面向对象来源于生活，每个对象也都会有初始设置以及 对象销毁前的清理数据的设置。 4.2.1 构造函数和析构函数对象的初始化和清理也是两个非常重要的安全问题 ​ 一个对象或者变量没有初始状态，对其使用后果是未知 ​ 同样的使用完一个对象或变量，没有及时清理，也会造成一定的安全问题 c++利用了构造函数和析构函数解决上述问题，这两个函数将会被编译器自动调用，完成对象初始化和清理工作。 对象的初始化和清理工作是编译器强制要我们做的事情，因此如果我们不提供构造和析构，编译器会提供 编译器提供的构造函数和析构函数是空实现。 构造函数：主要作用在于创建对象时为对象的成员属性赋值，构造函数由编译器自动调用，无须手动调用。 析构函数：主要作用在于对象销毁前系统自动调用，执行一些清理工作。 构造函数语法：类名()&#123;&#125; 构造函数，没有返回值也不写void 函数名称与类名相同 构造函数可以有参数，因此可以发生重载 程序在调用对象时候会自动调用构造，无须手动调用,而且只会调用一次 析构函数语法： ~类名()&#123;&#125; 析构函数，没有返回值也不写void 函数名称与类名相同,在名称前加上符号 ~ 析构函数不可以有参数，因此不可以发生重载 程序在对象销毁前会自动调用析构，无须手动调用,而且只会调用一次 1234567891011121314151617181920212223242526272829class Person&#123;public: //构造函数 Person() &#123; cout &lt;&lt; &quot;Person的构造函数调用&quot; &lt;&lt; endl; &#125; //析构函数 ~Person() &#123; cout &lt;&lt; &quot;Person的析构函数调用&quot; &lt;&lt; endl; &#125;&#125;;void test01()&#123; Person p;&#125;int main() &#123; test01(); system(&quot;pause&quot;); return 0;&#125; 4.2.2 构造函数的分类及调用两种分类方式： ​ 按参数分为： 有参构造和无参构造 ​ 按类型分为： 普通构造和拷贝构造 三种调用方式： ​ 括号法 ​ 显示法 ​ 隐式转换法 示例： 12345678910111213141516171819202122232425262728293031323334353637383940414243444546474849505152535455565758596061626364//1、构造函数分类// 按照参数分类分为 有参和无参构造 无参又称为默认构造函数// 按照类型分类分为 普通构造和拷贝构造class Person &#123;public: //无参（默认）构造函数 Person() &#123; cout &lt;&lt; &quot;无参构造函数!&quot; &lt;&lt; endl; &#125; //有参构造函数 Person(int a) &#123; age = a; cout &lt;&lt; &quot;有参构造函数!&quot; &lt;&lt; endl; &#125; //拷贝构造函数 Person(const Person&amp; p) &#123; age = p.age; cout &lt;&lt; &quot;拷贝构造函数!&quot; &lt;&lt; endl; &#125; //析构函数 ~Person() &#123; cout &lt;&lt; &quot;析构函数!&quot; &lt;&lt; endl; &#125;public: int age;&#125;;//2、构造函数的调用//调用无参构造函数void test01() &#123; Person p; //调用无参构造函数&#125;//调用有参的构造函数void test02() &#123; //2.1 括号法，常用 Person p1(10); //注意1：调用无参构造函数不能加括号，如果加了编译器认为这是一个函数声明 //Person p2(); //2.2 显式法 Person p2 = Person(10); Person p3 = Person(p2); //Person(10)单独写就是匿名对象 当前行结束之后，马上析构 //2.3 隐式转换法 Person p4 = 10; // Person p4 = Person(10); Person p5 = p4; // Person p5 = Person(p4); //注意2：不能利用 拷贝构造函数 初始化匿名对象 编译器认为是对象声明 //Person p5(p4);&#125;int main() &#123; test01(); //test02(); system(&quot;pause&quot;); return 0;&#125; 4.2.3 拷贝构造函数调用时机C++中拷贝构造函数调用时机通常有三种情况 使用一个已经创建完毕的对象来初始化一个新对象 值传递的方式给函数参数传值 以值方式返回局部对象 示例： 123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566class Person &#123;public: Person() &#123; cout &lt;&lt; &quot;无参构造函数!&quot; &lt;&lt; endl; mAge = 0; &#125; Person(int age) &#123; cout &lt;&lt; &quot;有参构造函数!&quot; &lt;&lt; endl; mAge = age; &#125; Person(const Person&amp; p) &#123; cout &lt;&lt; &quot;拷贝构造函数!&quot; &lt;&lt; endl; mAge = p.mAge; &#125; //析构函数在释放内存之前调用 ~Person() &#123; cout &lt;&lt; &quot;析构函数!&quot; &lt;&lt; endl; &#125;public: int mAge;&#125;;//1. 使用一个已经创建完毕的对象来初始化一个新对象void test01() &#123; Person man(100); //p对象已经创建完毕 Person newman(man); //调用拷贝构造函数 Person newman2 = man; //拷贝构造 //Person newman3; //newman3 = man; //不是调用拷贝构造函数，赋值操作&#125;//2. 值传递的方式给函数参数传值//相当于Person p1 = p;void doWork(Person p1) &#123;&#125;void test02() &#123; Person p; //无参构造函数 doWork(p);&#125;//3. 以值方式返回局部对象Person doWork2()&#123; Person p1; cout &lt;&lt; (int *)&amp;p1 &lt;&lt; endl; return p1;&#125;void test03()&#123; Person p = doWork2(); cout &lt;&lt; (int *)&amp;p &lt;&lt; endl;&#125;int main() &#123; //test01(); //test02(); test03(); system(&quot;pause&quot;); return 0;&#125; 4.2.4 构造函数调用规则默认情况下，c++编译器至少给一个类添加3个函数 1．默认构造函数(无参，函数体为空) 2．默认析构函数(无参，函数体为空) 3．默认拷贝构造函数，对属性进行值拷贝 构造函数调用规则如下： 如果用户定义有参构造函数，c++不在提供默认无参构造，但是会提供默认拷贝构造 如果用户定义拷贝构造函数，c++不会再提供其他构造函数 示例： 123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354class Person &#123;public: //无参（默认）构造函数 Person() &#123; cout &lt;&lt; &quot;无参构造函数!&quot; &lt;&lt; endl; &#125; //有参构造函数 Person(int a) &#123; age = a; cout &lt;&lt; &quot;有参构造函数!&quot; &lt;&lt; endl; &#125; //拷贝构造函数 Person(const Person&amp; p) &#123; age = p.age; cout &lt;&lt; &quot;拷贝构造函数!&quot; &lt;&lt; endl; &#125; //析构函数 ~Person() &#123; cout &lt;&lt; &quot;析构函数!&quot; &lt;&lt; endl; &#125;public: int age;&#125;;void test01()&#123; Person p1(18); //如果不写拷贝构造，编译器会自动添加拷贝构造，并且做浅拷贝操作 Person p2(p1); cout &lt;&lt; &quot;p2的年龄为： &quot; &lt;&lt; p2.age &lt;&lt; endl;&#125;void test02()&#123; //如果用户提供有参构造，编译器不会提供默认构造，会提供拷贝构造 Person p1; //此时如果用户自己没有提供默认构造，会出错 Person p2(10); //用户提供的有参 Person p3(p2); //此时如果用户没有提供拷贝构造，编译器会提供 //如果用户提供拷贝构造，编译器不会提供其他构造函数 Person p4; //此时如果用户自己没有提供默认构造，会出错 Person p5(10); //此时如果用户自己没有提供有参，会出错 Person p6(p5); //用户自己提供拷贝构造&#125;int main() &#123; test01(); system(&quot;pause&quot;); return 0;&#125; 4.2.5 深拷贝与浅拷贝深浅拷贝是面试经典问题，也是常见的一个坑 浅拷贝：简单的赋值拷贝操作 深拷贝：在堆区重新申请空间，进行拷贝操作 示例： 1234567891011121314151617181920212223242526272829303132333435363738394041424344454647484950515253545556class Person &#123;public: //无参（默认）构造函数 Person() &#123; cout &lt;&lt; &quot;无参构造函数!&quot; &lt;&lt; endl; &#125; //有参构造函数 Person(int age ,int height) &#123; cout &lt;&lt; &quot;有参构造函数!&quot; &lt;&lt; endl; m_age = age; m_height = new int(height); &#125; //拷贝构造函数 Person(const Person&amp; p) &#123; cout &lt;&lt; &quot;拷贝构造函数!&quot; &lt;&lt; endl; //如果不利用深拷贝在堆区创建新内存，会导致浅拷贝带来的重复释放堆区问题 m_age = p.m_age; m_height = new int(*p.m_height); &#125; //析构函数 ~Person() &#123; cout &lt;&lt; &quot;析构函数!&quot; &lt;&lt; endl; if (m_height != NULL) &#123; delete m_height; &#125; &#125;public: int m_age; int* m_height;&#125;;void test01()&#123; Person p1(18, 180); Person p2(p1); cout &lt;&lt; &quot;p1的年龄： &quot; &lt;&lt; p1.m_age &lt;&lt; &quot; 身高： &quot; &lt;&lt; *p1.m_height &lt;&lt; endl; cout &lt;&lt; &quot;p2的年龄： &quot; &lt;&lt; p2.m_age &lt;&lt; &quot; 身高： &quot; &lt;&lt; *p2.m_height &lt;&lt; endl;&#125;int main() &#123; test01(); system(&quot;pause&quot;); return 0;&#125; 总结：如果属性有在堆区开辟的，一定要自己提供拷贝构造函数，防止浅拷贝带来的问题 4.2.6 初始化列表作用： C++提供了初始化列表语法，用来初始化属性 语法：构造函数()：属性1(值1),属性2（值2）... &#123;&#125; 示例： 123456789101112131415161718192021222324252627282930313233class Person &#123;public: ////传统方式初始化 //Person(int a, int b, int c) &#123; // m_A = a; // m_B = b; // m_C = c; //&#125; //初始化列表方式初始化 Person(int a, int b, int c) :m_A(a), m_B(b), m_C(c) &#123;&#125; void PrintPerson() &#123; cout &lt;&lt; &quot;mA:&quot; &lt;&lt; m_A &lt;&lt; endl; cout &lt;&lt; &quot;mB:&quot; &lt;&lt; m_B &lt;&lt; endl; cout &lt;&lt; &quot;mC:&quot; &lt;&lt; m_C &lt;&lt; endl; &#125;private: int m_A; int m_B; int m_C;&#125;;int main() &#123; Person p(1, 2, 3); p.PrintPerson(); system(&quot;pause&quot;); return 0;&#125; 4.2.7 类对象作为类成员C++类中的成员可以是另一个类的对象，我们称该成员为 对象成员 例如： 12345class A &#123;&#125;class B&#123; A a；&#125; B类中有对象A作为成员，A为对象成员 那么当创建B对象时，A与B的构造和析构的顺序是谁先谁后？ 示例： 1234567891011121314151617181920212223242526272829303132333435363738394041424344454647484950515253545556575859606162class Phone&#123;public: Phone(string name) &#123; m_PhoneName = name; cout &lt;&lt; &quot;Phone构造&quot; &lt;&lt; endl; &#125; ~Phone() &#123; cout &lt;&lt; &quot;Phone析构&quot; &lt;&lt; endl; &#125; string m_PhoneName;&#125;;class Person&#123;public: //初始化列表可以告诉编译器调用哪一个构造函数 Person(string name, string pName) :m_Name(name), m_Phone(pName) &#123; cout &lt;&lt; &quot;Person构造&quot; &lt;&lt; endl; &#125; ~Person() &#123; cout &lt;&lt; &quot;Person析构&quot; &lt;&lt; endl; &#125; void playGame() &#123; cout &lt;&lt; m_Name &lt;&lt; &quot; 使用&quot; &lt;&lt; m_Phone.m_PhoneName &lt;&lt; &quot; 牌手机! &quot; &lt;&lt; endl; &#125; string m_Name; Phone m_Phone;&#125;;void test01()&#123; //当类中成员是其他类对象时，我们称该成员为 对象成员 //构造的顺序是 ：先调用对象成员的构造，再调用本类构造 //析构顺序与构造相反 Person p(&quot;张三&quot; , &quot;苹果X&quot;); p.playGame();&#125;int main() &#123; test01(); system(&quot;pause&quot;); return 0;&#125; 4.2.8 静态成员静态成员就是在成员变量和成员函数前加上关键字static，称为静态成员 静态成员分为： 静态成员变量 所有对象共享同一份数据 在编译阶段分配内存 类内声明，类外初始化 静态成员函数 所有对象共享同一个函数 静态成员函数只能访问静态成员变量 示例1 ：静态成员变量 1234567891011121314151617181920212223242526272829303132333435363738394041424344454647class Person&#123; public: static int m_A; //静态成员变量 //静态成员变量特点： //1 在编译阶段分配内存 //2 类内声明，类外初始化 //3 所有对象共享同一份数据private: static int m_B; //静态成员变量也是有访问权限的&#125;;int Person::m_A = 10;int Person::m_B = 10;void test01()&#123; //静态成员变量两种访问方式 //1、通过对象 Person p1; p1.m_A = 100; cout &lt;&lt; &quot;p1.m_A = &quot; &lt;&lt; p1.m_A &lt;&lt; endl; Person p2; p2.m_A = 200; cout &lt;&lt; &quot;p1.m_A = &quot; &lt;&lt; p1.m_A &lt;&lt; endl; //共享同一份数据 cout &lt;&lt; &quot;p2.m_A = &quot; &lt;&lt; p2.m_A &lt;&lt; endl; //2、通过类名 cout &lt;&lt; &quot;m_A = &quot; &lt;&lt; Person::m_A &lt;&lt; endl; //cout &lt;&lt; &quot;m_B = &quot; &lt;&lt; Person::m_B &lt;&lt; endl; //私有权限访问不到&#125;int main() &#123; test01(); system(&quot;pause&quot;); return 0;&#125; 示例2：静态成员函数 12345678910111213141516171819202122232425262728293031323334353637383940414243444546474849505152class Person&#123;public: //静态成员函数特点： //1 程序共享一个函数 //2 静态成员函数只能访问静态成员变量 static void func() &#123; cout &lt;&lt; &quot;func调用&quot; &lt;&lt; endl; m_A = 100; //m_B = 100; //错误，不可以访问非静态成员变量 &#125; static int m_A; //静态成员变量 int m_B; // private: //静态成员函数也是有访问权限的 static void func2() &#123; cout &lt;&lt; &quot;func2调用&quot; &lt;&lt; endl; &#125;&#125;;int Person::m_A = 10;void test01()&#123; //静态成员变量两种访问方式 //1、通过对象 Person p1; p1.func(); //2、通过类名 Person::func(); //Person::func2(); //私有权限访问不到&#125;int main() &#123; test01(); system(&quot;pause&quot;); return 0;&#125; 4.3 C++对象模型和this指针4.3.1 成员变量和成员函数分开存储在C++中，类内的成员变量和成员函数分开存储 只有非静态成员变量才属于类的对象上 1234567891011121314151617181920212223242526class Person &#123;public: Person() &#123; mA = 0; &#125; //非静态成员变量占对象空间 int mA; //静态成员变量不占对象空间 static int mB; //函数也不占对象空间，所有函数共享一个函数实例 void func() &#123; cout &lt;&lt; &quot;mA:&quot; &lt;&lt; this-&gt;mA &lt;&lt; endl; &#125; //静态成员函数也不占对象空间 static void sfunc() &#123; &#125;&#125;;int main() &#123; cout &lt;&lt; sizeof(Person) &lt;&lt; endl; system(&quot;pause&quot;); return 0;&#125; 4.3.2 this指针概念通过4.3.1我们知道在C++中成员变量和成员函数是分开存储的 每一个非静态成员函数只会诞生一份函数实例，也就是说多个同类型的对象会共用一块代码 那么问题是：这一块代码是如何区分那个对象调用自己的呢？ c++通过提供特殊的对象指针，this指针，解决上述问题。this指针指向被调用的成员函数所属的对象 this指针是隐含每一个非静态成员函数内的一种指针 this指针不需要定义，直接使用即可 this指针的用途： 当形参和成员变量同名时，可用this指针来区分 在类的非静态成员函数中返回对象本身，可使用return *this 1234567891011121314151617181920212223242526272829303132333435363738class Person&#123;public: Person(int age) &#123; //1、当形参和成员变量同名时，可用this指针来区分 this-&gt;age = age; &#125; Person&amp; PersonAddPerson(Person p) &#123; this-&gt;age += p.age; //返回对象本身 return *this; &#125; int age;&#125;;void test01()&#123; Person p1(10); cout &lt;&lt; &quot;p1.age = &quot; &lt;&lt; p1.age &lt;&lt; endl; Person p2(10); p2.PersonAddPerson(p1).PersonAddPerson(p1).PersonAddPerson(p1); cout &lt;&lt; &quot;p2.age = &quot; &lt;&lt; p2.age &lt;&lt; endl;&#125;int main() &#123; test01(); system(&quot;pause&quot;); return 0;&#125; 4.3.3 空指针访问成员函数C++中空指针也是可以调用成员函数的，但是也要注意有没有用到this指针 如果用到this指针，需要加以判断保证代码的健壮性 示例： 12345678910111213141516171819202122232425262728293031323334//空指针访问成员函数class Person &#123;public: void ShowClassName() &#123; cout &lt;&lt; &quot;我是Person类!&quot; &lt;&lt; endl; &#125; void ShowPerson() &#123; if (this == NULL) &#123; return; &#125; cout &lt;&lt; mAge &lt;&lt; endl; &#125;public: int mAge;&#125;;void test01()&#123; Person * p = NULL; p-&gt;ShowClassName(); //空指针，可以调用成员函数 p-&gt;ShowPerson(); //但是如果成员函数中用到了this指针，就不可以了&#125;int main() &#123; test01(); system(&quot;pause&quot;); return 0;&#125; 4.3.4 const修饰成员函数常函数： 成员函数后加const后我们称为这个函数为常函数 常函数内不可以修改成员属性 成员属性声明时加关键字mutable后，在常函数中依然可以修改 常对象： 声明对象前加const称该对象为常对象 常对象只能调用常函数 示例： 12345678910111213141516171819202122232425262728293031323334353637383940414243444546474849class Person &#123;public: Person() &#123; m_A = 0; m_B = 0; &#125; //this指针的本质是一个指针常量，指针的指向不可修改 //如果想让指针指向的值也不可以修改，需要声明常函数 void ShowPerson() const &#123; //const Type* const pointer; //this = NULL; //不能修改指针的指向 Person* const this; //this-&gt;mA = 100; //但是this指针指向的对象的数据是可以修改的 //const修饰成员函数，表示指针指向的内存空间的数据不能修改，除了mutable修饰的变量 this-&gt;m_B = 100; &#125; void MyFunc() const &#123; //mA = 10000; &#125;public: int m_A; mutable int m_B; //可修改 可变的&#125;;//const修饰对象 常对象void test01() &#123; const Person person; //常量对象 cout &lt;&lt; person.m_A &lt;&lt; endl; //person.mA = 100; //常对象不能修改成员变量的值,但是可以访问 person.m_B = 100; //但是常对象可以修改mutable修饰成员变量 //常对象访问成员函数 person.MyFunc(); //常对象不能调用const的函数&#125;int main() &#123; test01(); system(&quot;pause&quot;); return 0;&#125; 4.4 友元生活中你的家有客厅(Public)，有你的卧室(Private) 客厅所有来的客人都可以进去，但是你的卧室是私有的，也就是说只有你能进去 但是呢，你也可以允许你的好闺蜜好基友进去。 在程序里，有些私有属性 也想让类外特殊的一些函数或者类进行访问，就需要用到友元的技术 友元的目的就是让一个函数或者类 访问另一个类中私有成员 友元的关键字为 &#x3D;&#x3D;friend&#x3D;&#x3D; 友元的三种实现 全局函数做友元 类做友元 成员函数做友元 4.4.1 全局函数做友元123456789101112131415161718192021222324252627282930313233343536373839404142class Building&#123; //告诉编译器 goodGay全局函数 是 Building类的好朋友，可以访问类中的私有内容 friend void goodGay(Building * building);public: Building() &#123; this-&gt;m_SittingRoom = &quot;客厅&quot;; this-&gt;m_BedRoom = &quot;卧室&quot;; &#125;public: string m_SittingRoom; //客厅private: string m_BedRoom; //卧室&#125;;void goodGay(Building * building)&#123; cout &lt;&lt; &quot;好基友正在访问： &quot; &lt;&lt; building-&gt;m_SittingRoom &lt;&lt; endl; cout &lt;&lt; &quot;好基友正在访问： &quot; &lt;&lt; building-&gt;m_BedRoom &lt;&lt; endl;&#125;void test01()&#123; Building b; goodGay(&amp;b);&#125;int main()&#123; test01(); system(&quot;pause&quot;); return 0;&#125; 4.4.2 类做友元12345678910111213141516171819202122232425262728293031323334353637383940414243444546474849505152535455565758class Building;class goodGay&#123;public: goodGay(); void visit();private: Building *building;&#125;;class Building&#123; //告诉编译器 goodGay类是Building类的好朋友，可以访问到Building类中私有内容 friend class goodGay;public: Building();public: string m_SittingRoom; //客厅private: string m_BedRoom;//卧室&#125;;Building::Building()&#123; this-&gt;m_SittingRoom = &quot;客厅&quot;; this-&gt;m_BedRoom = &quot;卧室&quot;;&#125;goodGay::goodGay()&#123; building = new Building;&#125;void goodGay::visit()&#123; cout &lt;&lt; &quot;好基友正在访问&quot; &lt;&lt; building-&gt;m_SittingRoom &lt;&lt; endl; cout &lt;&lt; &quot;好基友正在访问&quot; &lt;&lt; building-&gt;m_BedRoom &lt;&lt; endl;&#125;void test01()&#123; goodGay gg; gg.visit();&#125;int main()&#123; test01(); system(&quot;pause&quot;); return 0;&#125; 4.4.3 成员函数做友元123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566class Building;class goodGay&#123;public: goodGay(); void visit(); //只让visit函数作为Building的好朋友，可以发访问Building中私有内容 void visit2(); private: Building *building;&#125;;class Building&#123; //告诉编译器 goodGay类中的visit成员函数 是Building好朋友，可以访问私有内容 friend void goodGay::visit();public: Building();public: string m_SittingRoom; //客厅private: string m_BedRoom;//卧室&#125;;Building::Building()&#123; this-&gt;m_SittingRoom = &quot;客厅&quot;; this-&gt;m_BedRoom = &quot;卧室&quot;;&#125;goodGay::goodGay()&#123; building = new Building;&#125;void goodGay::visit()&#123; cout &lt;&lt; &quot;好基友正在访问&quot; &lt;&lt; building-&gt;m_SittingRoom &lt;&lt; endl; cout &lt;&lt; &quot;好基友正在访问&quot; &lt;&lt; building-&gt;m_BedRoom &lt;&lt; endl;&#125;void goodGay::visit2()&#123; cout &lt;&lt; &quot;好基友正在访问&quot; &lt;&lt; building-&gt;m_SittingRoom &lt;&lt; endl; //cout &lt;&lt; &quot;好基友正在访问&quot; &lt;&lt; building-&gt;m_BedRoom &lt;&lt; endl;&#125;void test01()&#123; goodGay gg; gg.visit();&#125;int main()&#123; test01(); system(&quot;pause&quot;); return 0;&#125; 4.5 运算符重载运算符重载概念：对已有的运算符重新进行定义，赋予其另一种功能，以适应不同的数据类型 4.5.1 加号运算符重载作用：实现两个自定义数据类型相加的运算 1234567891011121314151617181920212223242526272829303132333435363738394041424344454647484950515253545556575859606162class Person &#123;public: Person() &#123;&#125;; Person(int a, int b) &#123; this-&gt;m_A = a; this-&gt;m_B = b; &#125; //成员函数实现 + 号运算符重载 Person operator+(const Person&amp; p) &#123; Person temp; temp.m_A = this-&gt;m_A + p.m_A; temp.m_B = this-&gt;m_B + p.m_B; return temp; &#125;public: int m_A; int m_B;&#125;;//全局函数实现 + 号运算符重载//Person operator+(const Person&amp; p1, const Person&amp; p2) &#123;// Person temp(0, 0);// temp.m_A = p1.m_A + p2.m_A;// temp.m_B = p1.m_B + p2.m_B;// return temp;//&#125;//运算符重载 可以发生函数重载 Person operator+(const Person&amp; p2, int val) &#123; Person temp; temp.m_A = p2.m_A + val; temp.m_B = p2.m_B + val; return temp;&#125;void test() &#123; Person p1(10, 10); Person p2(20, 20); //成员函数方式 Person p3 = p2 + p1; //相当于 p2.operaor+(p1) cout &lt;&lt; &quot;mA:&quot; &lt;&lt; p3.m_A &lt;&lt; &quot; mB:&quot; &lt;&lt; p3.m_B &lt;&lt; endl; Person p4 = p3 + 10; //相当于 operator+(p3,10) cout &lt;&lt; &quot;mA:&quot; &lt;&lt; p4.m_A &lt;&lt; &quot; mB:&quot; &lt;&lt; p4.m_B &lt;&lt; endl;&#125;int main() &#123; test(); system(&quot;pause&quot;); return 0;&#125; 总结1：对于内置的数据类型的表达式的的运算符是不可能改变的 总结2：不要滥用运算符重载 4.5.2 左移运算符重载作用：可以输出自定义数据类型 123456789101112131415161718192021222324252627282930313233343536373839404142class Person &#123; friend ostream&amp; operator&lt;&lt;(ostream&amp; out, Person&amp; p);public: Person(int a, int b) &#123; this-&gt;m_A = a; this-&gt;m_B = b; &#125; //成员函数 实现不了 p &lt;&lt; cout 不是我们想要的效果 //void operator&lt;&lt;(Person&amp; p)&#123; //&#125;private: int m_A; int m_B;&#125;;//全局函数实现左移重载//ostream对象只能有一个ostream&amp; operator&lt;&lt;(ostream&amp; out, Person&amp; p) &#123; out &lt;&lt; &quot;a:&quot; &lt;&lt; p.m_A &lt;&lt; &quot; b:&quot; &lt;&lt; p.m_B; return out;&#125;void test() &#123; Person p1(10, 20); cout &lt;&lt; p1 &lt;&lt; &quot;hello world&quot; &lt;&lt; endl; //链式编程&#125;int main() &#123; test(); system(&quot;pause&quot;); return 0;&#125; 总结：重载左移运算符配合友元可以实现输出自定义数据类型 4.5.3 递增运算符重载作用： 通过重载递增运算符，实现自己的整型数据 123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960class MyInteger &#123; friend ostream&amp; operator&lt;&lt;(ostream&amp; out, MyInteger myint);public: MyInteger() &#123; m_Num = 0; &#125; //前置++ MyInteger&amp; operator++() &#123; //先++ m_Num++; //再返回 return *this; &#125; //后置++ MyInteger operator++(int) &#123; //先返回 MyInteger temp = *this; //记录当前本身的值，然后让本身的值加1，但是返回的是以前的值，达到先返回后++； m_Num++; return temp; &#125;private: int m_Num;&#125;;ostream&amp; operator&lt;&lt;(ostream&amp; out, MyInteger myint) &#123; out &lt;&lt; myint.m_Num; return out;&#125;//前置++ 先++ 再返回void test01() &#123; MyInteger myInt; cout &lt;&lt; ++myInt &lt;&lt; endl; cout &lt;&lt; myInt &lt;&lt; endl;&#125;//后置++ 先返回 再++void test02() &#123; MyInteger myInt; cout &lt;&lt; myInt++ &lt;&lt; endl; cout &lt;&lt; myInt &lt;&lt; endl;&#125;int main() &#123; test01(); //test02(); system(&quot;pause&quot;); return 0;&#125; 总结： 前置递增返回引用，后置递增返回值 4.5.4 赋值运算符重载c++编译器至少给一个类添加4个函数 默认构造函数(无参，函数体为空) 默认析构函数(无参，函数体为空) 默认拷贝构造函数，对属性进行值拷贝 赋值运算符 operator&#x3D;, 对属性进行值拷贝 如果类中有属性指向堆区，做赋值操作时也会出现深浅拷贝问题 示例： 123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172737475767778class Person&#123;public: Person(int age) &#123; //将年龄数据开辟到堆区 m_Age = new int(age); &#125; //重载赋值运算符 Person&amp; operator=(Person &amp;p) &#123; if (m_Age != NULL) &#123; delete m_Age; m_Age = NULL; &#125; //编译器提供的代码是浅拷贝 //m_Age = p.m_Age; //提供深拷贝 解决浅拷贝的问题 m_Age = new int(*p.m_Age); //返回自身 return *this; &#125; ~Person() &#123; if (m_Age != NULL) &#123; delete m_Age; m_Age = NULL; &#125; &#125; //年龄的指针 int *m_Age;&#125;;void test01()&#123; Person p1(18); Person p2(20); Person p3(30); p3 = p2 = p1; //赋值操作 cout &lt;&lt; &quot;p1的年龄为：&quot; &lt;&lt; *p1.m_Age &lt;&lt; endl; cout &lt;&lt; &quot;p2的年龄为：&quot; &lt;&lt; *p2.m_Age &lt;&lt; endl; cout &lt;&lt; &quot;p3的年龄为：&quot; &lt;&lt; *p3.m_Age &lt;&lt; endl;&#125;int main() &#123; test01(); //int a = 10; //int b = 20; //int c = 30; //c = b = a; //cout &lt;&lt; &quot;a = &quot; &lt;&lt; a &lt;&lt; endl; //cout &lt;&lt; &quot;b = &quot; &lt;&lt; b &lt;&lt; endl; //cout &lt;&lt; &quot;c = &quot; &lt;&lt; c &lt;&lt; endl; system(&quot;pause&quot;); return 0;&#125; 4.5.5 关系运算符重载作用：重载关系运算符，可以让两个自定义类型对象进行对比操作 示例： 12345678910111213141516171819202122232425262728293031323334353637383940414243444546474849505152535455565758596061626364656667686970717273class Person&#123;public: Person(string name, int age) &#123; this-&gt;m_Name = name; this-&gt;m_Age = age; &#125;; bool operator==(Person &amp; p) &#123; if (this-&gt;m_Name == p.m_Name &amp;&amp; this-&gt;m_Age == p.m_Age) &#123; return true; &#125; else &#123; return false; &#125; &#125; bool operator!=(Person &amp; p) &#123; if (this-&gt;m_Name == p.m_Name &amp;&amp; this-&gt;m_Age == p.m_Age) &#123; return false; &#125; else &#123; return true; &#125; &#125; string m_Name; int m_Age;&#125;;void test01()&#123; //int a = 0; //int b = 0; Person a(&quot;孙悟空&quot;, 18); Person b(&quot;孙悟空&quot;, 18); if (a == b) &#123; cout &lt;&lt; &quot;a和b相等&quot; &lt;&lt; endl; &#125; else &#123; cout &lt;&lt; &quot;a和b不相等&quot; &lt;&lt; endl; &#125; if (a != b) &#123; cout &lt;&lt; &quot;a和b不相等&quot; &lt;&lt; endl; &#125; else &#123; cout &lt;&lt; &quot;a和b相等&quot; &lt;&lt; endl; &#125;&#125;int main() &#123; test01(); system(&quot;pause&quot;); return 0;&#125; 4.5.6 函数调用运算符重载 函数调用运算符 () 也可以重载 由于重载后使用的方式非常像函数的调用，因此称为仿函数 仿函数没有固定写法，非常灵活 示例： 123456789101112131415161718192021222324252627282930313233343536373839404142434445class MyPrint&#123;public: void operator()(string text) &#123; cout &lt;&lt; text &lt;&lt; endl; &#125;&#125;;void test01()&#123; //重载的（）操作符 也称为仿函数 MyPrint myFunc; myFunc(&quot;hello world&quot;);&#125;class MyAdd&#123;public: int operator()(int v1, int v2) &#123; return v1 + v2; &#125;&#125;;void test02()&#123; MyAdd add; int ret = add(10, 10); cout &lt;&lt; &quot;ret = &quot; &lt;&lt; ret &lt;&lt; endl; //匿名对象调用 cout &lt;&lt; &quot;MyAdd()(100,100) = &quot; &lt;&lt; MyAdd()(100, 100) &lt;&lt; endl;&#125;int main() &#123; test01(); test02(); system(&quot;pause&quot;); return 0;&#125; 4.6 继承继承是面向对象三大特性之一 有些类与类之间存在特殊的关系，例如下图中： 我们发现，定义这些类时，下级别的成员除了拥有上一级的共性，还有自己的特性。 这个时候我们就可以考虑利用继承的技术，减少重复代码 4.6.1 继承的基本语法例如我们看到很多网站中，都有公共的头部，公共的底部，甚至公共的左侧列表，只有中心内容不同 接下来我们分别利用普通写法和继承的写法来实现网页中的内容，看一下继承存在的意义以及好处 普通实现： 123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172737475767778798081828384858687888990919293949596979899100101102//Java页面class Java &#123;public: void header() &#123; cout &lt;&lt; &quot;首页、公开课、登录、注册...（公共头部）&quot; &lt;&lt; endl; &#125; void footer() &#123; cout &lt;&lt; &quot;帮助中心、交流合作、站内地图...(公共底部)&quot; &lt;&lt; endl; &#125; void left() &#123; cout &lt;&lt; &quot;Java,Python,C++...(公共分类列表)&quot; &lt;&lt; endl; &#125; void content() &#123; cout &lt;&lt; &quot;JAVA学科视频&quot; &lt;&lt; endl; &#125;&#125;;//Python页面class Python&#123;public: void header() &#123; cout &lt;&lt; &quot;首页、公开课、登录、注册...（公共头部）&quot; &lt;&lt; endl; &#125; void footer() &#123; cout &lt;&lt; &quot;帮助中心、交流合作、站内地图...(公共底部)&quot; &lt;&lt; endl; &#125; void left() &#123; cout &lt;&lt; &quot;Java,Python,C++...(公共分类列表)&quot; &lt;&lt; endl; &#125; void content() &#123; cout &lt;&lt; &quot;Python学科视频&quot; &lt;&lt; endl; &#125;&#125;;//C++页面class CPP &#123;public: void header() &#123; cout &lt;&lt; &quot;首页、公开课、登录、注册...（公共头部）&quot; &lt;&lt; endl; &#125; void footer() &#123; cout &lt;&lt; &quot;帮助中心、交流合作、站内地图...(公共底部)&quot; &lt;&lt; endl; &#125; void left() &#123; cout &lt;&lt; &quot;Java,Python,C++...(公共分类列表)&quot; &lt;&lt; endl; &#125; void content() &#123; cout &lt;&lt; &quot;C++学科视频&quot; &lt;&lt; endl; &#125;&#125;;void test01()&#123; //Java页面 cout &lt;&lt; &quot;Java下载视频页面如下： &quot; &lt;&lt; endl; Java ja; ja.header(); ja.footer(); ja.left(); ja.content(); cout &lt;&lt; &quot;--------------------&quot; &lt;&lt; endl; //Python页面 cout &lt;&lt; &quot;Python下载视频页面如下： &quot; &lt;&lt; endl; Python py; py.header(); py.footer(); py.left(); py.content(); cout &lt;&lt; &quot;--------------------&quot; &lt;&lt; endl; //C++页面 cout &lt;&lt; &quot;C++下载视频页面如下： &quot; &lt;&lt; endl; CPP cp; cp.header(); cp.footer(); cp.left(); cp.content();&#125;int main() &#123; test01(); system(&quot;pause&quot;); return 0;&#125; 继承实现： 123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172737475767778798081828384858687//公共页面class BasePage&#123;public: void header() &#123; cout &lt;&lt; &quot;首页、公开课、登录、注册...（公共头部）&quot; &lt;&lt; endl; &#125; void footer() &#123; cout &lt;&lt; &quot;帮助中心、交流合作、站内地图...(公共底部)&quot; &lt;&lt; endl; &#125; void left() &#123; cout &lt;&lt; &quot;Java,Python,C++...(公共分类列表)&quot; &lt;&lt; endl; &#125;&#125;;//Java页面class Java : public BasePage&#123;public: void content() &#123; cout &lt;&lt; &quot;JAVA学科视频&quot; &lt;&lt; endl; &#125;&#125;;//Python页面class Python : public BasePage&#123;public: void content() &#123; cout &lt;&lt; &quot;Python学科视频&quot; &lt;&lt; endl; &#125;&#125;;//C++页面class CPP : public BasePage&#123;public: void content() &#123; cout &lt;&lt; &quot;C++学科视频&quot; &lt;&lt; endl; &#125;&#125;;void test01()&#123; //Java页面 cout &lt;&lt; &quot;Java下载视频页面如下： &quot; &lt;&lt; endl; Java ja; ja.header(); ja.footer(); ja.left(); ja.content(); cout &lt;&lt; &quot;--------------------&quot; &lt;&lt; endl; //Python页面 cout &lt;&lt; &quot;Python下载视频页面如下： &quot; &lt;&lt; endl; Python py; py.header(); py.footer(); py.left(); py.content(); cout &lt;&lt; &quot;--------------------&quot; &lt;&lt; endl; //C++页面 cout &lt;&lt; &quot;C++下载视频页面如下： &quot; &lt;&lt; endl; CPP cp; cp.header(); cp.footer(); cp.left(); cp.content();&#125;int main() &#123; test01(); system(&quot;pause&quot;); return 0;&#125; 总结： 继承的好处：&#x3D;&#x3D;可以减少重复的代码&#x3D;&#x3D; class A : public B; A 类称为子类 或 派生类 B 类称为父类 或 基类 派生类中的成员，包含两大部分： 一类是从基类继承过来的，一类是自己增加的成员。 从基类继承过过来的表现其共性，而新增的成员体现了其个性。 4.6.2 继承方式继承的语法：class 子类 : 继承方式 父类 继承方式一共有三种： 公共继承 保护继承 私有继承 示例： 12345678910111213141516171819202122232425262728293031323334353637383940414243444546474849505152535455565758596061626364656667686970717273747576777879808182838485class Base1&#123;public: int m_A;protected: int m_B;private: int m_C;&#125;;//公共继承class Son1 :public Base1&#123;public: void func() &#123; m_A; //可访问 public权限 m_B; //可访问 protected权限 //m_C; //不可访问 &#125;&#125;;void myClass()&#123; Son1 s1; s1.m_A; //其他类只能访问到公共权限&#125;//保护继承class Base2&#123;public: int m_A;protected: int m_B;private: int m_C;&#125;;class Son2:protected Base2&#123;public: void func() &#123; m_A; //可访问 protected权限 m_B; //可访问 protected权限 //m_C; //不可访问 &#125;&#125;;void myClass2()&#123; Son2 s; //s.m_A; //不可访问&#125;//私有继承class Base3&#123;public: int m_A;protected: int m_B;private: int m_C;&#125;;class Son3:private Base3&#123;public: void func() &#123; m_A; //可访问 private权限 m_B; //可访问 private权限 //m_C; //不可访问 &#125;&#125;;class GrandSon3 :public Son3&#123;public: void func() &#123; //Son3是私有继承，所以继承Son3的属性在GrandSon3中都无法访问到 //m_A; //m_B; //m_C; &#125;&#125;; 4.6.3 继承中的对象模型问题：从父类继承过来的成员，哪些属于子类对象中？ 示例： 123456789101112131415161718192021222324252627282930class Base&#123;public: int m_A;protected: int m_B;private: int m_C; //私有成员只是被隐藏了，但是还是会继承下去&#125;;//公共继承class Son :public Base&#123;public: int m_D;&#125;;void test01()&#123; cout &lt;&lt; &quot;sizeof Son = &quot; &lt;&lt; sizeof(Son) &lt;&lt; endl;&#125;int main() &#123; test01(); system(&quot;pause&quot;); return 0;&#125; 利用工具查看： 打开工具窗口后，定位到当前CPP文件的盘符 然后输入： cl &#x2F;d1 reportSingleClassLayout查看的类名 所属文件名 效果如下图： 结论： 父类中私有成员也是被子类继承下去了，只是由编译器给隐藏后访问不到 4.6.4 继承中构造和析构顺序子类继承父类后，当创建子类对象，也会调用父类的构造函数 问题：父类和子类的构造和析构顺序是谁先谁后？ 示例： 123456789101112131415161718192021222324252627282930313233343536373839404142class Base &#123;public: Base() &#123; cout &lt;&lt; &quot;Base构造函数!&quot; &lt;&lt; endl; &#125; ~Base() &#123; cout &lt;&lt; &quot;Base析构函数!&quot; &lt;&lt; endl; &#125;&#125;;class Son : public Base&#123;public: Son() &#123; cout &lt;&lt; &quot;Son构造函数!&quot; &lt;&lt; endl; &#125; ~Son() &#123; cout &lt;&lt; &quot;Son析构函数!&quot; &lt;&lt; endl; &#125;&#125;;void test01()&#123; //继承中 先调用父类构造函数，再调用子类构造函数，析构顺序与构造相反 Son s;&#125;int main() &#123; test01(); system(&quot;pause&quot;); return 0;&#125; 总结：继承中 先调用父类构造函数，再调用子类构造函数，析构顺序与构造相反 4.6.5 继承同名成员处理方式问题：当子类与父类出现同名的成员，如何通过子类对象，访问到子类或父类中同名的数据呢？ 访问子类同名成员 直接访问即可 访问父类同名成员 需要加作用域 示例： 12345678910111213141516171819202122232425262728293031323334353637383940414243444546474849505152535455565758class Base &#123;public: Base() &#123; m_A = 100; &#125; void func() &#123; cout &lt;&lt; &quot;Base - func()调用&quot; &lt;&lt; endl; &#125; void func(int a) &#123; cout &lt;&lt; &quot;Base - func(int a)调用&quot; &lt;&lt; endl; &#125;public: int m_A;&#125;;class Son : public Base &#123;public: Son() &#123; m_A = 200; &#125; //当子类与父类拥有同名的成员函数，子类会隐藏父类中所有版本的同名成员函数 //如果想访问父类中被隐藏的同名成员函数，需要加父类的作用域 void func() &#123; cout &lt;&lt; &quot;Son - func()调用&quot; &lt;&lt; endl; &#125;public: int m_A;&#125;;void test01()&#123; Son s; cout &lt;&lt; &quot;Son下的m_A = &quot; &lt;&lt; s.m_A &lt;&lt; endl; cout &lt;&lt; &quot;Base下的m_A = &quot; &lt;&lt; s.Base::m_A &lt;&lt; endl; s.func(); s.Base::func(); s.Base::func(10);&#125;int main() &#123; test01(); system(&quot;pause&quot;); return EXIT_SUCCESS;&#125; 总结： 子类对象可以直接访问到子类中同名成员 子类对象加作用域可以访问到父类同名成员 当子类与父类拥有同名的成员函数，子类会隐藏父类中同名成员函数，加作用域可以访问到父类中同名函数 4.6.6 继承同名静态成员处理方式问题：继承中同名的静态成员在子类对象上如何进行访问？ 静态成员和非静态成员出现同名，处理方式一致 访问子类同名成员 直接访问即可 访问父类同名成员 需要加作用域 示例： 123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566class Base &#123;public: static void func() &#123; cout &lt;&lt; &quot;Base - static void func()&quot; &lt;&lt; endl; &#125; static void func(int a) &#123; cout &lt;&lt; &quot;Base - static void func(int a)&quot; &lt;&lt; endl; &#125; static int m_A;&#125;;int Base::m_A = 100;class Son : public Base &#123;public: static void func() &#123; cout &lt;&lt; &quot;Son - static void func()&quot; &lt;&lt; endl; &#125; static int m_A;&#125;;int Son::m_A = 200;//同名成员属性void test01()&#123; //通过对象访问 cout &lt;&lt; &quot;通过对象访问： &quot; &lt;&lt; endl; Son s; cout &lt;&lt; &quot;Son 下 m_A = &quot; &lt;&lt; s.m_A &lt;&lt; endl; cout &lt;&lt; &quot;Base 下 m_A = &quot; &lt;&lt; s.Base::m_A &lt;&lt; endl; //通过类名访问 cout &lt;&lt; &quot;通过类名访问： &quot; &lt;&lt; endl; cout &lt;&lt; &quot;Son 下 m_A = &quot; &lt;&lt; Son::m_A &lt;&lt; endl; cout &lt;&lt; &quot;Base 下 m_A = &quot; &lt;&lt; Son::Base::m_A &lt;&lt; endl;&#125;//同名成员函数void test02()&#123; //通过对象访问 cout &lt;&lt; &quot;通过对象访问： &quot; &lt;&lt; endl; Son s; s.func(); s.Base::func(); cout &lt;&lt; &quot;通过类名访问： &quot; &lt;&lt; endl; Son::func(); Son::Base::func(); //出现同名，子类会隐藏掉父类中所有同名成员函数，需要加作作用域访问 Son::Base::func(100);&#125;int main() &#123; //test01(); test02(); system(&quot;pause&quot;); return 0;&#125; 总结：同名静态成员处理方式和非静态处理方式一样，只不过有两种访问的方式（通过对象 和 通过类名） 4.6.7 多继承语法C++允许一个类继承多个类 语法： class 子类 ：继承方式 父类1 ， 继承方式 父类2... 多继承可能会引发父类中有同名成员出现，需要加作用域区分 C++实际开发中不建议用多继承 示例： 1234567891011121314151617181920212223242526272829303132333435363738394041424344454647484950515253class Base1 &#123;public: Base1() &#123; m_A = 100; &#125;public: int m_A;&#125;;class Base2 &#123;public: Base2() &#123; m_A = 200; //开始是m_B 不会出问题，但是改为mA就会出现不明确 &#125;public: int m_A;&#125;;//语法：class 子类：继承方式 父类1 ，继承方式 父类2 class Son : public Base2, public Base1 &#123;public: Son() &#123; m_C = 300; m_D = 400; &#125;public: int m_C; int m_D;&#125;;//多继承容易产生成员同名的情况//通过使用类名作用域可以区分调用哪一个基类的成员void test01()&#123; Son s; cout &lt;&lt; &quot;sizeof Son = &quot; &lt;&lt; sizeof(s) &lt;&lt; endl; cout &lt;&lt; s.Base1::m_A &lt;&lt; endl; cout &lt;&lt; s.Base2::m_A &lt;&lt; endl;&#125;int main() &#123; test01(); system(&quot;pause&quot;); return 0;&#125; 总结： 多继承中如果父类中出现了同名情况，子类使用时候要加作用域 4.6.8 菱形继承菱形继承概念： ​ 两个派生类继承同一个基类 ​ 又有某个类同时继承者两个派生类 ​ 这种继承被称为菱形继承，或者钻石继承 典型的菱形继承案例： 菱形继承问题： 羊继承了动物的数据，驼同样继承了动物的数据，当草泥马使用数据时，就会产生二义性。 草泥马继承自动物的数据继承了两份，其实我们应该清楚，这份数据我们只需要一份就可以。 示例： 1234567891011121314151617181920212223242526272829303132class Animal&#123;public: int m_Age;&#125;;//继承前加virtual关键字后，变为虚继承//此时公共的父类Animal称为虚基类class Sheep : virtual public Animal &#123;&#125;;class Tuo : virtual public Animal &#123;&#125;;class SheepTuo : public Sheep, public Tuo &#123;&#125;;void test01()&#123; SheepTuo st; st.Sheep::m_Age = 100; st.Tuo::m_Age = 200; cout &lt;&lt; &quot;st.Sheep::m_Age = &quot; &lt;&lt; st.Sheep::m_Age &lt;&lt; endl; cout &lt;&lt; &quot;st.Tuo::m_Age = &quot; &lt;&lt; st.Tuo::m_Age &lt;&lt; endl; cout &lt;&lt; &quot;st.m_Age = &quot; &lt;&lt; st.m_Age &lt;&lt; endl;&#125;int main() &#123; test01(); system(&quot;pause&quot;); return 0;&#125; 总结： 菱形继承带来的主要问题是子类继承两份相同的数据，导致资源浪费以及毫无意义 利用虚继承可以解决菱形继承问题 4.7 多态4.7.1 多态的基本概念多态是C++面向对象三大特性之一 多态分为两类 静态多态: 函数重载 和 运算符重载属于静态多态，复用函数名 动态多态: 派生类和虚函数实现运行时多态 静态多态和动态多态区别： 静态多态的函数地址早绑定 - 编译阶段确定函数地址 动态多态的函数地址晚绑定 - 运行阶段确定函数地址 下面通过案例进行讲解多态 12345678910111213141516171819202122232425262728293031323334353637383940414243444546474849505152535455565758596061626364class Animal&#123;public: //Speak函数就是虚函数 //函数前面加上virtual关键字，变成虚函数，那么编译器在编译的时候就不能确定函数调用了。 virtual void speak() &#123; cout &lt;&lt; &quot;动物在说话&quot; &lt;&lt; endl; &#125;&#125;;class Cat :public Animal&#123;public: void speak() &#123; cout &lt;&lt; &quot;小猫在说话&quot; &lt;&lt; endl; &#125;&#125;;class Dog :public Animal&#123;public: void speak() &#123; cout &lt;&lt; &quot;小狗在说话&quot; &lt;&lt; endl; &#125;&#125;;//我们希望传入什么对象，那么就调用什么对象的函数//如果函数地址在编译阶段就能确定，那么静态联编//如果函数地址在运行阶段才能确定，就是动态联编void DoSpeak(Animal &amp; animal)&#123; animal.speak();&#125;////多态满足条件： //1、有继承关系//2、子类重写父类中的虚函数//多态使用：//父类指针或引用指向子类对象void test01()&#123; Cat cat; DoSpeak(cat); Dog dog; DoSpeak(dog);&#125;int main() &#123; test01(); system(&quot;pause&quot;); return 0;&#125; 总结： 多态满足条件 有继承关系 子类重写父类中的虚函数 多态使用条件 父类指针或引用指向子类对象 重写：函数返回值类型 函数名 参数列表 完全一致称为重写 4.7.2 多态案例一-计算器类案例描述： 分别利用普通写法和多态技术，设计实现两个操作数进行运算的计算器类 多态的优点： 代码组织结构清晰 可读性强 利于前期和后期的扩展以及维护 示例： 123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172737475767778798081828384858687888990919293949596979899100101102103104105106107108109110111112113114115116117//普通实现class Calculator &#123;public: int getResult(string oper) &#123; if (oper == &quot;+&quot;) &#123; return m_Num1 + m_Num2; &#125; else if (oper == &quot;-&quot;) &#123; return m_Num1 - m_Num2; &#125; else if (oper == &quot;*&quot;) &#123; return m_Num1 * m_Num2; &#125; //如果要提供新的运算，需要修改源码 &#125;public: int m_Num1; int m_Num2;&#125;;void test01()&#123; //普通实现测试 Calculator c; c.m_Num1 = 10; c.m_Num2 = 10; cout &lt;&lt; c.m_Num1 &lt;&lt; &quot; + &quot; &lt;&lt; c.m_Num2 &lt;&lt; &quot; = &quot; &lt;&lt; c.getResult(&quot;+&quot;) &lt;&lt; endl; cout &lt;&lt; c.m_Num1 &lt;&lt; &quot; - &quot; &lt;&lt; c.m_Num2 &lt;&lt; &quot; = &quot; &lt;&lt; c.getResult(&quot;-&quot;) &lt;&lt; endl; cout &lt;&lt; c.m_Num1 &lt;&lt; &quot; * &quot; &lt;&lt; c.m_Num2 &lt;&lt; &quot; = &quot; &lt;&lt; c.getResult(&quot;*&quot;) &lt;&lt; endl;&#125;//多态实现//抽象计算器类//多态优点：代码组织结构清晰，可读性强，利于前期和后期的扩展以及维护class AbstractCalculator&#123;public : virtual int getResult() &#123; return 0; &#125; int m_Num1; int m_Num2;&#125;;//加法计算器class AddCalculator :public AbstractCalculator&#123;public: int getResult() &#123; return m_Num1 + m_Num2; &#125;&#125;;//减法计算器class SubCalculator :public AbstractCalculator&#123;public: int getResult() &#123; return m_Num1 - m_Num2; &#125;&#125;;//乘法计算器class MulCalculator :public AbstractCalculator&#123;public: int getResult() &#123; return m_Num1 * m_Num2; &#125;&#125;;void test02()&#123; //创建加法计算器 AbstractCalculator *abc = new AddCalculator; abc-&gt;m_Num1 = 10; abc-&gt;m_Num2 = 10; cout &lt;&lt; abc-&gt;m_Num1 &lt;&lt; &quot; + &quot; &lt;&lt; abc-&gt;m_Num2 &lt;&lt; &quot; = &quot; &lt;&lt; abc-&gt;getResult() &lt;&lt; endl; delete abc; //用完了记得销毁 //创建减法计算器 abc = new SubCalculator; abc-&gt;m_Num1 = 10; abc-&gt;m_Num2 = 10; cout &lt;&lt; abc-&gt;m_Num1 &lt;&lt; &quot; - &quot; &lt;&lt; abc-&gt;m_Num2 &lt;&lt; &quot; = &quot; &lt;&lt; abc-&gt;getResult() &lt;&lt; endl; delete abc; //创建乘法计算器 abc = new MulCalculator; abc-&gt;m_Num1 = 10; abc-&gt;m_Num2 = 10; cout &lt;&lt; abc-&gt;m_Num1 &lt;&lt; &quot; * &quot; &lt;&lt; abc-&gt;m_Num2 &lt;&lt; &quot; = &quot; &lt;&lt; abc-&gt;getResult() &lt;&lt; endl; delete abc;&#125;int main() &#123; //test01(); test02(); system(&quot;pause&quot;); return 0;&#125; 总结：C++开发提倡利用多态设计程序架构，因为多态优点很多 4.7.3 纯虚函数和抽象类在多态中，通常父类中虚函数的实现是毫无意义的，主要都是调用子类重写的内容 因此可以将虚函数改为纯虚函数 纯虚函数语法：virtual 返回值类型 函数名 （参数列表）= 0 ; 当类中有了纯虚函数，这个类也称为&#x3D;&#x3D;抽象类&#x3D;&#x3D; 抽象类特点： 无法实例化对象 子类必须重写抽象类中的纯虚函数，否则也属于抽象类 示例： 123456789101112131415161718192021222324252627282930313233343536class Base&#123;public: //纯虚函数 //类中只要有一个纯虚函数就称为抽象类 //抽象类无法实例化对象 //子类必须重写父类中的纯虚函数，否则也属于抽象类 virtual void func() = 0;&#125;;class Son :public Base&#123;public: virtual void func() &#123; cout &lt;&lt; &quot;func调用&quot; &lt;&lt; endl; &#125;;&#125;;void test01()&#123; Base * base = NULL; //base = new Base; // 错误，抽象类无法实例化对象 base = new Son; base-&gt;func(); delete base;//记得销毁&#125;int main() &#123; test01(); system(&quot;pause&quot;); return 0;&#125; 4.7.4 多态案例二-制作饮品案例描述： 制作饮品的大致流程为：煮水 - 冲泡 - 倒入杯中 - 加入辅料 利用多态技术实现本案例，提供抽象制作饮品基类，提供子类制作咖啡和茶叶 示例： 1234567891011121314151617181920212223242526272829303132333435363738394041424344454647484950515253545556575859606162636465666768697071727374757677787980818283//抽象制作饮品class AbstractDrinking &#123;public: //烧水 virtual void Boil() = 0; //冲泡 virtual void Brew() = 0; //倒入杯中 virtual void PourInCup() = 0; //加入辅料 virtual void PutSomething() = 0; //规定流程 void MakeDrink() &#123; Boil(); Brew(); PourInCup(); PutSomething(); &#125;&#125;;//制作咖啡class Coffee : public AbstractDrinking &#123;public: //烧水 virtual void Boil() &#123; cout &lt;&lt; &quot;煮农夫山泉!&quot; &lt;&lt; endl; &#125; //冲泡 virtual void Brew() &#123; cout &lt;&lt; &quot;冲泡咖啡!&quot; &lt;&lt; endl; &#125; //倒入杯中 virtual void PourInCup() &#123; cout &lt;&lt; &quot;将咖啡倒入杯中!&quot; &lt;&lt; endl; &#125; //加入辅料 virtual void PutSomething() &#123; cout &lt;&lt; &quot;加入牛奶!&quot; &lt;&lt; endl; &#125;&#125;;//制作茶水class Tea : public AbstractDrinking &#123;public: //烧水 virtual void Boil() &#123; cout &lt;&lt; &quot;煮自来水!&quot; &lt;&lt; endl; &#125; //冲泡 virtual void Brew() &#123; cout &lt;&lt; &quot;冲泡茶叶!&quot; &lt;&lt; endl; &#125; //倒入杯中 virtual void PourInCup() &#123; cout &lt;&lt; &quot;将茶水倒入杯中!&quot; &lt;&lt; endl; &#125; //加入辅料 virtual void PutSomething() &#123; cout &lt;&lt; &quot;加入枸杞!&quot; &lt;&lt; endl; &#125;&#125;;//业务函数void DoWork(AbstractDrinking* drink) &#123; drink-&gt;MakeDrink(); delete drink;&#125;void test01() &#123; DoWork(new Coffee); cout &lt;&lt; &quot;--------------&quot; &lt;&lt; endl; DoWork(new Tea);&#125;int main() &#123; test01(); system(&quot;pause&quot;); return 0;&#125; 4.7.5 虚析构和纯虚析构多态使用时，如果子类中有属性开辟到堆区，那么父类指针在释放时无法调用到子类的析构代码 解决方式：将父类中的析构函数改为虚析构或者纯虚析构 虚析构和纯虚析构共性： 可以解决父类指针释放子类对象 都需要有具体的函数实现 虚析构和纯虚析构区别： 如果是纯虚析构，该类属于抽象类，无法实例化对象 虚析构语法： virtual ~类名()&#123;&#125; 纯虚析构语法： virtual ~类名() = 0; 类名::~类名()&#123;&#125; 示例： 123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869class Animal &#123;public: Animal() &#123; cout &lt;&lt; &quot;Animal 构造函数调用！&quot; &lt;&lt; endl; &#125; virtual void Speak() = 0; //析构函数加上virtual关键字，变成虚析构函数 //virtual ~Animal() //&#123; // cout &lt;&lt; &quot;Animal虚析构函数调用！&quot; &lt;&lt; endl; //&#125; virtual ~Animal() = 0;&#125;;Animal::~Animal()&#123; cout &lt;&lt; &quot;Animal 纯虚析构函数调用！&quot; &lt;&lt; endl;&#125;//和包含普通纯虚函数的类一样，包含了纯虚析构函数的类也是一个抽象类。不能够被实例化。class Cat : public Animal &#123;public: Cat(string name) &#123; cout &lt;&lt; &quot;Cat构造函数调用！&quot; &lt;&lt; endl; m_Name = new string(name); &#125; virtual void Speak() &#123; cout &lt;&lt; *m_Name &lt;&lt; &quot;小猫在说话!&quot; &lt;&lt; endl; &#125; ~Cat() &#123; cout &lt;&lt; &quot;Cat析构函数调用!&quot; &lt;&lt; endl; if (this-&gt;m_Name != NULL) &#123; delete m_Name; m_Name = NULL; &#125; &#125;public: string *m_Name;&#125;;void test01()&#123; Animal *animal = new Cat(&quot;Tom&quot;); animal-&gt;Speak(); //通过父类指针去释放，会导致子类对象可能清理不干净，造成内存泄漏 //怎么解决？给基类增加一个虚析构函数 //虚析构函数就是用来解决通过父类指针释放子类对象 delete animal;&#125;int main() &#123; test01(); system(&quot;pause&quot;); return 0;&#125; 总结： ​ 1. 虚析构或纯虚析构就是用来解决通过父类指针释放子类对象 ​ 2. 如果子类中没有堆区数据，可以不写为虚析构或纯虚析构 ​ 3. 拥有纯虚析构函数的类也属于抽象类 4.7.6 多态案例三-电脑组装案例描述： 电脑主要组成部件为 CPU（用于计算），显卡（用于显示），内存条（用于存储） 将每个零件封装出抽象基类，并且提供不同的厂商生产不同的零件，例如Intel厂商和Lenovo厂商 创建电脑类提供让电脑工作的函数，并且调用每个零件工作的接口 测试时组装三台不同的电脑进行工作 示例： 123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172737475767778798081828384858687888990919293949596979899100101102103104105106107108109110111112113114115116117118119120121122123124125126127128129130131132133134135136137138139140141142143144145146147148149150151152153154155156157158159160161162163164165166167168#include&lt;iostream&gt;using namespace std;//抽象CPU类class CPU&#123;public: //抽象的计算函数 virtual void calculate() = 0;&#125;;//抽象显卡类class VideoCard&#123;public: //抽象的显示函数 virtual void display() = 0;&#125;;//抽象内存条类class Memory&#123;public: //抽象的存储函数 virtual void storage() = 0;&#125;;//电脑类class Computer&#123;public: Computer(CPU * cpu, VideoCard * vc, Memory * mem) &#123; m_cpu = cpu; m_vc = vc; m_mem = mem; &#125; //提供工作的函数 void work() &#123; //让零件工作起来，调用接口 m_cpu-&gt;calculate(); m_vc-&gt;display(); m_mem-&gt;storage(); &#125; //提供析构函数 释放3个电脑零件 ~Computer() &#123; //释放CPU零件 if (m_cpu != NULL) &#123; delete m_cpu; m_cpu = NULL; &#125; //释放显卡零件 if (m_vc != NULL) &#123; delete m_vc; m_vc = NULL; &#125; //释放内存条零件 if (m_mem != NULL) &#123; delete m_mem; m_mem = NULL; &#125; &#125;private: CPU * m_cpu; //CPU的零件指针 VideoCard * m_vc; //显卡零件指针 Memory * m_mem; //内存条零件指针&#125;;//具体厂商//Intel厂商class IntelCPU :public CPU&#123;public: virtual void calculate() &#123; cout &lt;&lt; &quot;Intel的CPU开始计算了！&quot; &lt;&lt; endl; &#125;&#125;;class IntelVideoCard :public VideoCard&#123;public: virtual void display() &#123; cout &lt;&lt; &quot;Intel的显卡开始显示了！&quot; &lt;&lt; endl; &#125;&#125;;class IntelMemory :public Memory&#123;public: virtual void storage() &#123; cout &lt;&lt; &quot;Intel的内存条开始存储了！&quot; &lt;&lt; endl; &#125;&#125;;//Lenovo厂商class LenovoCPU :public CPU&#123;public: virtual void calculate() &#123; cout &lt;&lt; &quot;Lenovo的CPU开始计算了！&quot; &lt;&lt; endl; &#125;&#125;;class LenovoVideoCard :public VideoCard&#123;public: virtual void display() &#123; cout &lt;&lt; &quot;Lenovo的显卡开始显示了！&quot; &lt;&lt; endl; &#125;&#125;;class LenovoMemory :public Memory&#123;public: virtual void storage() &#123; cout &lt;&lt; &quot;Lenovo的内存条开始存储了！&quot; &lt;&lt; endl; &#125;&#125;;void test01()&#123; //第一台电脑零件 CPU * intelCpu = new IntelCPU; VideoCard * intelCard = new IntelVideoCard; Memory * intelMem = new IntelMemory; cout &lt;&lt; &quot;第一台电脑开始工作：&quot; &lt;&lt; endl; //创建第一台电脑 Computer * computer1 = new Computer(intelCpu, intelCard, intelMem); computer1-&gt;work(); delete computer1; cout &lt;&lt; &quot;-----------------------&quot; &lt;&lt; endl; cout &lt;&lt; &quot;第二台电脑开始工作：&quot; &lt;&lt; endl; //第二台电脑组装 Computer * computer2 = new Computer(new LenovoCPU, new LenovoVideoCard, new LenovoMemory);; computer2-&gt;work(); delete computer2; cout &lt;&lt; &quot;-----------------------&quot; &lt;&lt; endl; cout &lt;&lt; &quot;第三台电脑开始工作：&quot; &lt;&lt; endl; //第三台电脑组装 Computer * computer3 = new Computer(new LenovoCPU, new IntelVideoCard, new LenovoMemory);; computer3-&gt;work(); delete computer3;&#125; 5 文件操作程序运行时产生的数据都属于临时数据，程序一旦运行结束都会被释放 通过文件可以将数据持久化 C++中对文件操作需要包含头文件 &#x3D;&#x3D;&lt; fstream &gt;&#x3D;&#x3D; 文件类型分为两种： 文本文件 - 文件以文本的ASCII码形式存储在计算机中 二进制文件 - 文件以文本的二进制形式存储在计算机中，用户一般不能直接读懂它们 操作文件的三大类: ofstream：写操作 ifstream： 读操作 fstream ： 读写操作 5.1文本文件5.1.1写文件 写文件步骤如下： 包含头文件 #include &lt;fstream&gt; 创建流对象 ofstream ofs; 打开文件 ofs.open(“文件路径”,打开方式); 写数据 ofs &lt;&lt; “写入的数据”; 关闭文件 ofs.close(); ​ 文件打开方式： 打开方式 解释 ios::in 为读文件而打开文件 ios::out 为写文件而打开文件 ios::ate 初始位置：文件尾 ios::app 追加方式写文件 ios::trunc 如果文件存在先删除，再创建 ios::binary 二进制方式 注意： 文件打开方式可以配合使用，利用|操作符 例如：用二进制方式写文件 ios::binary | ios:: out 示例： 12345678910111213141516171819202122#include &lt;fstream&gt;void test01()&#123; ofstream ofs; ofs.open(&quot;test.txt&quot;, ios::out); ofs &lt;&lt; &quot;姓名：张三&quot; &lt;&lt; endl; ofs &lt;&lt; &quot;性别：男&quot; &lt;&lt; endl; ofs &lt;&lt; &quot;年龄：18&quot; &lt;&lt; endl; ofs.close();&#125;int main() &#123; test01(); system(&quot;pause&quot;); return 0;&#125; 总结： 文件操作必须包含头文件 fstream 读文件可以利用 ofstream ，或者fstream类 打开文件时候需要指定操作文件的路径，以及打开方式 利用&lt;&lt;可以向文件中写数据 操作完毕，要关闭文件 5.1.2读文件读文件与写文件步骤相似，但是读取方式相对于比较多 读文件步骤如下： 包含头文件 #include &lt;fstream&gt; 创建流对象 ifstream ifs; 打开文件并判断文件是否打开成功 ifs.open(“文件路径”,打开方式); 读数据 四种方式读取 关闭文件 ifs.close(); 示例： 1234567891011121314151617181920212223242526272829303132333435363738394041424344454647484950515253#include &lt;fstream&gt;#include &lt;string&gt;void test01()&#123; ifstream ifs; ifs.open(&quot;test.txt&quot;, ios::in); if (!ifs.is_open()) &#123; cout &lt;&lt; &quot;文件打开失败&quot; &lt;&lt; endl; return; &#125; //第一种方式 //char buf[1024] = &#123; 0 &#125;; //while (ifs &gt;&gt; buf) //&#123; // cout &lt;&lt; buf &lt;&lt; endl; //&#125; //第二种 //char buf[1024] = &#123; 0 &#125;; //while (ifs.getline(buf,sizeof(buf))) //&#123; // cout &lt;&lt; buf &lt;&lt; endl; //&#125; //第三种 //string buf; //while (getline(ifs, buf)) //&#123; // cout &lt;&lt; buf &lt;&lt; endl; //&#125; char c; while ((c = ifs.get()) != EOF) &#123; cout &lt;&lt; c; &#125; ifs.close();&#125;int main() &#123; test01(); system(&quot;pause&quot;); return 0;&#125; 总结： 读文件可以利用 ifstream ，或者fstream类 利用is_open函数可以判断文件是否打开成功 close 关闭文件 5.2 二进制文件以二进制的方式对文件进行读写操作 打开方式要指定为 &#x3D;&#x3D;ios::binary&#x3D;&#x3D; 5.2.1 写文件二进制方式写文件主要利用流对象调用成员函数write 函数原型 ：ostream&amp; write(const char * buffer,int len); 参数解释：字符指针buffer指向内存中一段存储空间。len是读写的字节数 示例： 1234567891011121314151617181920212223242526272829303132333435363738#include &lt;fstream&gt;#include &lt;string&gt;class Person&#123;public: char m_Name[64]; int m_Age;&#125;;//二进制文件 写文件void test01()&#123; //1、包含头文件 //2、创建输出流对象 ofstream ofs(&quot;person.txt&quot;, ios::out | ios::binary); //3、打开文件 //ofs.open(&quot;person.txt&quot;, ios::out | ios::binary); Person p = &#123;&quot;张三&quot; , 18&#125;; //4、写文件 ofs.write((const char *)&amp;p, sizeof(p)); //5、关闭文件 ofs.close();&#125;int main() &#123; test01(); system(&quot;pause&quot;); return 0;&#125; 总结： 文件输出流对象 可以通过write函数，以二进制方式写数据 5.2.2 读文件二进制方式读文件主要利用流对象调用成员函数read 函数原型：istream&amp; read(char *buffer,int len); 参数解释：字符指针buffer指向内存中一段存储空间。len是读写的字节数 示例： 1234567891011121314151617181920212223242526272829303132#include &lt;fstream&gt;#include &lt;string&gt;class Person&#123;public: char m_Name[64]; int m_Age;&#125;;void test01()&#123; ifstream ifs(&quot;person.txt&quot;, ios::in | ios::binary); if (!ifs.is_open()) &#123; cout &lt;&lt; &quot;文件打开失败&quot; &lt;&lt; endl; &#125; Person p; ifs.read((char *)&amp;p, sizeof(p)); cout &lt;&lt; &quot;姓名： &quot; &lt;&lt; p.m_Name &lt;&lt; &quot; 年龄： &quot; &lt;&lt; p.m_Age &lt;&lt; endl;&#125;int main() &#123; test01(); system(&quot;pause&quot;); return 0;&#125; 文件输入流对象 可以通过read函数，以二进制方式读数据","categories":[{"name":"C++","slug":"C","permalink":"https://why-1513.github.io.git/categories/C/"}],"tags":[]},{"title":"C++提高编程","slug":"C++提高编程","date":"2024-04-28T02:07:22.000Z","updated":"2024-04-28T02:15:38.800Z","comments":true,"path":"2024/04/28/C++提高编程/","permalink":"https://why-1513.github.io.git/2024/04/28/C++%E6%8F%90%E9%AB%98%E7%BC%96%E7%A8%8B/","excerpt":"","text":"C++提高编程 本阶段主要针对C++&#x3D;&#x3D;泛型编程&#x3D;&#x3D;和&#x3D;&#x3D;STL&#x3D;&#x3D;技术做详细讲解，探讨C++更深层的使用 1 模板1.1 模板的概念模板就是建立通用的模具，大大提高复用性 模板的特点： 模板不可以直接使用，它只是一个框架 模板的通用并不是万能的 1.2 函数模板 C++另一种编程思想称为 &#x3D;&#x3D;泛型编程&#x3D;&#x3D; ，主要利用的技术就是模板 C++提供两种模板机制:函数模板和类模板 1.2.1 函数模板语法函数模板作用： 建立一个通用函数，其函数返回值类型和形参类型可以不具体制定，用一个虚拟的类型来代表。 语法： 12template&lt;typename T&gt;函数声明或定义 解释： template — 声明创建模板 typename — 表面其后面的符号是一种数据类型，可以用class代替 T — 通用的数据类型，名称可以替换，通常为大写字母 示例： 123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051//交换整型函数void swapInt(int&amp; a, int&amp; b) &#123; int temp = a; a = b; b = temp;&#125;//交换浮点型函数void swapDouble(double&amp; a, double&amp; b) &#123; double temp = a; a = b; b = temp;&#125;//利用模板提供通用的交换函数template&lt;typename T&gt;void mySwap(T&amp; a, T&amp; b)&#123; T temp = a; a = b; b = temp;&#125;void test01()&#123; int a = 10; int b = 20; //swapInt(a, b); //利用模板实现交换 //1、自动类型推导 mySwap(a, b); //2、显示指定类型 mySwap&lt;int&gt;(a, b); cout &lt;&lt; &quot;a = &quot; &lt;&lt; a &lt;&lt; endl; cout &lt;&lt; &quot;b = &quot; &lt;&lt; b &lt;&lt; endl;&#125;int main() &#123; test01(); system(&quot;pause&quot;); return 0;&#125; 总结： 函数模板利用关键字 template 使用函数模板有两种方式：自动类型推导、显示指定类型 模板的目的是为了提高复用性，将类型参数化 1.2.2 函数模板注意事项注意事项： 自动类型推导，必须推导出一致的数据类型T,才可以使用 模板必须要确定出T的数据类型，才可以使用 示例： 1234567891011121314151617181920212223242526272829303132333435363738394041424344//利用模板提供通用的交换函数template&lt;class T&gt;void mySwap(T&amp; a, T&amp; b)&#123; T temp = a; a = b; b = temp;&#125;// 1、自动类型推导，必须推导出一致的数据类型T,才可以使用void test01()&#123; int a = 10; int b = 20; char c = &#x27;c&#x27;; mySwap(a, b); // 正确，可以推导出一致的T //mySwap(a, c); // 错误，推导不出一致的T类型&#125;// 2、模板必须要确定出T的数据类型，才可以使用template&lt;class T&gt;void func()&#123; cout &lt;&lt; &quot;func 调用&quot; &lt;&lt; endl;&#125;void test02()&#123; //func(); //错误，模板不能独立使用，必须确定出T的类型 func&lt;int&gt;(); //利用显示指定类型的方式，给T一个类型，才可以使用该模板&#125;int main() &#123; test01(); test02(); system(&quot;pause&quot;); return 0;&#125; 总结： 使用模板时必须确定出通用数据类型T，并且能够推导出一致的类型 1.2.3 函数模板案例案例描述： 利用函数模板封装一个排序的函数，可以对不同数据类型数组进行排序 排序规则从大到小，排序算法为选择排序 分别利用char数组和int数组进行测试 示例： 1234567891011121314151617181920212223242526272829303132333435363738394041424344454647484950515253545556575859606162636465//交换的函数模板template&lt;typename T&gt;void mySwap(T &amp;a, T&amp;b)&#123; T temp = a; a = b; b = temp;&#125;template&lt;class T&gt; // 也可以替换成typename//利用选择排序，进行对数组从大到小的排序void mySort(T arr[], int len)&#123; for (int i = 0; i &lt; len; i++) &#123; int max = i; //最大数的下标 for (int j = i + 1; j &lt; len; j++) &#123; if (arr[max] &lt; arr[j]) &#123; max = j; &#125; &#125; if (max != i) //如果最大数的下标不是i，交换两者 &#123; mySwap(arr[max], arr[i]); &#125; &#125;&#125;template&lt;typename T&gt;void printArray(T arr[], int len) &#123; for (int i = 0; i &lt; len; i++) &#123; cout &lt;&lt; arr[i] &lt;&lt; &quot; &quot;; &#125; cout &lt;&lt; endl;&#125;void test01()&#123; //测试char数组 char charArr[] = &quot;bdcfeagh&quot;; int num = sizeof(charArr) / sizeof(char); mySort(charArr, num); printArray(charArr, num);&#125;void test02()&#123; //测试int数组 int intArr[] = &#123; 7, 5, 8, 1, 3, 9, 2, 4, 6 &#125;; int num = sizeof(intArr) / sizeof(int); mySort(intArr, num); printArray(intArr, num);&#125;int main() &#123; test01(); test02(); system(&quot;pause&quot;); return 0;&#125; 总结：模板可以提高代码复用，需要熟练掌握 1.2.4 普通函数与函数模板的区别普通函数与函数模板区别： 普通函数调用时可以发生自动类型转换（隐式类型转换） 函数模板调用时，如果利用自动类型推导，不会发生隐式类型转换 如果利用显示指定类型的方式，可以发生隐式类型转换 示例： 1234567891011121314151617181920212223242526272829303132333435//普通函数int myAdd01(int a, int b)&#123; return a + b;&#125;//函数模板template&lt;class T&gt;T myAdd02(T a, T b) &#123; return a + b;&#125;//使用函数模板时，如果用自动类型推导，不会发生自动类型转换,即隐式类型转换void test01()&#123; int a = 10; int b = 20; char c = &#x27;c&#x27;; cout &lt;&lt; myAdd01(a, c) &lt;&lt; endl; //正确，将char类型的&#x27;c&#x27;隐式转换为int类型 &#x27;c&#x27; 对应 ASCII码 99 //myAdd02(a, c); // 报错，使用自动类型推导时，不会发生隐式类型转换 myAdd02&lt;int&gt;(a, c); //正确，如果用显示指定类型，可以发生隐式类型转换&#125;int main() &#123; test01(); system(&quot;pause&quot;); return 0;&#125; 总结：建议使用显示指定类型的方式，调用函数模板，因为可以自己确定通用类型T 1.2.5 普通函数与函数模板的调用规则调用规则如下： 如果函数模板和普通函数都可以实现，优先调用普通函数 可以通过空模板参数列表来强制调用函数模板 函数模板也可以发生重载 如果函数模板可以产生更好的匹配,优先调用函数模板 示例： 1234567891011121314151617181920212223242526272829303132333435363738394041424344454647//普通函数与函数模板调用规则void myPrint(int a, int b)&#123; cout &lt;&lt; &quot;调用的普通函数&quot; &lt;&lt; endl;&#125;template&lt;typename T&gt;void myPrint(T a, T b) &#123; cout &lt;&lt; &quot;调用的模板&quot; &lt;&lt; endl;&#125;template&lt;typename T&gt;void myPrint(T a, T b, T c) &#123; cout &lt;&lt; &quot;调用重载的模板&quot; &lt;&lt; endl; &#125;void test01()&#123; //1、如果函数模板和普通函数都可以实现，优先调用普通函数 // 注意 如果告诉编译器 普通函数是有的，但只是声明没有实现，或者不在当前文件内实现，就会报错找不到 int a = 10; int b = 20; myPrint(a, b); //调用普通函数 //2、可以通过空模板参数列表来强制调用函数模板 myPrint&lt;&gt;(a, b); //调用函数模板 //3、函数模板也可以发生重载 int c = 30; myPrint(a, b, c); //调用重载的函数模板 //4、 如果函数模板可以产生更好的匹配,优先调用函数模板 char c1 = &#x27;a&#x27;; char c2 = &#x27;b&#x27;; myPrint(c1, c2); //调用函数模板&#125;int main() &#123; test01(); system(&quot;pause&quot;); return 0;&#125; 总结：既然提供了函数模板，最好就不要提供普通函数，否则容易出现二义性 1.2.6 模板的局限性局限性： 模板的通用性并不是万能的 例如： 12345template&lt;class T&gt;void f(T a, T b)&#123; a = b; &#125; 在上述代码中提供的赋值操作，如果传入的a和b是一个数组，就无法实现了 再例如： 12345template&lt;class T&gt;void f(T a, T b)&#123; if(a &gt; b) &#123; ... &#125; &#125; 在上述代码中，如果T的数据类型传入的是像Person这样的自定义数据类型，也无法正常运行 因此C++为了解决这种问题，提供模板的重载，可以为这些特定的类型提供具体化的模板 示例： 1234567891011121314151617181920212223242526272829303132333435363738394041424344454647484950515253545556575859606162636465666768697071727374757677787980818283848586878889#include&lt;iostream&gt;using namespace std;#include &lt;string&gt;class Person&#123;public: Person(string name, int age) &#123; this-&gt;m_Name = name; this-&gt;m_Age = age; &#125; string m_Name; int m_Age;&#125;;//普通函数模板template&lt;class T&gt;bool myCompare(T&amp; a, T&amp; b)&#123; if (a == b) &#123; return true; &#125; else &#123; return false; &#125;&#125;//具体化，显示具体化的原型和定意思以template&lt;&gt;开头，并通过名称来指出类型//具体化优先于常规模板template&lt;&gt; bool myCompare(Person &amp;p1, Person &amp;p2)&#123; if ( p1.m_Name == p2.m_Name &amp;&amp; p1.m_Age == p2.m_Age) &#123; return true; &#125; else &#123; return false; &#125;&#125;void test01()&#123; int a = 10; int b = 20; //内置数据类型可以直接使用通用的函数模板 bool ret = myCompare(a, b); if (ret) &#123; cout &lt;&lt; &quot;a == b &quot; &lt;&lt; endl; &#125; else &#123; cout &lt;&lt; &quot;a != b &quot; &lt;&lt; endl; &#125;&#125;void test02()&#123; Person p1(&quot;Tom&quot;, 10); Person p2(&quot;Tom&quot;, 10); //自定义数据类型，不会调用普通的函数模板 //可以创建具体化的Person数据类型的模板，用于特殊处理这个类型 bool ret = myCompare(p1, p2); if (ret) &#123; cout &lt;&lt; &quot;p1 == p2 &quot; &lt;&lt; endl; &#125; else &#123; cout &lt;&lt; &quot;p1 != p2 &quot; &lt;&lt; endl; &#125;&#125;int main() &#123; test01(); test02(); system(&quot;pause&quot;); return 0;&#125; 总结： 利用具体化的模板，可以解决自定义类型的通用化 学习模板并不是为了写模板，而是在STL能够运用系统提供的模板 1.3 类模板1.3.1 类模板语法类模板作用： 建立一个通用类，类中的成员 数据类型可以不具体制定，用一个虚拟的类型来代表。 语法： 12template&lt;typename T&gt;类 解释： template — 声明创建模板 typename — 表面其后面的符号是一种数据类型，可以用class代替 T — 通用的数据类型，名称可以替换，通常为大写字母 示例： 1234567891011121314151617181920212223242526272829303132333435#include &lt;string&gt;//类模板template&lt;class NameType, class AgeType&gt; class Person&#123;public: Person(NameType name, AgeType age) &#123; this-&gt;mName = name; this-&gt;mAge = age; &#125; void showPerson() &#123; cout &lt;&lt; &quot;name: &quot; &lt;&lt; this-&gt;mName &lt;&lt; &quot; age: &quot; &lt;&lt; this-&gt;mAge &lt;&lt; endl; &#125;public: NameType mName; AgeType mAge;&#125;;void test01()&#123; // 指定NameType 为string类型，AgeType 为 int类型 Person&lt;string, int&gt;P1(&quot;孙悟空&quot;, 999); P1.showPerson();&#125;int main() &#123; test01(); system(&quot;pause&quot;); return 0;&#125; 总结：类模板和函数模板语法相似，在声明模板template后面加类，此类称为类模板 1.3.2 类模板与函数模板区别类模板与函数模板区别主要有两点： 类模板没有自动类型推导的使用方式 类模板在模板参数列表中可以有默认参数 示例： 123456789101112131415161718192021222324252627282930313233343536373839404142434445#include &lt;string&gt;//类模板template&lt;class NameType, class AgeType = int&gt; class Person&#123;public: Person(NameType name, AgeType age) &#123; this-&gt;mName = name; this-&gt;mAge = age; &#125; void showPerson() &#123; cout &lt;&lt; &quot;name: &quot; &lt;&lt; this-&gt;mName &lt;&lt; &quot; age: &quot; &lt;&lt; this-&gt;mAge &lt;&lt; endl; &#125;public: NameType mName; AgeType mAge;&#125;;//1、类模板没有自动类型推导的使用方式void test01()&#123; // Person p(&quot;孙悟空&quot;, 1000); // 错误 类模板使用时候，不可以用自动类型推导 Person &lt;string ,int&gt;p(&quot;孙悟空&quot;, 1000); //必须使用显示指定类型的方式，使用类模板 p.showPerson();&#125;//2、类模板在模板参数列表中可以有默认参数void test02()&#123; Person &lt;string&gt; p(&quot;猪八戒&quot;, 999); //类模板中的模板参数列表 可以指定默认参数 p.showPerson();&#125;int main() &#123; test01(); test02(); system(&quot;pause&quot;); return 0;&#125; 总结： 类模板使用只能用显示指定类型方式 类模板中的模板参数列表可以有默认参数 1.3.3 类模板中成员函数创建时机类模板中成员函数和普通类中成员函数创建时机是有区别的： 普通类中的成员函数一开始就可以创建 类模板中的成员函数在调用时才创建 示例： 123456789101112131415161718192021222324252627282930313233343536373839404142434445464748class Person1&#123;public: void showPerson1() &#123; cout &lt;&lt; &quot;Person1 show&quot; &lt;&lt; endl; &#125;&#125;;class Person2&#123;public: void showPerson2() &#123; cout &lt;&lt; &quot;Person2 show&quot; &lt;&lt; endl; &#125;&#125;;template&lt;class T&gt;class MyClass&#123;public: T obj; //类模板中的成员函数，并不是一开始就创建的，而是在模板调用时再生成 void fun1() &#123; obj.showPerson1(); &#125; void fun2() &#123; obj.showPerson2(); &#125;&#125;;void test01()&#123; MyClass&lt;Person1&gt; m; m.fun1(); //m.fun2();//编译会出错，说明函数调用才会去创建成员函数&#125;int main() &#123; test01(); system(&quot;pause&quot;); return 0;&#125; 总结：类模板中的成员函数并不是一开始就创建的，在调用时才去创建 1.3.4 类模板对象做函数参数学习目标： 类模板实例化出的对象，向函数传参的方式 一共有三种传入方式： 指定传入的类型 — 直接显示对象的数据类型 参数模板化 — 将对象中的参数变为模板进行传递 整个类模板化 — 将这个对象类型 模板化进行传递 示例： 123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869#include &lt;string&gt;//类模板template&lt;class NameType, class AgeType = int&gt; class Person&#123;public: Person(NameType name, AgeType age) &#123; this-&gt;mName = name; this-&gt;mAge = age; &#125; void showPerson() &#123; cout &lt;&lt; &quot;name: &quot; &lt;&lt; this-&gt;mName &lt;&lt; &quot; age: &quot; &lt;&lt; this-&gt;mAge &lt;&lt; endl; &#125;public: NameType mName; AgeType mAge;&#125;;//1、指定传入的类型void printPerson1(Person&lt;string, int&gt; &amp;p) &#123; p.showPerson();&#125;void test01()&#123; Person &lt;string, int &gt;p(&quot;孙悟空&quot;, 100); printPerson1(p);&#125;//2、参数模板化template &lt;class T1, class T2&gt;void printPerson2(Person&lt;T1, T2&gt;&amp;p)&#123; p.showPerson(); cout &lt;&lt; &quot;T1的类型为： &quot; &lt;&lt; typeid(T1).name() &lt;&lt; endl; cout &lt;&lt; &quot;T2的类型为： &quot; &lt;&lt; typeid(T2).name() &lt;&lt; endl;&#125;void test02()&#123; Person &lt;string, int &gt;p(&quot;猪八戒&quot;, 90); printPerson2(p);&#125;//3、整个类模板化template&lt;class T&gt;void printPerson3(T &amp; p)&#123; cout &lt;&lt; &quot;T的类型为： &quot; &lt;&lt; typeid(T).name() &lt;&lt; endl; p.showPerson();&#125;void test03()&#123; Person &lt;string, int &gt;p(&quot;唐僧&quot;, 30); printPerson3(p);&#125;int main() &#123; test01(); test02(); test03(); system(&quot;pause&quot;); return 0;&#125; 总结： 通过类模板创建的对象，可以有三种方式向函数中进行传参 使用比较广泛是第一种：指定传入的类型 1.3.5 类模板与继承当类模板碰到继承时，需要注意一下几点： 当子类继承的父类是一个类模板时，子类在声明的时候，要指定出父类中T的类型 如果不指定，编译器无法给子类分配内存 如果想灵活指定出父类中T的类型，子类也需变为类模板 示例： 12345678910111213141516171819202122232425262728293031323334353637383940414243template&lt;class T&gt;class Base&#123; T m;&#125;;//class Son:public Base //错误，c++编译需要给子类分配内存，必须知道父类中T的类型才可以向下继承class Son :public Base&lt;int&gt; //必须指定一个类型&#123;&#125;;void test01()&#123; Son c;&#125;//类模板继承类模板 ,可以用T2指定父类中的T类型template&lt;class T1, class T2&gt;class Son2 :public Base&lt;T2&gt;&#123;public: Son2() &#123; cout &lt;&lt; typeid(T1).name() &lt;&lt; endl; cout &lt;&lt; typeid(T2).name() &lt;&lt; endl; &#125;&#125;;void test02()&#123; Son2&lt;int, char&gt; child1;&#125;int main() &#123; test01(); test02(); system(&quot;pause&quot;); return 0;&#125; 总结：如果父类是类模板，子类需要指定出父类中T的数据类型 1.3.6 类模板成员函数类外实现学习目标：能够掌握类模板中的成员函数类外实现 示例： 123456789101112131415161718192021222324252627282930313233343536373839404142#include &lt;string&gt;//类模板中成员函数类外实现template&lt;class T1, class T2&gt;class Person &#123;public: //成员函数类内声明 Person(T1 name, T2 age); void showPerson();public: T1 m_Name; T2 m_Age;&#125;;//构造函数 类外实现template&lt;class T1, class T2&gt;Person&lt;T1, T2&gt;::Person(T1 name, T2 age) &#123; this-&gt;m_Name = name; this-&gt;m_Age = age;&#125;//成员函数 类外实现template&lt;class T1, class T2&gt;void Person&lt;T1, T2&gt;::showPerson() &#123; cout &lt;&lt; &quot;姓名: &quot; &lt;&lt; this-&gt;m_Name &lt;&lt; &quot; 年龄:&quot; &lt;&lt; this-&gt;m_Age &lt;&lt; endl;&#125;void test01()&#123; Person&lt;string, int&gt; p(&quot;Tom&quot;, 20); p.showPerson();&#125;int main() &#123; test01(); system(&quot;pause&quot;); return 0;&#125; 总结：类模板中成员函数类外实现时，需要加上模板参数列表 1.3.7 类模板分文件编写学习目标： 掌握类模板成员函数分文件编写产生的问题以及解决方式 问题： 类模板中成员函数创建时机是在调用阶段，导致分文件编写时链接不到 解决： 解决方式1：直接包含.cpp源文件 解决方式2：将声明和实现写到同一个文件中，并更改后缀名为.hpp，hpp是约定的名称，并不是强制 示例： person.hpp中代码： 123456789101112131415161718192021222324252627#pragma once#include &lt;iostream&gt;using namespace std;#include &lt;string&gt;template&lt;class T1, class T2&gt;class Person &#123;public: Person(T1 name, T2 age); void showPerson();public: T1 m_Name; T2 m_Age;&#125;;//构造函数 类外实现template&lt;class T1, class T2&gt;Person&lt;T1, T2&gt;::Person(T1 name, T2 age) &#123; this-&gt;m_Name = name; this-&gt;m_Age = age;&#125;//成员函数 类外实现template&lt;class T1, class T2&gt;void Person&lt;T1, T2&gt;::showPerson() &#123; cout &lt;&lt; &quot;姓名: &quot; &lt;&lt; this-&gt;m_Name &lt;&lt; &quot; 年龄:&quot; &lt;&lt; this-&gt;m_Age &lt;&lt; endl;&#125; 类模板分文件编写.cpp中代码 12345678910111213141516171819202122#include&lt;iostream&gt;using namespace std;//#include &quot;person.h&quot;#include &quot;person.cpp&quot; //解决方式1，包含cpp源文件//解决方式2，将声明和实现写到一起，文件后缀名改为.hpp#include &quot;person.hpp&quot;void test01()&#123; Person&lt;string, int&gt; p(&quot;Tom&quot;, 10); p.showPerson();&#125;int main() &#123; test01(); system(&quot;pause&quot;); return 0;&#125; 总结：主流的解决方式是第二种，将类模板成员函数写到一起，并将后缀名改为.hpp 1.3.8 类模板与友元学习目标： 掌握类模板配合友元函数的类内和类外实现 全局函数类内实现 - 直接在类内声明友元即可 全局函数类外实现 - 需要提前让编译器知道全局函数的存在 示例： 12345678910111213141516171819202122232425262728293031323334353637383940414243444546474849505152535455565758596061626364656667#include &lt;string&gt;//2、全局函数配合友元 类外实现 - 先做函数模板声明，下方在做函数模板定义，在做友元template&lt;class T1, class T2&gt; class Person;//如果声明了函数模板，可以将实现写到后面，否则需要将实现体写到类的前面让编译器提前看到//template&lt;class T1, class T2&gt; void printPerson2(Person&lt;T1, T2&gt; &amp; p); template&lt;class T1, class T2&gt;void printPerson2(Person&lt;T1, T2&gt; &amp; p)&#123; cout &lt;&lt; &quot;类外实现 ---- 姓名： &quot; &lt;&lt; p.m_Name &lt;&lt; &quot; 年龄：&quot; &lt;&lt; p.m_Age &lt;&lt; endl;&#125;template&lt;class T1, class T2&gt;class Person&#123; //1、全局函数配合友元 类内实现 friend void printPerson(Person&lt;T1, T2&gt; &amp; p) &#123; cout &lt;&lt; &quot;姓名： &quot; &lt;&lt; p.m_Name &lt;&lt; &quot; 年龄：&quot; &lt;&lt; p.m_Age &lt;&lt; endl; &#125; //全局函数配合友元 类外实现 friend void printPerson2&lt;&gt;(Person&lt;T1, T2&gt; &amp; p);public: Person(T1 name, T2 age) &#123; this-&gt;m_Name = name; this-&gt;m_Age = age; &#125;private: T1 m_Name; T2 m_Age;&#125;;//1、全局函数在类内实现void test01()&#123; Person &lt;string, int &gt;p(&quot;Tom&quot;, 20); printPerson(p);&#125;//2、全局函数在类外实现void test02()&#123; Person &lt;string, int &gt;p(&quot;Jerry&quot;, 30); printPerson2(p);&#125;int main() &#123; //test01(); test02(); system(&quot;pause&quot;); return 0;&#125; 总结：建议全局函数做类内实现，用法简单，而且编译器可以直接识别 1.3.9 类模板案例案例描述: 实现一个通用的数组类，要求如下： 可以对内置数据类型以及自定义数据类型的数据进行存储 将数组中的数据存储到堆区 构造函数中可以传入数组的容量 提供对应的拷贝构造函数以及operator&#x3D;防止浅拷贝问题 提供尾插法和尾删法对数组中的数据进行增加和删除 可以通过下标的方式访问数组中的元素 可以获取数组中当前元素个数和数组的容量 示例： myArray.hpp中代码 123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172737475767778798081828384858687888990919293949596979899100101102103104105106#pragma once#include &lt;iostream&gt;using namespace std;template&lt;class T&gt;class MyArray&#123;public: //构造函数 MyArray(int capacity) &#123; this-&gt;m_Capacity = capacity; this-&gt;m_Size = 0; pAddress = new T[this-&gt;m_Capacity]; &#125; //拷贝构造 MyArray(const MyArray &amp; arr) &#123; this-&gt;m_Capacity = arr.m_Capacity; this-&gt;m_Size = arr.m_Size; this-&gt;pAddress = new T[this-&gt;m_Capacity]; for (int i = 0; i &lt; this-&gt;m_Size; i++) &#123; //如果T为对象，而且还包含指针，必须需要重载 = 操作符，因为这个等号不是 构造 而是赋值， // 普通类型可以直接= 但是指针类型需要深拷贝 this-&gt;pAddress[i] = arr.pAddress[i]; &#125; &#125; //重载= 操作符 防止浅拷贝问题 MyArray&amp; operator=(const MyArray&amp; myarray) &#123; if (this-&gt;pAddress != NULL) &#123; delete[] this-&gt;pAddress; this-&gt;m_Capacity = 0; this-&gt;m_Size = 0; &#125; this-&gt;m_Capacity = myarray.m_Capacity; this-&gt;m_Size = myarray.m_Size; this-&gt;pAddress = new T[this-&gt;m_Capacity]; for (int i = 0; i &lt; this-&gt;m_Size; i++) &#123; this-&gt;pAddress[i] = myarray[i]; &#125; return *this; &#125; //重载[] 操作符 arr[0] T&amp; operator [](int index) &#123; return this-&gt;pAddress[index]; //不考虑越界，用户自己去处理 &#125; //尾插法 void Push_back(const T &amp; val) &#123; if (this-&gt;m_Capacity == this-&gt;m_Size) &#123; return; &#125; this-&gt;pAddress[this-&gt;m_Size] = val; this-&gt;m_Size++; &#125; //尾删法 void Pop_back() &#123; if (this-&gt;m_Size == 0) &#123; return; &#125; this-&gt;m_Size--; &#125; //获取数组容量 int getCapacity() &#123; return this-&gt;m_Capacity; &#125; //获取数组大小 int getSize() &#123; return this-&gt;m_Size; &#125; //析构 ~MyArray() &#123; if (this-&gt;pAddress != NULL) &#123; delete[] this-&gt;pAddress; this-&gt;pAddress = NULL; this-&gt;m_Capacity = 0; this-&gt;m_Size = 0; &#125; &#125;private: T * pAddress; //指向一个堆空间，这个空间存储真正的数据 int m_Capacity; //容量 int m_Size; // 大小&#125;; 类模板案例—数组类封装.cpp中 12345678910111213141516171819202122232425262728293031323334353637383940414243444546474849505152535455565758596061626364656667686970717273747576777879808182838485868788#include &quot;myArray.hpp&quot;#include &lt;string&gt;void printIntArray(MyArray&lt;int&gt;&amp; arr) &#123; for (int i = 0; i &lt; arr.getSize(); i++) &#123; cout &lt;&lt; arr[i] &lt;&lt; &quot; &quot;; &#125; cout &lt;&lt; endl;&#125;//测试内置数据类型void test01()&#123; MyArray&lt;int&gt; array1(10); for (int i = 0; i &lt; 10; i++) &#123; array1.Push_back(i); &#125; cout &lt;&lt; &quot;array1打印输出：&quot; &lt;&lt; endl; printIntArray(array1); cout &lt;&lt; &quot;array1的大小：&quot; &lt;&lt; array1.getSize() &lt;&lt; endl; cout &lt;&lt; &quot;array1的容量：&quot; &lt;&lt; array1.getCapacity() &lt;&lt; endl; cout &lt;&lt; &quot;--------------------------&quot; &lt;&lt; endl; MyArray&lt;int&gt; array2(array1); array2.Pop_back(); cout &lt;&lt; &quot;array2打印输出：&quot; &lt;&lt; endl; printIntArray(array2); cout &lt;&lt; &quot;array2的大小：&quot; &lt;&lt; array2.getSize() &lt;&lt; endl; cout &lt;&lt; &quot;array2的容量：&quot; &lt;&lt; array2.getCapacity() &lt;&lt; endl;&#125;//测试自定义数据类型class Person &#123;public: Person() &#123;&#125; Person(string name, int age) &#123; this-&gt;m_Name = name; this-&gt;m_Age = age; &#125;public: string m_Name; int m_Age;&#125;;void printPersonArray(MyArray&lt;Person&gt;&amp; personArr)&#123; for (int i = 0; i &lt; personArr.getSize(); i++) &#123; cout &lt;&lt; &quot;姓名：&quot; &lt;&lt; personArr[i].m_Name &lt;&lt; &quot; 年龄： &quot; &lt;&lt; personArr[i].m_Age &lt;&lt; endl; &#125;&#125;void test02()&#123; //创建数组 MyArray&lt;Person&gt; pArray(10); Person p1(&quot;孙悟空&quot;, 30); Person p2(&quot;韩信&quot;, 20); Person p3(&quot;妲己&quot;, 18); Person p4(&quot;王昭君&quot;, 15); Person p5(&quot;赵云&quot;, 24); //插入数据 pArray.Push_back(p1); pArray.Push_back(p2); pArray.Push_back(p3); pArray.Push_back(p4); pArray.Push_back(p5); printPersonArray(pArray); cout &lt;&lt; &quot;pArray的大小：&quot; &lt;&lt; pArray.getSize() &lt;&lt; endl; cout &lt;&lt; &quot;pArray的容量：&quot; &lt;&lt; pArray.getCapacity() &lt;&lt; endl;&#125;int main() &#123; //test01(); test02(); system(&quot;pause&quot;); return 0;&#125; 总结： 能够利用所学知识点实现通用的数组 2 STL初识2.1 STL的诞生 长久以来，软件界一直希望建立一种可重复利用的东西 C++的面向对象和泛型编程思想，目的就是复用性的提升 大多情况下，数据结构和算法都未能有一套标准,导致被迫从事大量重复工作 为了建立数据结构和算法的一套标准,诞生了STL ​ 2.2 STL基本概念 STL(Standard Template Library,标准模板库) STL 从广义上分为: 容器(container) 算法(algorithm) 迭代器(iterator) 容器和算法之间通过迭代器进行无缝连接。 STL 几乎所有的代码都采用了模板类或者模板函数 2.3 STL六大组件STL大体分为六大组件，分别是:容器、算法、迭代器、仿函数、适配器（配接器）、空间配置器 容器：各种数据结构，如vector、list、deque、set、map等,用来存放数据。 算法：各种常用的算法，如sort、find、copy、for_each等 迭代器：扮演了容器与算法之间的胶合剂。 仿函数：行为类似函数，可作为算法的某种策略。 适配器：一种用来修饰容器或者仿函数或迭代器接口的东西。 空间配置器：负责空间的配置与管理。 2.4 STL中容器、算法、迭代器容器：置物之所也 STL容器就是将运用最广泛的一些数据结构实现出来 常用的数据结构：数组, 链表,树, 栈, 队列, 集合, 映射表 等 这些容器分为序列式容器和关联式容器两种: ​ 序列式容器:强调值的排序，序列式容器中的每个元素均有固定的位置。 关联式容器:二叉树结构，各元素之间没有严格的物理上的顺序关系 算法：问题之解法也 有限的步骤，解决逻辑或数学上的问题，这一门学科我们叫做算法(Algorithms) 算法分为:质变算法和非质变算法。 质变算法：是指运算过程中会更改区间内的元素的内容。例如拷贝，替换，删除等等 非质变算法：是指运算过程中不会更改区间内的元素内容，例如查找、计数、遍历、寻找极值等等 迭代器：容器和算法之间粘合剂 提供一种方法，使之能够依序寻访某个容器所含的各个元素，而又无需暴露该容器的内部表示方式。 每个容器都有自己专属的迭代器 迭代器使用非常类似于指针，初学阶段我们可以先理解迭代器为指针 迭代器种类： 种类 功能 支持运算 输入迭代器 对数据的只读访问 只读，支持++、&#x3D;&#x3D;、！&#x3D; 输出迭代器 对数据的只写访问 只写，支持++ 前向迭代器 读写操作，并能向前推进迭代器 读写，支持++、&#x3D;&#x3D;、！&#x3D; 双向迭代器 读写操作，并能向前和向后操作 读写，支持++、–， 随机访问迭代器 读写操作，可以以跳跃的方式访问任意数据，功能最强的迭代器 读写，支持++、–、[n]、-n、&lt;、&lt;&#x3D;、&gt;、&gt;&#x3D; 常用的容器中迭代器种类为双向迭代器，和随机访问迭代器 2.5 容器算法迭代器初识了解STL中容器、算法、迭代器概念之后，我们利用代码感受STL的魅力 STL中最常用的容器为Vector，可以理解为数组，下面我们将学习如何向这个容器中插入数据、并遍历这个容器 2.5.1 vector存放内置数据类型容器： vector 算法： for_each 迭代器： vector&lt;int&gt;::iterator 示例： 12345678910111213141516171819202122232425262728293031323334353637383940414243444546474849505152#include &lt;vector&gt;#include &lt;algorithm&gt;void MyPrint(int val)&#123; cout &lt;&lt; val &lt;&lt; endl;&#125;void test01() &#123; //创建vector容器对象，并且通过模板参数指定容器中存放的数据的类型 vector&lt;int&gt; v; //向容器中放数据 v.push_back(10); v.push_back(20); v.push_back(30); v.push_back(40); //每一个容器都有自己的迭代器，迭代器是用来遍历容器中的元素 //v.begin()返回迭代器，这个迭代器指向容器中第一个数据 //v.end()返回迭代器，这个迭代器指向容器元素的最后一个元素的下一个位置 //vector&lt;int&gt;::iterator 拿到vector&lt;int&gt;这种容器的迭代器类型 vector&lt;int&gt;::iterator pBegin = v.begin(); vector&lt;int&gt;::iterator pEnd = v.end(); //第一种遍历方式： while (pBegin != pEnd) &#123; cout &lt;&lt; *pBegin &lt;&lt; endl; pBegin++; &#125; //第二种遍历方式： for (vector&lt;int&gt;::iterator it = v.begin(); it != v.end(); it++) &#123; cout &lt;&lt; *it &lt;&lt; endl; &#125; cout &lt;&lt; endl; //第三种遍历方式： //使用STL提供标准遍历算法 头文件 algorithm for_each(v.begin(), v.end(), MyPrint);&#125;int main() &#123; test01(); system(&quot;pause&quot;); return 0;&#125; 2.5.2 Vector存放自定义数据类型学习目标：vector中存放自定义数据类型，并打印输出 示例： 1234567891011121314151617181920212223242526272829303132333435363738394041424344454647484950515253545556575859606162636465666768697071727374#include &lt;vector&gt;#include &lt;string&gt;//自定义数据类型class Person &#123;public: Person(string name, int age) &#123; mName = name; mAge = age; &#125;public: string mName; int mAge;&#125;;//存放对象void test01() &#123; vector&lt;Person&gt; v; //创建数据 Person p1(&quot;aaa&quot;, 10); Person p2(&quot;bbb&quot;, 20); Person p3(&quot;ccc&quot;, 30); Person p4(&quot;ddd&quot;, 40); Person p5(&quot;eee&quot;, 50); v.push_back(p1); v.push_back(p2); v.push_back(p3); v.push_back(p4); v.push_back(p5); for (vector&lt;Person&gt;::iterator it = v.begin(); it != v.end(); it++) &#123; cout &lt;&lt; &quot;Name:&quot; &lt;&lt; (*it).mName &lt;&lt; &quot; Age:&quot; &lt;&lt; (*it).mAge &lt;&lt; endl; &#125;&#125;//放对象指针void test02() &#123; vector&lt;Person*&gt; v; //创建数据 Person p1(&quot;aaa&quot;, 10); Person p2(&quot;bbb&quot;, 20); Person p3(&quot;ccc&quot;, 30); Person p4(&quot;ddd&quot;, 40); Person p5(&quot;eee&quot;, 50); v.push_back(&amp;p1); v.push_back(&amp;p2); v.push_back(&amp;p3); v.push_back(&amp;p4); v.push_back(&amp;p5); for (vector&lt;Person*&gt;::iterator it = v.begin(); it != v.end(); it++) &#123; Person * p = (*it); cout &lt;&lt; &quot;Name:&quot; &lt;&lt; p-&gt;mName &lt;&lt; &quot; Age:&quot; &lt;&lt; (*it)-&gt;mAge &lt;&lt; endl; &#125;&#125;int main() &#123; test01(); test02(); system(&quot;pause&quot;); return 0;&#125; 2.5.3 Vector容器嵌套容器学习目标：容器中嵌套容器，我们将所有数据进行遍历输出 示例： 1234567891011121314151617181920212223242526272829303132333435363738394041424344#include &lt;vector&gt;//容器嵌套容器void test01() &#123; vector&lt; vector&lt;int&gt; &gt; v; vector&lt;int&gt; v1; vector&lt;int&gt; v2; vector&lt;int&gt; v3; vector&lt;int&gt; v4; for (int i = 0; i &lt; 4; i++) &#123; v1.push_back(i + 1); v2.push_back(i + 2); v3.push_back(i + 3); v4.push_back(i + 4); &#125; //将容器元素插入到vector v中 v.push_back(v1); v.push_back(v2); v.push_back(v3); v.push_back(v4); for (vector&lt;vector&lt;int&gt;&gt;::iterator it = v.begin(); it != v.end(); it++) &#123; for (vector&lt;int&gt;::iterator vit = (*it).begin(); vit != (*it).end(); vit++) &#123; cout &lt;&lt; *vit &lt;&lt; &quot; &quot;; &#125; cout &lt;&lt; endl; &#125;&#125;int main() &#123; test01(); system(&quot;pause&quot;); return 0;&#125; 3 STL- 常用容器3.1 string容器3.1.1 string基本概念本质： string是C++风格的字符串，而string本质上是一个类 string和char * 区别： char * 是一个指针 string是一个类，类内部封装了char*，管理这个字符串，是一个char*型的容器。 特点： string 类内部封装了很多成员方法 例如：查找find，拷贝copy，删除delete 替换replace，插入insert string管理char*所分配的内存，不用担心复制越界和取值越界等，由类内部进行负责 3.1.2 string构造函数构造函数原型： string(); &#x2F;&#x2F;创建一个空的字符串 例如: string str; string(const char* s); &#x2F;&#x2F;使用字符串s初始化 string(const string&amp; str); &#x2F;&#x2F;使用一个string对象初始化另一个string对象 string(int n, char c); &#x2F;&#x2F;使用n个字符c初始化 示例： 123456789101112131415161718192021222324252627#include &lt;string&gt;//string构造void test01()&#123; string s1; //创建空字符串，调用无参构造函数 cout &lt;&lt; &quot;str1 = &quot; &lt;&lt; s1 &lt;&lt; endl; const char* str = &quot;hello world&quot;; string s2(str); //把c_string转换成了string cout &lt;&lt; &quot;str2 = &quot; &lt;&lt; s2 &lt;&lt; endl; string s3(s2); //调用拷贝构造函数 cout &lt;&lt; &quot;str3 = &quot; &lt;&lt; s3 &lt;&lt; endl; string s4(10, &#x27;a&#x27;); cout &lt;&lt; &quot;str3 = &quot; &lt;&lt; s3 &lt;&lt; endl;&#125;int main() &#123; test01(); system(&quot;pause&quot;); return 0;&#125; 总结：string的多种构造方式没有可比性，灵活使用即可 3.1.3 string赋值操作功能描述： 给string字符串进行赋值 赋值的函数原型： string&amp; operator=(const char* s); &#x2F;&#x2F;char*类型字符串 赋值给当前的字符串 string&amp; operator=(const string &amp;s); &#x2F;&#x2F;把字符串s赋给当前的字符串 string&amp; operator=(char c); &#x2F;&#x2F;字符赋值给当前的字符串 string&amp; assign(const char *s); &#x2F;&#x2F;把字符串s赋给当前的字符串 string&amp; assign(const char *s, int n); &#x2F;&#x2F;把字符串s的前n个字符赋给当前的字符串 string&amp; assign(const string &amp;s); &#x2F;&#x2F;把字符串s赋给当前字符串 string&amp; assign(int n, char c); &#x2F;&#x2F;用n个字符c赋给当前字符串 示例： 1234567891011121314151617181920212223242526272829303132333435363738394041//赋值void test01()&#123; string str1; str1 = &quot;hello world&quot;; cout &lt;&lt; &quot;str1 = &quot; &lt;&lt; str1 &lt;&lt; endl; string str2; str2 = str1; cout &lt;&lt; &quot;str2 = &quot; &lt;&lt; str2 &lt;&lt; endl; string str3; str3 = &#x27;a&#x27;; cout &lt;&lt; &quot;str3 = &quot; &lt;&lt; str3 &lt;&lt; endl; string str4; str4.assign(&quot;hello c++&quot;); cout &lt;&lt; &quot;str4 = &quot; &lt;&lt; str4 &lt;&lt; endl; string str5; str5.assign(&quot;hello c++&quot;,5); cout &lt;&lt; &quot;str5 = &quot; &lt;&lt; str5 &lt;&lt; endl; string str6; str6.assign(str5); cout &lt;&lt; &quot;str6 = &quot; &lt;&lt; str6 &lt;&lt; endl; string str7; str7.assign(5, &#x27;x&#x27;); cout &lt;&lt; &quot;str7 = &quot; &lt;&lt; str7 &lt;&lt; endl;&#125;int main() &#123; test01(); system(&quot;pause&quot;); return 0;&#125; 总结： ​ string的赋值方式很多，operator= 这种方式是比较实用的 3.1.4 string字符串拼接功能描述： 实现在字符串末尾拼接字符串 函数原型： string&amp; operator+=(const char* str); &#x2F;&#x2F;重载+&#x3D;操作符 string&amp; operator+=(const char c); &#x2F;&#x2F;重载+&#x3D;操作符 string&amp; operator+=(const string&amp; str); &#x2F;&#x2F;重载+&#x3D;操作符 string&amp; append(const char *s); &#x2F;&#x2F;把字符串s连接到当前字符串结尾 string&amp; append(const char *s, int n); &#x2F;&#x2F;把字符串s的前n个字符连接到当前字符串结尾 string&amp; append(const string &amp;s); &#x2F;&#x2F;同operator+&#x3D;(const string&amp; str) string&amp; append(const string &amp;s, int pos, int n);&#x2F;&#x2F;字符串s中从pos开始的n个字符连接到字符串结尾 示例： 12345678910111213141516171819202122232425262728293031323334//字符串拼接void test01()&#123; string str1 = &quot;我&quot;; str1 += &quot;爱玩游戏&quot;; cout &lt;&lt; &quot;str1 = &quot; &lt;&lt; str1 &lt;&lt; endl; str1 += &#x27;:&#x27;; cout &lt;&lt; &quot;str1 = &quot; &lt;&lt; str1 &lt;&lt; endl; string str2 = &quot;LOL DNF&quot;; str1 += str2; cout &lt;&lt; &quot;str1 = &quot; &lt;&lt; str1 &lt;&lt; endl; string str3 = &quot;I&quot;; str3.append(&quot; love &quot;); str3.append(&quot;game abcde&quot;, 4); //str3.append(str2); str3.append(str2, 4, 3); // 从下标4位置开始 ，截取3个字符，拼接到字符串末尾 cout &lt;&lt; &quot;str3 = &quot; &lt;&lt; str3 &lt;&lt; endl;&#125;int main() &#123; test01(); system(&quot;pause&quot;); return 0;&#125; 总结：字符串拼接的重载版本很多，初学阶段记住几种即可 3.1.5 string查找和替换功能描述： 查找：查找指定字符串是否存在 替换：在指定的位置替换字符串 函数原型： int find(const string&amp; str, int pos = 0) const; &#x2F;&#x2F;查找str第一次出现位置,从pos开始查找 int find(const char* s, int pos = 0) const; &#x2F;&#x2F;查找s第一次出现位置,从pos开始查找 int find(const char* s, int pos, int n) const; &#x2F;&#x2F;从pos位置查找s的前n个字符第一次位置 int find(const char c, int pos = 0) const; &#x2F;&#x2F;查找字符c第一次出现位置 int rfind(const string&amp; str, int pos = npos) const; &#x2F;&#x2F;查找str最后一次位置,从pos开始查找 int rfind(const char* s, int pos = npos) const; &#x2F;&#x2F;查找s最后一次出现位置,从pos开始查找 int rfind(const char* s, int pos, int n) const; &#x2F;&#x2F;从pos查找s的前n个字符最后一次位置 int rfind(const char c, int pos = 0) const; &#x2F;&#x2F;查找字符c最后一次出现位置 string&amp; replace(int pos, int n, const string&amp; str); &#x2F;&#x2F;替换从pos开始n个字符为字符串str string&amp; replace(int pos, int n,const char* s); &#x2F;&#x2F;替换从pos开始的n个字符为字符串s 示例： 123456789101112131415161718192021222324252627282930313233343536373839404142//查找和替换void test01()&#123; //查找 string str1 = &quot;abcdefgde&quot;; int pos = str1.find(&quot;de&quot;); if (pos == -1) &#123; cout &lt;&lt; &quot;未找到&quot; &lt;&lt; endl; &#125; else &#123; cout &lt;&lt; &quot;pos = &quot; &lt;&lt; pos &lt;&lt; endl; &#125; pos = str1.rfind(&quot;de&quot;); cout &lt;&lt; &quot;pos = &quot; &lt;&lt; pos &lt;&lt; endl;&#125;void test02()&#123; //替换 string str1 = &quot;abcdefgde&quot;; str1.replace(1, 3, &quot;1111&quot;); cout &lt;&lt; &quot;str1 = &quot; &lt;&lt; str1 &lt;&lt; endl;&#125;int main() &#123; //test01(); //test02(); system(&quot;pause&quot;); return 0;&#125; 总结： find查找是从左往后，rfind从右往左 find找到字符串后返回查找的第一个字符位置，找不到返回-1 replace在替换时，要指定从哪个位置起，多少个字符，替换成什么样的字符串 3.1.6 string字符串比较功能描述： 字符串之间的比较 比较方式： 字符串比较是按字符的ASCII码进行对比 &#x3D; 返回 0 &gt; 返回 1 &lt; 返回 -1 函数原型： int compare(const string &amp;s) const; &#x2F;&#x2F;与字符串s比较 int compare(const char *s) const; &#x2F;&#x2F;与字符串s比较 示例： 12345678910111213141516171819202122232425262728293031//字符串比较void test01()&#123; string s1 = &quot;hello&quot;; string s2 = &quot;aello&quot;; int ret = s1.compare(s2); if (ret == 0) &#123; cout &lt;&lt; &quot;s1 等于 s2&quot; &lt;&lt; endl; &#125; else if (ret &gt; 0) &#123; cout &lt;&lt; &quot;s1 大于 s2&quot; &lt;&lt; endl; &#125; else &#123; cout &lt;&lt; &quot;s1 小于 s2&quot; &lt;&lt; endl; &#125;&#125;int main() &#123; test01(); system(&quot;pause&quot;); return 0;&#125; 总结：字符串对比主要是用于比较两个字符串是否相等，判断谁大谁小的意义并不是很大 3.1.7 string字符存取string中单个字符存取方式有两种 char&amp; operator[](int n); &#x2F;&#x2F;通过[]方式取字符 char&amp; at(int n); &#x2F;&#x2F;通过at方法获取字符 示例： 1234567891011121314151617181920212223242526272829303132void test01()&#123; string str = &quot;hello world&quot;; for (int i = 0; i &lt; str.size(); i++) &#123; cout &lt;&lt; str[i] &lt;&lt; &quot; &quot;; &#125; cout &lt;&lt; endl; for (int i = 0; i &lt; str.size(); i++) &#123; cout &lt;&lt; str.at(i) &lt;&lt; &quot; &quot;; &#125; cout &lt;&lt; endl; //字符修改 str[0] = &#x27;x&#x27;; str.at(1) = &#x27;x&#x27;; cout &lt;&lt; str &lt;&lt; endl; &#125;int main() &#123; test01(); system(&quot;pause&quot;); return 0;&#125; 总结：string字符串中单个字符存取有两种方式，利用 [ ] 或 at 3.1.8 string插入和删除功能描述： 对string字符串进行插入和删除字符操作 函数原型： string&amp; insert(int pos, const char* s); &#x2F;&#x2F;插入字符串 string&amp; insert(int pos, const string&amp; str); &#x2F;&#x2F;插入字符串 string&amp; insert(int pos, int n, char c); &#x2F;&#x2F;在指定位置插入n个字符c string&amp; erase(int pos, int n = npos); &#x2F;&#x2F;删除从Pos开始的n个字符 示例： 12345678910111213141516171819//字符串插入和删除void test01()&#123; string str = &quot;hello&quot;; str.insert(1, &quot;111&quot;); cout &lt;&lt; str &lt;&lt; endl; str.erase(1, 3); //从1号位置开始3个字符 cout &lt;&lt; str &lt;&lt; endl;&#125;int main() &#123; test01(); system(&quot;pause&quot;); return 0;&#125; 总结：插入和删除的起始下标都是从0开始 3.1.9 string子串功能描述： 从字符串中获取想要的子串 函数原型： string substr(int pos = 0, int n = npos) const; &#x2F;&#x2F;返回由pos开始的n个字符组成的字符串 示例： 1234567891011121314151617181920212223//子串void test01()&#123; string str = &quot;abcdefg&quot;; string subStr = str.substr(1, 3); cout &lt;&lt; &quot;subStr = &quot; &lt;&lt; subStr &lt;&lt; endl; string email = &quot;hello@sina.com&quot;; int pos = email.find(&quot;@&quot;); string username = email.substr(0, pos); cout &lt;&lt; &quot;username: &quot; &lt;&lt; username &lt;&lt; endl;&#125;int main() &#123; test01(); system(&quot;pause&quot;); return 0;&#125; 总结：灵活的运用求子串功能，可以在实际开发中获取有效的信息 3.2 vector容器3.2.1 vector基本概念功能： vector数据结构和数组非常相似，也称为单端数组 vector与普通数组区别： 不同之处在于数组是静态空间，而vector可以动态扩展 动态扩展： 并不是在原空间之后续接新空间，而是找更大的内存空间，然后将原数据拷贝新空间，释放原空间 vector容器的迭代器是支持随机访问的迭代器 3.2.2 vector构造函数功能描述： 创建vector容器 函数原型： vector&lt;T&gt; v; &#x2F;&#x2F;采用模板实现类实现，默认构造函数 vector(v.begin(), v.end()); &#x2F;&#x2F;将v[begin(), end())区间中的元素拷贝给本身。 vector(n, elem); &#x2F;&#x2F;构造函数将n个elem拷贝给本身。 vector(const vector &amp;vec); &#x2F;&#x2F;拷贝构造函数。 示例： 12345678910111213141516171819202122232425262728293031323334353637#include &lt;vector&gt;void printVector(vector&lt;int&gt;&amp; v) &#123; for (vector&lt;int&gt;::iterator it = v.begin(); it != v.end(); it++) &#123; cout &lt;&lt; *it &lt;&lt; &quot; &quot;; &#125; cout &lt;&lt; endl;&#125;void test01()&#123; vector&lt;int&gt; v1; //无参构造 for (int i = 0; i &lt; 10; i++) &#123; v1.push_back(i); &#125; printVector(v1); vector&lt;int&gt; v2(v1.begin(), v1.end()); printVector(v2); vector&lt;int&gt; v3(10, 100); printVector(v3); vector&lt;int&gt; v4(v3); printVector(v4);&#125;int main() &#123; test01(); system(&quot;pause&quot;); return 0;&#125; 总结：vector的多种构造方式没有可比性，灵活使用即可 3.2.3 vector赋值操作功能描述： 给vector容器进行赋值 函数原型： vector&amp; operator=(const vector &amp;vec);&#x2F;&#x2F;重载等号操作符 assign(beg, end); &#x2F;&#x2F;将[beg, end)区间中的数据拷贝赋值给本身。 assign(n, elem); &#x2F;&#x2F;将n个elem拷贝赋值给本身。 示例： 123456789101112131415161718192021222324252627282930313233343536373839404142#include &lt;vector&gt;void printVector(vector&lt;int&gt;&amp; v) &#123; for (vector&lt;int&gt;::iterator it = v.begin(); it != v.end(); it++) &#123; cout &lt;&lt; *it &lt;&lt; &quot; &quot;; &#125; cout &lt;&lt; endl;&#125;//赋值操作void test01()&#123; vector&lt;int&gt; v1; //无参构造 for (int i = 0; i &lt; 10; i++) &#123; v1.push_back(i); &#125; printVector(v1); vector&lt;int&gt;v2; v2 = v1; printVector(v2); vector&lt;int&gt;v3; v3.assign(v1.begin(), v1.end()); printVector(v3); vector&lt;int&gt;v4; v4.assign(10, 100); printVector(v4);&#125;int main() &#123; test01(); system(&quot;pause&quot;); return 0;&#125; 总结： vector赋值方式比较简单，使用operator&#x3D;，或者assign都可以 3.2.4 vector容量和大小功能描述： 对vector容器的容量和大小操作 函数原型： empty(); &#x2F;&#x2F;判断容器是否为空 capacity(); &#x2F;&#x2F;容器的容量 size(); &#x2F;&#x2F;返回容器中元素的个数 resize(int num); &#x2F;&#x2F;重新指定容器的长度为num，若容器变长，则以默认值填充新位置。 ​ &#x2F;&#x2F;如果容器变短，则末尾超出容器长度的元素被删除。 resize(int num, elem); &#x2F;&#x2F;重新指定容器的长度为num，若容器变长，则以elem值填充新位置。 ​ &#x2F;&#x2F;如果容器变短，则末尾超出容器长度的元素被删除 示例： 1234567891011121314151617181920212223242526272829303132333435363738394041424344454647#include &lt;vector&gt;void printVector(vector&lt;int&gt;&amp; v) &#123; for (vector&lt;int&gt;::iterator it = v.begin(); it != v.end(); it++) &#123; cout &lt;&lt; *it &lt;&lt; &quot; &quot;; &#125; cout &lt;&lt; endl;&#125;void test01()&#123; vector&lt;int&gt; v1; for (int i = 0; i &lt; 10; i++) &#123; v1.push_back(i); &#125; printVector(v1); if (v1.empty()) &#123; cout &lt;&lt; &quot;v1为空&quot; &lt;&lt; endl; &#125; else &#123; cout &lt;&lt; &quot;v1不为空&quot; &lt;&lt; endl; cout &lt;&lt; &quot;v1的容量 = &quot; &lt;&lt; v1.capacity() &lt;&lt; endl; cout &lt;&lt; &quot;v1的大小 = &quot; &lt;&lt; v1.size() &lt;&lt; endl; &#125; //resize 重新指定大小 ，若指定的更大，默认用0填充新位置，可以利用重载版本替换默认填充 v1.resize(15,10); printVector(v1); //resize 重新指定大小 ，若指定的更小，超出部分元素被删除 v1.resize(5); printVector(v1);&#125;int main() &#123; test01(); system(&quot;pause&quot;); return 0;&#125; 总结： 判断是否为空 — empty 返回元素个数 — size 返回容器容量 — capacity 重新指定大小 — resize 3.2.5 vector插入和删除功能描述： 对vector容器进行插入、删除操作 函数原型： push_back(ele); &#x2F;&#x2F;尾部插入元素ele pop_back(); &#x2F;&#x2F;删除最后一个元素 insert(const_iterator pos, ele); &#x2F;&#x2F;迭代器指向位置pos插入元素ele insert(const_iterator pos, int count,ele);&#x2F;&#x2F;迭代器指向位置pos插入count个元素ele erase(const_iterator pos); &#x2F;&#x2F;删除迭代器指向的元素 erase(const_iterator start, const_iterator end);&#x2F;&#x2F;删除迭代器从start到end之间的元素 clear(); &#x2F;&#x2F;删除容器中所有元素 示例： 1234567891011121314151617181920212223242526272829303132333435363738394041424344454647484950#include &lt;vector&gt;void printVector(vector&lt;int&gt;&amp; v) &#123; for (vector&lt;int&gt;::iterator it = v.begin(); it != v.end(); it++) &#123; cout &lt;&lt; *it &lt;&lt; &quot; &quot;; &#125; cout &lt;&lt; endl;&#125;//插入和删除void test01()&#123; vector&lt;int&gt; v1; //尾插 v1.push_back(10); v1.push_back(20); v1.push_back(30); v1.push_back(40); v1.push_back(50); printVector(v1); //尾删 v1.pop_back(); printVector(v1); //插入 v1.insert(v1.begin(), 100); printVector(v1); v1.insert(v1.begin(), 2, 1000); printVector(v1); //删除 v1.erase(v1.begin()); printVector(v1); //清空 v1.erase(v1.begin(), v1.end()); v1.clear(); printVector(v1);&#125;int main() &#123; test01(); system(&quot;pause&quot;); return 0;&#125; 总结： 尾插 — push_back 尾删 — pop_back 插入 — insert (位置迭代器) 删除 — erase （位置迭代器） 清空 — clear 3.2.6 vector数据存取功能描述： 对vector中的数据的存取操作 函数原型： at(int idx); &#x2F;&#x2F;返回索引idx所指的数据 operator[]; &#x2F;&#x2F;返回索引idx所指的数据 front(); &#x2F;&#x2F;返回容器中第一个数据元素 back(); &#x2F;&#x2F;返回容器中最后一个数据元素 示例： 12345678910111213141516171819202122232425262728293031323334#include &lt;vector&gt;void test01()&#123; vector&lt;int&gt;v1; for (int i = 0; i &lt; 10; i++) &#123; v1.push_back(i); &#125; for (int i = 0; i &lt; v1.size(); i++) &#123; cout &lt;&lt; v1[i] &lt;&lt; &quot; &quot;; &#125; cout &lt;&lt; endl; for (int i = 0; i &lt; v1.size(); i++) &#123; cout &lt;&lt; v1.at(i) &lt;&lt; &quot; &quot;; &#125; cout &lt;&lt; endl; cout &lt;&lt; &quot;v1的第一个元素为： &quot; &lt;&lt; v1.front() &lt;&lt; endl; cout &lt;&lt; &quot;v1的最后一个元素为： &quot; &lt;&lt; v1.back() &lt;&lt; endl;&#125;int main() &#123; test01(); system(&quot;pause&quot;); return 0;&#125; 总结： 除了用迭代器获取vector容器中元素，[ ]和at也可以 front返回容器第一个元素 back返回容器最后一个元素 3.2.7 vector互换容器功能描述： 实现两个容器内元素进行互换 函数原型： swap(vec); &#x2F;&#x2F; 将vec与本身的元素互换 示例： 123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566#include &lt;vector&gt;void printVector(vector&lt;int&gt;&amp; v) &#123; for (vector&lt;int&gt;::iterator it = v.begin(); it != v.end(); it++) &#123; cout &lt;&lt; *it &lt;&lt; &quot; &quot;; &#125; cout &lt;&lt; endl;&#125;void test01()&#123; vector&lt;int&gt;v1; for (int i = 0; i &lt; 10; i++) &#123; v1.push_back(i); &#125; printVector(v1); vector&lt;int&gt;v2; for (int i = 10; i &gt; 0; i--) &#123; v2.push_back(i); &#125; printVector(v2); //互换容器 cout &lt;&lt; &quot;互换后&quot; &lt;&lt; endl; v1.swap(v2); printVector(v1); printVector(v2);&#125;void test02()&#123; vector&lt;int&gt; v; for (int i = 0; i &lt; 100000; i++) &#123; v.push_back(i); &#125; cout &lt;&lt; &quot;v的容量为：&quot; &lt;&lt; v.capacity() &lt;&lt; endl; cout &lt;&lt; &quot;v的大小为：&quot; &lt;&lt; v.size() &lt;&lt; endl; v.resize(3); cout &lt;&lt; &quot;v的容量为：&quot; &lt;&lt; v.capacity() &lt;&lt; endl; cout &lt;&lt; &quot;v的大小为：&quot; &lt;&lt; v.size() &lt;&lt; endl; //收缩内存 vector&lt;int&gt;(v).swap(v); //匿名对象 cout &lt;&lt; &quot;v的容量为：&quot; &lt;&lt; v.capacity() &lt;&lt; endl; cout &lt;&lt; &quot;v的大小为：&quot; &lt;&lt; v.size() &lt;&lt; endl;&#125;int main() &#123; test01(); test02(); system(&quot;pause&quot;); return 0;&#125; 总结：swap可以使两个容器互换，可以达到实用的收缩内存效果 3.2.8 vector预留空间功能描述： 减少vector在动态扩展容量时的扩展次数 函数原型： reserve(int len);&#x2F;&#x2F;容器预留len个元素长度，预留位置不初始化，元素不可访问。 ​ 示例： 123456789101112131415161718192021222324252627282930#include &lt;vector&gt;void test01()&#123; vector&lt;int&gt; v; //预留空间 v.reserve(100000); int num = 0; int* p = NULL; for (int i = 0; i &lt; 100000; i++) &#123; v.push_back(i); if (p != &amp;v[0]) &#123; p = &amp;v[0]; num++; &#125; &#125; cout &lt;&lt; &quot;num:&quot; &lt;&lt; num &lt;&lt; endl;&#125;int main() &#123; test01(); system(&quot;pause&quot;); return 0;&#125; 总结：如果数据量较大，可以一开始利用reserve预留空间 3.3 deque容器3.3.1 deque容器基本概念功能： 双端数组，可以对头端进行插入删除操作 deque与vector区别： vector对于头部的插入删除效率低，数据量越大，效率越低 deque相对而言，对头部的插入删除速度回比vector快 vector访问元素时的速度会比deque快,这和两者内部实现有关 deque内部工作原理: deque内部有个中控器，维护每段缓冲区中的内容，缓冲区中存放真实数据 中控器维护的是每个缓冲区的地址，使得使用deque时像一片连续的内存空间 deque容器的迭代器也是支持随机访问的 3.3.2 deque构造函数功能描述： deque容器构造 函数原型： deque&lt;T&gt; deqT; &#x2F;&#x2F;默认构造形式 deque(beg, end); &#x2F;&#x2F;构造函数将[beg, end)区间中的元素拷贝给本身。 deque(n, elem); &#x2F;&#x2F;构造函数将n个elem拷贝给本身。 deque(const deque &amp;deq); &#x2F;&#x2F;拷贝构造函数 示例： 12345678910111213141516171819202122232425262728293031323334353637#include &lt;deque&gt;void printDeque(const deque&lt;int&gt;&amp; d) &#123; for (deque&lt;int&gt;::const_iterator it = d.begin(); it != d.end(); it++) &#123; cout &lt;&lt; *it &lt;&lt; &quot; &quot;; &#125; cout &lt;&lt; endl;&#125;//deque构造void test01() &#123; deque&lt;int&gt; d1; //无参构造函数 for (int i = 0; i &lt; 10; i++) &#123; d1.push_back(i); &#125; printDeque(d1); deque&lt;int&gt; d2(d1.begin(),d1.end()); printDeque(d2); deque&lt;int&gt;d3(10,100); printDeque(d3); deque&lt;int&gt;d4 = d3; printDeque(d4);&#125;int main() &#123; test01(); system(&quot;pause&quot;); return 0;&#125; 总结：deque容器和vector容器的构造方式几乎一致，灵活使用即可 3.3.3 deque赋值操作功能描述： 给deque容器进行赋值 函数原型： deque&amp; operator=(const deque &amp;deq); &#x2F;&#x2F;重载等号操作符 assign(beg, end); &#x2F;&#x2F;将[beg, end)区间中的数据拷贝赋值给本身。 assign(n, elem); &#x2F;&#x2F;将n个elem拷贝赋值给本身。 示例： 123456789101112131415161718192021222324252627282930313233343536373839404142#include &lt;deque&gt;void printDeque(const deque&lt;int&gt;&amp; d) &#123; for (deque&lt;int&gt;::const_iterator it = d.begin(); it != d.end(); it++) &#123; cout &lt;&lt; *it &lt;&lt; &quot; &quot;; &#125; cout &lt;&lt; endl;&#125;//赋值操作void test01()&#123; deque&lt;int&gt; d1; for (int i = 0; i &lt; 10; i++) &#123; d1.push_back(i); &#125; printDeque(d1); deque&lt;int&gt;d2; d2 = d1; printDeque(d2); deque&lt;int&gt;d3; d3.assign(d1.begin(), d1.end()); printDeque(d3); deque&lt;int&gt;d4; d4.assign(10, 100); printDeque(d4);&#125;int main() &#123; test01(); system(&quot;pause&quot;); return 0;&#125; 总结：deque赋值操作也与vector相同，需熟练掌握 3.3.4 deque大小操作功能描述： 对deque容器的大小进行操作 函数原型： deque.empty(); &#x2F;&#x2F;判断容器是否为空 deque.size(); &#x2F;&#x2F;返回容器中元素的个数 deque.resize(num); &#x2F;&#x2F;重新指定容器的长度为num,若容器变长，则以默认值填充新位置。 ​ &#x2F;&#x2F;如果容器变短，则末尾超出容器长度的元素被删除。 deque.resize(num, elem); &#x2F;&#x2F;重新指定容器的长度为num,若容器变长，则以elem值填充新位置。 ​ &#x2F;&#x2F;如果容器变短，则末尾超出容器长度的元素被删除。 ​ 示例： 1234567891011121314151617181920212223242526272829303132333435363738394041424344454647#include &lt;deque&gt;void printDeque(const deque&lt;int&gt;&amp; d) &#123; for (deque&lt;int&gt;::const_iterator it = d.begin(); it != d.end(); it++) &#123; cout &lt;&lt; *it &lt;&lt; &quot; &quot;; &#125; cout &lt;&lt; endl;&#125;//大小操作void test01()&#123; deque&lt;int&gt; d1; for (int i = 0; i &lt; 10; i++) &#123; d1.push_back(i); &#125; printDeque(d1); //判断容器是否为空 if (d1.empty()) &#123; cout &lt;&lt; &quot;d1为空!&quot; &lt;&lt; endl; &#125; else &#123; cout &lt;&lt; &quot;d1不为空!&quot; &lt;&lt; endl; //统计大小 cout &lt;&lt; &quot;d1的大小为：&quot; &lt;&lt; d1.size() &lt;&lt; endl; &#125; //重新指定大小 d1.resize(15, 1); printDeque(d1); d1.resize(5); printDeque(d1);&#125;int main() &#123; test01(); system(&quot;pause&quot;); return 0;&#125; 总结： deque没有容量的概念 判断是否为空 — empty 返回元素个数 — size 重新指定个数 — resize 3.3.5 deque 插入和删除功能描述： 向deque容器中插入和删除数据 函数原型： 两端插入操作： push_back(elem); &#x2F;&#x2F;在容器尾部添加一个数据 push_front(elem); &#x2F;&#x2F;在容器头部插入一个数据 pop_back(); &#x2F;&#x2F;删除容器最后一个数据 pop_front(); &#x2F;&#x2F;删除容器第一个数据 指定位置操作： insert(pos,elem); &#x2F;&#x2F;在pos位置插入一个elem元素的拷贝，返回新数据的位置。 insert(pos,n,elem); &#x2F;&#x2F;在pos位置插入n个elem数据，无返回值。 insert(pos,beg,end); &#x2F;&#x2F;在pos位置插入[beg,end)区间的数据，无返回值。 clear(); &#x2F;&#x2F;清空容器的所有数据 erase(beg,end); &#x2F;&#x2F;删除[beg,end)区间的数据，返回下一个数据的位置。 erase(pos); &#x2F;&#x2F;删除pos位置的数据，返回下一个数据的位置。 ​ ​ 示例： 123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172737475767778798081828384858687#include &lt;deque&gt;void printDeque(const deque&lt;int&gt;&amp; d) &#123; for (deque&lt;int&gt;::const_iterator it = d.begin(); it != d.end(); it++) &#123; cout &lt;&lt; *it &lt;&lt; &quot; &quot;; &#125; cout &lt;&lt; endl;&#125;//两端操作void test01()&#123; deque&lt;int&gt; d; //尾插 d.push_back(10); d.push_back(20); //头插 d.push_front(100); d.push_front(200); printDeque(d); //尾删 d.pop_back(); //头删 d.pop_front(); printDeque(d);&#125;//插入void test02()&#123; deque&lt;int&gt; d; d.push_back(10); d.push_back(20); d.push_front(100); d.push_front(200); printDeque(d); d.insert(d.begin(), 1000); printDeque(d); d.insert(d.begin(), 2,10000); printDeque(d); deque&lt;int&gt;d2; d2.push_back(1); d2.push_back(2); d2.push_back(3); d.insert(d.begin(), d2.begin(), d2.end()); printDeque(d);&#125;//删除void test03()&#123; deque&lt;int&gt; d; d.push_back(10); d.push_back(20); d.push_front(100); d.push_front(200); printDeque(d); d.erase(d.begin()); printDeque(d); d.erase(d.begin(), d.end()); d.clear(); printDeque(d);&#125;int main() &#123; //test01(); //test02(); test03(); system(&quot;pause&quot;); return 0;&#125; 总结： 插入和删除提供的位置是迭代器！ 尾插 — push_back 尾删 — pop_back 头插 — push_front 头删 — pop_front 3.3.6 deque 数据存取功能描述： 对deque 中的数据的存取操作 函数原型： at(int idx); &#x2F;&#x2F;返回索引idx所指的数据 operator[]; &#x2F;&#x2F;返回索引idx所指的数据 front(); &#x2F;&#x2F;返回容器中第一个数据元素 back(); &#x2F;&#x2F;返回容器中最后一个数据元素 示例： 12345678910111213141516171819202122232425262728293031323334353637383940414243444546#include &lt;deque&gt;void printDeque(const deque&lt;int&gt;&amp; d) &#123; for (deque&lt;int&gt;::const_iterator it = d.begin(); it != d.end(); it++) &#123; cout &lt;&lt; *it &lt;&lt; &quot; &quot;; &#125; cout &lt;&lt; endl;&#125;//数据存取void test01()&#123; deque&lt;int&gt; d; d.push_back(10); d.push_back(20); d.push_front(100); d.push_front(200); for (int i = 0; i &lt; d.size(); i++) &#123; cout &lt;&lt; d[i] &lt;&lt; &quot; &quot;; &#125; cout &lt;&lt; endl; for (int i = 0; i &lt; d.size(); i++) &#123; cout &lt;&lt; d.at(i) &lt;&lt; &quot; &quot;; &#125; cout &lt;&lt; endl; cout &lt;&lt; &quot;front:&quot; &lt;&lt; d.front() &lt;&lt; endl; cout &lt;&lt; &quot;back:&quot; &lt;&lt; d.back() &lt;&lt; endl;&#125;int main() &#123; test01(); system(&quot;pause&quot;); return 0;&#125; 总结： 除了用迭代器获取deque容器中元素，[ ]和at也可以 front返回容器第一个元素 back返回容器最后一个元素 3.3.7 deque 排序功能描述： 利用算法实现对deque容器进行排序 算法： sort(iterator beg, iterator end) &#x2F;&#x2F;对beg和end区间内元素进行排序 示例： 1234567891011121314151617181920212223242526272829303132333435#include &lt;deque&gt;#include &lt;algorithm&gt;void printDeque(const deque&lt;int&gt;&amp; d) &#123; for (deque&lt;int&gt;::const_iterator it = d.begin(); it != d.end(); it++) &#123; cout &lt;&lt; *it &lt;&lt; &quot; &quot;; &#125; cout &lt;&lt; endl;&#125;void test01()&#123; deque&lt;int&gt; d; d.push_back(10); d.push_back(20); d.push_front(100); d.push_front(200); printDeque(d); sort(d.begin(), d.end()); printDeque(d);&#125;int main() &#123; test01(); system(&quot;pause&quot;); return 0;&#125; 总结：sort算法非常实用，使用时包含头文件 algorithm即可 3.4 案例-评委打分3.4.1 案例描述有5名选手：选手ABCDE，10个评委分别对每一名选手打分，去除最高分，去除评委中最低分，取平均分。 3.4.2 实现步骤 创建五名选手，放到vector中 遍历vector容器，取出来每一个选手，执行for循环，可以把10个评分打分存到deque容器中 sort算法对deque容器中分数排序，去除最高和最低分 deque容器遍历一遍，累加总分 获取平均分 示例代码： 123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172737475767778798081828384858687888990919293949596979899100101102103104105106//选手类class Person&#123;public: Person(string name, int score) &#123; this-&gt;m_Name = name; this-&gt;m_Score = score; &#125; string m_Name; //姓名 int m_Score; //平均分&#125;;void createPerson(vector&lt;Person&gt;&amp;v)&#123; string nameSeed = &quot;ABCDE&quot;; for (int i = 0; i &lt; 5; i++) &#123; string name = &quot;选手&quot;; name += nameSeed[i]; int score = 0; Person p(name, score); //将创建的person对象 放入到容器中 v.push_back(p); &#125;&#125;//打分void setScore(vector&lt;Person&gt;&amp;v)&#123; for (vector&lt;Person&gt;::iterator it = v.begin(); it != v.end(); it++) &#123; //将评委的分数 放入到deque容器中 deque&lt;int&gt;d; for (int i = 0; i &lt; 10; i++) &#123; int score = rand() % 41 + 60; // 60 ~ 100 d.push_back(score); &#125; //cout &lt;&lt; &quot;选手： &quot; &lt;&lt; it-&gt;m_Name &lt;&lt; &quot; 打分： &quot; &lt;&lt; endl; //for (deque&lt;int&gt;::iterator dit = d.begin(); dit != d.end(); dit++) //&#123; // cout &lt;&lt; *dit &lt;&lt; &quot; &quot;; //&#125; //cout &lt;&lt; endl; //排序 sort(d.begin(), d.end()); //去除最高和最低分 d.pop_back(); d.pop_front(); //取平均分 int sum = 0; for (deque&lt;int&gt;::iterator dit = d.begin(); dit != d.end(); dit++) &#123; sum += *dit; //累加每个评委的分数 &#125; int avg = sum / d.size(); //将平均分 赋值给选手身上 it-&gt;m_Score = avg; &#125;&#125;void showScore(vector&lt;Person&gt;&amp;v)&#123; for (vector&lt;Person&gt;::iterator it = v.begin(); it != v.end(); it++) &#123; cout &lt;&lt; &quot;姓名： &quot; &lt;&lt; it-&gt;m_Name &lt;&lt; &quot; 平均分： &quot; &lt;&lt; it-&gt;m_Score &lt;&lt; endl; &#125;&#125;int main() &#123; //随机数种子 srand((unsigned int)time(NULL)); //1、创建5名选手 vector&lt;Person&gt;v; //存放选手容器 createPerson(v); //测试 //for (vector&lt;Person&gt;::iterator it = v.begin(); it != v.end(); it++) //&#123; // cout &lt;&lt; &quot;姓名： &quot; &lt;&lt; (*it).m_Name &lt;&lt; &quot; 分数： &quot; &lt;&lt; (*it).m_Score &lt;&lt; endl; //&#125; //2、给5名选手打分 setScore(v); //3、显示最后得分 showScore(v); system(&quot;pause&quot;); return 0;&#125; 总结： 选取不同的容器操作数据，可以提升代码的效率 3.5 stack容器3.5.1 stack 基本概念概念：stack是一种先进后出(First In Last Out,FILO)的数据结构，它只有一个出口 栈中只有顶端的元素才可以被外界使用，因此栈不允许有遍历行为 栈中进入数据称为 — 入栈 push 栈中弹出数据称为 — 出栈 pop 3.5.2 stack 常用接口功能描述：栈容器常用的对外接口 构造函数： stack&lt;T&gt; stk; &#x2F;&#x2F;stack采用模板类实现， stack对象的默认构造形式 stack(const stack &amp;stk); &#x2F;&#x2F;拷贝构造函数 赋值操作： stack&amp; operator=(const stack &amp;stk); &#x2F;&#x2F;重载等号操作符 数据存取： push(elem); &#x2F;&#x2F;向栈顶添加元素 pop(); &#x2F;&#x2F;从栈顶移除第一个元素 top(); &#x2F;&#x2F;返回栈顶元素 大小操作： empty(); &#x2F;&#x2F;判断堆栈是否为空 size(); &#x2F;&#x2F;返回栈的大小 示例： 12345678910111213141516171819202122232425262728293031#include &lt;stack&gt;//栈容器常用接口void test01()&#123; //创建栈容器 栈容器必须符合先进后出 stack&lt;int&gt; s; //向栈中添加元素，叫做 压栈 入栈 s.push(10); s.push(20); s.push(30); while (!s.empty()) &#123; //输出栈顶元素 cout &lt;&lt; &quot;栈顶元素为： &quot; &lt;&lt; s.top() &lt;&lt; endl; //弹出栈顶元素 s.pop(); &#125; cout &lt;&lt; &quot;栈的大小为：&quot; &lt;&lt; s.size() &lt;&lt; endl;&#125;int main() &#123; test01(); system(&quot;pause&quot;); return 0;&#125; 总结： 入栈 — push 出栈 — pop 返回栈顶 — top 判断栈是否为空 — empty 返回栈大小 — size 3.6 queue 容器3.6.1 queue 基本概念概念：Queue是一种先进先出(First In First Out,FIFO)的数据结构，它有两个出口 队列容器允许从一端新增元素，从另一端移除元素 队列中只有队头和队尾才可以被外界使用，因此队列不允许有遍历行为 队列中进数据称为 — 入队 push 队列中出数据称为 — 出队 pop 3.6.2 queue 常用接口功能描述：栈容器常用的对外接口 构造函数： queue&lt;T&gt; que; &#x2F;&#x2F;queue采用模板类实现，queue对象的默认构造形式 queue(const queue &amp;que); &#x2F;&#x2F;拷贝构造函数 赋值操作： queue&amp; operator=(const queue &amp;que); &#x2F;&#x2F;重载等号操作符 数据存取： push(elem); &#x2F;&#x2F;往队尾添加元素 pop(); &#x2F;&#x2F;从队头移除第一个元素 back(); &#x2F;&#x2F;返回最后一个元素 front(); &#x2F;&#x2F;返回第一个元素 大小操作： empty(); &#x2F;&#x2F;判断堆栈是否为空 size(); &#x2F;&#x2F;返回栈的大小 示例： 123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657#include &lt;queue&gt;#include &lt;string&gt;class Person&#123;public: Person(string name, int age) &#123; this-&gt;m_Name = name; this-&gt;m_Age = age; &#125; string m_Name; int m_Age;&#125;;void test01() &#123; //创建队列 queue&lt;Person&gt; q; //准备数据 Person p1(&quot;唐僧&quot;, 30); Person p2(&quot;孙悟空&quot;, 1000); Person p3(&quot;猪八戒&quot;, 900); Person p4(&quot;沙僧&quot;, 800); //向队列中添加元素 入队操作 q.push(p1); q.push(p2); q.push(p3); q.push(p4); //队列不提供迭代器，更不支持随机访问 while (!q.empty()) &#123; //输出队头元素 cout &lt;&lt; &quot;队头元素-- 姓名： &quot; &lt;&lt; q.front().m_Name &lt;&lt; &quot; 年龄： &quot;&lt;&lt; q.front().m_Age &lt;&lt; endl; cout &lt;&lt; &quot;队尾元素-- 姓名： &quot; &lt;&lt; q.back().m_Name &lt;&lt; &quot; 年龄： &quot; &lt;&lt; q.back().m_Age &lt;&lt; endl; cout &lt;&lt; endl; //弹出队头元素 q.pop(); &#125; cout &lt;&lt; &quot;队列大小为：&quot; &lt;&lt; q.size() &lt;&lt; endl;&#125;int main() &#123; test01(); system(&quot;pause&quot;); return 0;&#125; 总结： 入队 — push 出队 — pop 返回队头元素 — front 返回队尾元素 — back 判断队是否为空 — empty 返回队列大小 — size 3.7 list容器3.7.1 list基本概念功能：将数据进行链式存储 链表（list）是一种物理存储单元上非连续的存储结构，数据元素的逻辑顺序是通过链表中的指针链接实现的 链表的组成：链表由一系列结点组成 结点的组成：一个是存储数据元素的数据域，另一个是存储下一个结点地址的指针域 STL中的链表是一个双向循环链表 由于链表的存储方式并不是连续的内存空间，因此链表list中的迭代器只支持前移和后移，属于双向迭代器 list的优点： 采用动态存储分配，不会造成内存浪费和溢出 链表执行插入和删除操作十分方便，修改指针即可，不需要移动大量元素 list的缺点： 链表灵活，但是空间(指针域) 和 时间（遍历）额外耗费较大 List有一个重要的性质，插入操作和删除操作都不会造成原有list迭代器的失效，这在vector是不成立的。 总结：STL中List和vector是两个最常被使用的容器，各有优缺点 3.7.2 list构造函数功能描述： 创建list容器 函数原型： list&lt;T&gt; lst; &#x2F;&#x2F;list采用采用模板类实现,对象的默认构造形式： list(beg,end); &#x2F;&#x2F;构造函数将[beg, end)区间中的元素拷贝给本身。 list(n,elem); &#x2F;&#x2F;构造函数将n个elem拷贝给本身。 list(const list &amp;lst); &#x2F;&#x2F;拷贝构造函数。 示例： 1234567891011121314151617181920212223242526272829303132333435363738#include &lt;list&gt;void printList(const list&lt;int&gt;&amp; L) &#123; for (list&lt;int&gt;::const_iterator it = L.begin(); it != L.end(); it++) &#123; cout &lt;&lt; *it &lt;&lt; &quot; &quot;; &#125; cout &lt;&lt; endl;&#125;void test01()&#123; list&lt;int&gt;L1; L1.push_back(10); L1.push_back(20); L1.push_back(30); L1.push_back(40); printList(L1); list&lt;int&gt;L2(L1.begin(),L1.end()); printList(L2); list&lt;int&gt;L3(L2); printList(L3); list&lt;int&gt;L4(10, 1000); printList(L4);&#125;int main() &#123; test01(); system(&quot;pause&quot;); return 0;&#125; 总结：list构造方式同其他几个STL常用容器，熟练掌握即可 3.7.3 list 赋值和交换功能描述： 给list容器进行赋值，以及交换list容器 函数原型： assign(beg, end); &#x2F;&#x2F;将[beg, end)区间中的数据拷贝赋值给本身。 assign(n, elem); &#x2F;&#x2F;将n个elem拷贝赋值给本身。 list&amp; operator=(const list &amp;lst); &#x2F;&#x2F;重载等号操作符 swap(lst); &#x2F;&#x2F;将lst与本身的元素互换。 示例： 123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172#include &lt;list&gt;void printList(const list&lt;int&gt;&amp; L) &#123; for (list&lt;int&gt;::const_iterator it = L.begin(); it != L.end(); it++) &#123; cout &lt;&lt; *it &lt;&lt; &quot; &quot;; &#125; cout &lt;&lt; endl;&#125;//赋值和交换void test01()&#123; list&lt;int&gt;L1; L1.push_back(10); L1.push_back(20); L1.push_back(30); L1.push_back(40); printList(L1); //赋值 list&lt;int&gt;L2; L2 = L1; printList(L2); list&lt;int&gt;L3; L3.assign(L2.begin(), L2.end()); printList(L3); list&lt;int&gt;L4; L4.assign(10, 100); printList(L4);&#125;//交换void test02()&#123; list&lt;int&gt;L1; L1.push_back(10); L1.push_back(20); L1.push_back(30); L1.push_back(40); list&lt;int&gt;L2; L2.assign(10, 100); cout &lt;&lt; &quot;交换前： &quot; &lt;&lt; endl; printList(L1); printList(L2); cout &lt;&lt; endl; L1.swap(L2); cout &lt;&lt; &quot;交换后： &quot; &lt;&lt; endl; printList(L1); printList(L2);&#125;int main() &#123; //test01(); test02(); system(&quot;pause&quot;); return 0;&#125; 总结：list赋值和交换操作能够灵活运用即可 3.7.4 list 大小操作功能描述： 对list容器的大小进行操作 函数原型： size(); &#x2F;&#x2F;返回容器中元素的个数 empty(); &#x2F;&#x2F;判断容器是否为空 resize(num); &#x2F;&#x2F;重新指定容器的长度为num，若容器变长，则以默认值填充新位置。 ​ &#x2F;&#x2F;如果容器变短，则末尾超出容器长度的元素被删除。 resize(num, elem); &#x2F;&#x2F;重新指定容器的长度为num，若容器变长，则以elem值填充新位置。 ​ //如果容器变短，则末尾超出容器长度的元素被删除。 示例： 123456789101112131415161718192021222324252627282930313233343536373839404142434445#include &lt;list&gt;void printList(const list&lt;int&gt;&amp; L) &#123; for (list&lt;int&gt;::const_iterator it = L.begin(); it != L.end(); it++) &#123; cout &lt;&lt; *it &lt;&lt; &quot; &quot;; &#125; cout &lt;&lt; endl;&#125;//大小操作void test01()&#123; list&lt;int&gt;L1; L1.push_back(10); L1.push_back(20); L1.push_back(30); L1.push_back(40); if (L1.empty()) &#123; cout &lt;&lt; &quot;L1为空&quot; &lt;&lt; endl; &#125; else &#123; cout &lt;&lt; &quot;L1不为空&quot; &lt;&lt; endl; cout &lt;&lt; &quot;L1的大小为： &quot; &lt;&lt; L1.size() &lt;&lt; endl; &#125; //重新指定大小 L1.resize(10); printList(L1); L1.resize(2); printList(L1);&#125;int main() &#123; test01(); system(&quot;pause&quot;); return 0;&#125; 总结： 判断是否为空 — empty 返回元素个数 — size 重新指定个数 — resize 3.7.5 list 插入和删除功能描述： 对list容器进行数据的插入和删除 函数原型： push_back(elem);&#x2F;&#x2F;在容器尾部加入一个元素 pop_back();&#x2F;&#x2F;删除容器中最后一个元素 push_front(elem);&#x2F;&#x2F;在容器开头插入一个元素 pop_front();&#x2F;&#x2F;从容器开头移除第一个元素 insert(pos,elem);&#x2F;&#x2F;在pos位置插elem元素的拷贝，返回新数据的位置。 insert(pos,n,elem);&#x2F;&#x2F;在pos位置插入n个elem数据，无返回值。 insert(pos,beg,end);&#x2F;&#x2F;在pos位置插入[beg,end)区间的数据，无返回值。 clear();&#x2F;&#x2F;移除容器的所有数据 erase(beg,end);&#x2F;&#x2F;删除[beg,end)区间的数据，返回下一个数据的位置。 erase(pos);&#x2F;&#x2F;删除pos位置的数据，返回下一个数据的位置。 remove(elem);&#x2F;&#x2F;删除容器中所有与elem值匹配的元素。 示例： 12345678910111213141516171819202122232425262728293031323334353637383940414243444546474849505152535455565758596061626364#include &lt;list&gt;void printList(const list&lt;int&gt;&amp; L) &#123; for (list&lt;int&gt;::const_iterator it = L.begin(); it != L.end(); it++) &#123; cout &lt;&lt; *it &lt;&lt; &quot; &quot;; &#125; cout &lt;&lt; endl;&#125;//插入和删除void test01()&#123; list&lt;int&gt; L; //尾插 L.push_back(10); L.push_back(20); L.push_back(30); //头插 L.push_front(100); L.push_front(200); L.push_front(300); printList(L); //尾删 L.pop_back(); printList(L); //头删 L.pop_front(); printList(L); //插入 list&lt;int&gt;::iterator it = L.begin(); L.insert(++it, 1000); printList(L); //删除 it = L.begin(); L.erase(++it); printList(L); //移除 L.push_back(10000); L.push_back(10000); L.push_back(10000); printList(L); L.remove(10000); printList(L); //清空 L.clear(); printList(L);&#125;int main() &#123; test01(); system(&quot;pause&quot;); return 0;&#125; 总结： 尾插 — push_back 尾删 — pop_back 头插 — push_front 头删 — pop_front 插入 — insert 删除 — erase 移除 — remove 清空 — clear 3.7.6 list 数据存取功能描述： 对list容器中数据进行存取 函数原型： front(); &#x2F;&#x2F;返回第一个元素。 back(); &#x2F;&#x2F;返回最后一个元素。 示例： 12345678910111213141516171819202122232425262728293031#include &lt;list&gt;//数据存取void test01()&#123; list&lt;int&gt;L1; L1.push_back(10); L1.push_back(20); L1.push_back(30); L1.push_back(40); //cout &lt;&lt; L1.at(0) &lt;&lt; endl;//错误 不支持at访问数据 //cout &lt;&lt; L1[0] &lt;&lt; endl; //错误 不支持[]方式访问数据 cout &lt;&lt; &quot;第一个元素为： &quot; &lt;&lt; L1.front() &lt;&lt; endl; cout &lt;&lt; &quot;最后一个元素为： &quot; &lt;&lt; L1.back() &lt;&lt; endl; //list容器的迭代器是双向迭代器，不支持随机访问 list&lt;int&gt;::iterator it = L1.begin(); //it = it + 1;//错误，不可以跳跃访问，即使是+1&#125;int main() &#123; test01(); system(&quot;pause&quot;); return 0;&#125; 总结： list容器中不可以通过[]或者at方式访问数据 返回第一个元素 — front 返回最后一个元素 — back 3.7.7 list 反转和排序功能描述： 将容器中的元素反转，以及将容器中的数据进行排序 函数原型： reverse(); &#x2F;&#x2F;反转链表 sort(); &#x2F;&#x2F;链表排序 示例： 12345678910111213141516171819202122232425262728293031323334353637383940414243void printList(const list&lt;int&gt;&amp; L) &#123; for (list&lt;int&gt;::const_iterator it = L.begin(); it != L.end(); it++) &#123; cout &lt;&lt; *it &lt;&lt; &quot; &quot;; &#125; cout &lt;&lt; endl;&#125;bool myCompare(int val1 , int val2)&#123; return val1 &gt; val2;&#125;//反转和排序void test01()&#123; list&lt;int&gt; L; L.push_back(90); L.push_back(30); L.push_back(20); L.push_back(70); printList(L); //反转容器的元素 L.reverse(); printList(L); //排序 L.sort(); //默认的排序规则 从小到大 printList(L); L.sort(myCompare); //指定规则，从大到小 printList(L);&#125;int main() &#123; test01(); system(&quot;pause&quot;); return 0;&#125; 总结： 反转 — reverse 排序 — sort （成员函数） 3.7.8 排序案例案例描述：将Person自定义数据类型进行排序，Person中属性有姓名、年龄、身高 排序规则：按照年龄进行升序，如果年龄相同按照身高进行降序 示例： 123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869#include &lt;list&gt;#include &lt;string&gt;class Person &#123;public: Person(string name, int age , int height) &#123; m_Name = name; m_Age = age; m_Height = height; &#125;public: string m_Name; //姓名 int m_Age; //年龄 int m_Height; //身高&#125;;bool ComparePerson(Person&amp; p1, Person&amp; p2) &#123; if (p1.m_Age == p2.m_Age) &#123; return p1.m_Height &gt; p2.m_Height; &#125; else &#123; return p1.m_Age &lt; p2.m_Age; &#125;&#125;void test01() &#123; list&lt;Person&gt; L; Person p1(&quot;刘备&quot;, 35 , 175); Person p2(&quot;曹操&quot;, 45 , 180); Person p3(&quot;孙权&quot;, 40 , 170); Person p4(&quot;赵云&quot;, 25 , 190); Person p5(&quot;张飞&quot;, 35 , 160); Person p6(&quot;关羽&quot;, 35 , 200); L.push_back(p1); L.push_back(p2); L.push_back(p3); L.push_back(p4); L.push_back(p5); L.push_back(p6); for (list&lt;Person&gt;::iterator it = L.begin(); it != L.end(); it++) &#123; cout &lt;&lt; &quot;姓名： &quot; &lt;&lt; it-&gt;m_Name &lt;&lt; &quot; 年龄： &quot; &lt;&lt; it-&gt;m_Age &lt;&lt; &quot; 身高： &quot; &lt;&lt; it-&gt;m_Height &lt;&lt; endl; &#125; cout &lt;&lt; &quot;---------------------------------&quot; &lt;&lt; endl; L.sort(ComparePerson); //排序 for (list&lt;Person&gt;::iterator it = L.begin(); it != L.end(); it++) &#123; cout &lt;&lt; &quot;姓名： &quot; &lt;&lt; it-&gt;m_Name &lt;&lt; &quot; 年龄： &quot; &lt;&lt; it-&gt;m_Age &lt;&lt; &quot; 身高： &quot; &lt;&lt; it-&gt;m_Height &lt;&lt; endl; &#125;&#125;int main() &#123; test01(); system(&quot;pause&quot;); return 0;&#125; 总结： 对于自定义数据类型，必须要指定排序规则，否则编译器不知道如何进行排序 高级排序只是在排序规则上再进行一次逻辑规则制定，并不复杂 3.8 set&#x2F; multiset 容器3.8.1 set基本概念简介： 所有元素都会在插入时自动被排序 本质： set&#x2F;multiset属于关联式容器，底层结构是用二叉树实现。 set和multiset区别： set不允许容器中有重复的元素 multiset允许容器中有重复的元素 3.8.2 set构造和赋值功能描述：创建set容器以及赋值 构造： set&lt;T&gt; st; &#x2F;&#x2F;默认构造函数： set(const set &amp;st); &#x2F;&#x2F;拷贝构造函数 赋值： set&amp; operator=(const set &amp;st); &#x2F;&#x2F;重载等号操作符 示例： 12345678910111213141516171819202122232425262728293031323334353637383940#include &lt;set&gt;void printSet(set&lt;int&gt; &amp; s)&#123; for (set&lt;int&gt;::iterator it = s.begin(); it != s.end(); it++) &#123; cout &lt;&lt; *it &lt;&lt; &quot; &quot;; &#125; cout &lt;&lt; endl;&#125;//构造和赋值void test01()&#123; set&lt;int&gt; s1; s1.insert(10); s1.insert(30); s1.insert(20); s1.insert(40); printSet(s1); //拷贝构造 set&lt;int&gt;s2(s1); printSet(s2); //赋值 set&lt;int&gt;s3; s3 = s2; printSet(s3);&#125;int main() &#123; test01(); system(&quot;pause&quot;); return 0;&#125; 总结： set容器插入数据时用insert set容器插入数据的数据会自动排序 3.8.3 set大小和交换功能描述： 统计set容器大小以及交换set容器 函数原型： size(); &#x2F;&#x2F;返回容器中元素的数目 empty(); &#x2F;&#x2F;判断容器是否为空 swap(st); &#x2F;&#x2F;交换两个集合容器 示例： 123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172#include &lt;set&gt;void printSet(set&lt;int&gt; &amp; s)&#123; for (set&lt;int&gt;::iterator it = s.begin(); it != s.end(); it++) &#123; cout &lt;&lt; *it &lt;&lt; &quot; &quot;; &#125; cout &lt;&lt; endl;&#125;//大小void test01()&#123; set&lt;int&gt; s1; s1.insert(10); s1.insert(30); s1.insert(20); s1.insert(40); if (s1.empty()) &#123; cout &lt;&lt; &quot;s1为空&quot; &lt;&lt; endl; &#125; else &#123; cout &lt;&lt; &quot;s1不为空&quot; &lt;&lt; endl; cout &lt;&lt; &quot;s1的大小为： &quot; &lt;&lt; s1.size() &lt;&lt; endl; &#125;&#125;//交换void test02()&#123; set&lt;int&gt; s1; s1.insert(10); s1.insert(30); s1.insert(20); s1.insert(40); set&lt;int&gt; s2; s2.insert(100); s2.insert(300); s2.insert(200); s2.insert(400); cout &lt;&lt; &quot;交换前&quot; &lt;&lt; endl; printSet(s1); printSet(s2); cout &lt;&lt; endl; cout &lt;&lt; &quot;交换后&quot; &lt;&lt; endl; s1.swap(s2); printSet(s1); printSet(s2);&#125;int main() &#123; //test01(); test02(); system(&quot;pause&quot;); return 0;&#125; 总结： 统计大小 — size 判断是否为空 — empty 交换容器 — swap 3.8.4 set插入和删除功能描述： set容器进行插入数据和删除数据 函数原型： insert(elem); &#x2F;&#x2F;在容器中插入元素。 clear(); &#x2F;&#x2F;清除所有元素 erase(pos); &#x2F;&#x2F;删除pos迭代器所指的元素，返回下一个元素的迭代器。 erase(beg, end); &#x2F;&#x2F;删除区间[beg,end)的所有元素 ，返回下一个元素的迭代器。 erase(elem); &#x2F;&#x2F;删除容器中值为elem的元素。 示例： 12345678910111213141516171819202122232425262728293031323334353637383940414243#include &lt;set&gt;void printSet(set&lt;int&gt; &amp; s)&#123; for (set&lt;int&gt;::iterator it = s.begin(); it != s.end(); it++) &#123; cout &lt;&lt; *it &lt;&lt; &quot; &quot;; &#125; cout &lt;&lt; endl;&#125;//插入和删除void test01()&#123; set&lt;int&gt; s1; //插入 s1.insert(10); s1.insert(30); s1.insert(20); s1.insert(40); printSet(s1); //删除 s1.erase(s1.begin()); printSet(s1); s1.erase(30); printSet(s1); //清空 //s1.erase(s1.begin(), s1.end()); s1.clear(); printSet(s1);&#125;int main() &#123; test01(); system(&quot;pause&quot;); return 0;&#125; 总结： 插入 — insert 删除 — erase 清空 — clear 3.8.5 set查找和统计功能描述： 对set容器进行查找数据以及统计数据 函数原型： find(key); &#x2F;&#x2F;查找key是否存在,若存在，返回该键的元素的迭代器；若不存在，返回set.end(); count(key); &#x2F;&#x2F;统计key的元素个数 示例： 12345678910111213141516171819202122232425262728293031323334353637#include &lt;set&gt;//查找和统计void test01()&#123; set&lt;int&gt; s1; //插入 s1.insert(10); s1.insert(30); s1.insert(20); s1.insert(40); //查找 set&lt;int&gt;::iterator pos = s1.find(30); if (pos != s1.end()) &#123; cout &lt;&lt; &quot;找到了元素 ： &quot; &lt;&lt; *pos &lt;&lt; endl; &#125; else &#123; cout &lt;&lt; &quot;未找到元素&quot; &lt;&lt; endl; &#125; //统计 int num = s1.count(30); cout &lt;&lt; &quot;num = &quot; &lt;&lt; num &lt;&lt; endl;&#125;int main() &#123; test01(); system(&quot;pause&quot;); return 0;&#125; 总结： 查找 — find （返回的是迭代器） 统计 — count （对于set，结果为0或者1） 3.8.6 set和multiset区别学习目标： 掌握set和multiset的区别 区别： set不可以插入重复数据，而multiset可以 set插入数据的同时会返回插入结果，表示插入是否成功 multiset不会检测数据，因此可以插入重复数据 示例： 1234567891011121314151617181920212223242526272829303132333435363738394041#include &lt;set&gt;//set和multiset区别void test01()&#123; set&lt;int&gt; s; pair&lt;set&lt;int&gt;::iterator, bool&gt; ret = s.insert(10); if (ret.second) &#123; cout &lt;&lt; &quot;第一次插入成功!&quot; &lt;&lt; endl; &#125; else &#123; cout &lt;&lt; &quot;第一次插入失败!&quot; &lt;&lt; endl; &#125; ret = s.insert(10); if (ret.second) &#123; cout &lt;&lt; &quot;第二次插入成功!&quot; &lt;&lt; endl; &#125; else &#123; cout &lt;&lt; &quot;第二次插入失败!&quot; &lt;&lt; endl; &#125; //multiset multiset&lt;int&gt; ms; ms.insert(10); ms.insert(10); for (multiset&lt;int&gt;::iterator it = ms.begin(); it != ms.end(); it++) &#123; cout &lt;&lt; *it &lt;&lt; &quot; &quot;; &#125; cout &lt;&lt; endl;&#125;int main() &#123; test01(); system(&quot;pause&quot;); return 0;&#125; 总结： 如果不允许插入重复数据可以利用set 如果需要插入重复数据利用multiset 3.8.7 pair对组创建功能描述： 成对出现的数据，利用对组可以返回两个数据 两种创建方式： pair&lt;type, type&gt; p ( value1, value2 ); pair&lt;type, type&gt; p = make_pair( value1, value2 ); 示例： 1234567891011121314151617181920#include &lt;string&gt;//对组创建void test01()&#123; pair&lt;string, int&gt; p(string(&quot;Tom&quot;), 20); cout &lt;&lt; &quot;姓名： &quot; &lt;&lt; p.first &lt;&lt; &quot; 年龄： &quot; &lt;&lt; p.second &lt;&lt; endl; pair&lt;string, int&gt; p2 = make_pair(&quot;Jerry&quot;, 10); cout &lt;&lt; &quot;姓名： &quot; &lt;&lt; p2.first &lt;&lt; &quot; 年龄： &quot; &lt;&lt; p2.second &lt;&lt; endl;&#125;int main() &#123; test01(); system(&quot;pause&quot;); return 0;&#125; 总结： 两种方式都可以创建对组，记住一种即可 3.8.8 set容器排序学习目标： set容器默认排序规则为从小到大，掌握如何改变排序规则 主要技术点： 利用仿函数，可以改变排序规则 示例一 set存放内置数据类型 12345678910111213141516171819202122232425262728293031323334353637383940414243444546#include &lt;set&gt;class MyCompare &#123;public: bool operator()(int v1, int v2) &#123; return v1 &gt; v2; &#125;&#125;;void test01() &#123; set&lt;int&gt; s1; s1.insert(10); s1.insert(40); s1.insert(20); s1.insert(30); s1.insert(50); //默认从小到大 for (set&lt;int&gt;::iterator it = s1.begin(); it != s1.end(); it++) &#123; cout &lt;&lt; *it &lt;&lt; &quot; &quot;; &#125; cout &lt;&lt; endl; //指定排序规则 set&lt;int,MyCompare&gt; s2; s2.insert(10); s2.insert(40); s2.insert(20); s2.insert(30); s2.insert(50); for (set&lt;int, MyCompare&gt;::iterator it = s2.begin(); it != s2.end(); it++) &#123; cout &lt;&lt; *it &lt;&lt; &quot; &quot;; &#125; cout &lt;&lt; endl;&#125;int main() &#123; test01(); system(&quot;pause&quot;); return 0;&#125; 总结：利用仿函数可以指定set容器的排序规则 示例二 set存放自定义数据类型 1234567891011121314151617181920212223242526272829303132333435363738394041424344454647484950515253#include &lt;set&gt;#include &lt;string&gt;class Person&#123;public: Person(string name, int age) &#123; this-&gt;m_Name = name; this-&gt;m_Age = age; &#125; string m_Name; int m_Age;&#125;;class comparePerson&#123;public: bool operator()(const Person&amp; p1, const Person &amp;p2) &#123; //按照年龄进行排序 降序 return p1.m_Age &gt; p2.m_Age; &#125;&#125;;void test01()&#123; set&lt;Person, comparePerson&gt; s; Person p1(&quot;刘备&quot;, 23); Person p2(&quot;关羽&quot;, 27); Person p3(&quot;张飞&quot;, 25); Person p4(&quot;赵云&quot;, 21); s.insert(p1); s.insert(p2); s.insert(p3); s.insert(p4); for (set&lt;Person, comparePerson&gt;::iterator it = s.begin(); it != s.end(); it++) &#123; cout &lt;&lt; &quot;姓名： &quot; &lt;&lt; it-&gt;m_Name &lt;&lt; &quot; 年龄： &quot; &lt;&lt; it-&gt;m_Age &lt;&lt; endl; &#125;&#125;int main() &#123; test01(); system(&quot;pause&quot;); return 0;&#125; 总结： 对于自定义数据类型，set必须指定排序规则才可以插入数据 3.9 map&#x2F; multimap容器3.9.1 map基本概念简介： map中所有元素都是pair pair中第一个元素为key（键值），起到索引作用，第二个元素为value（实值） 所有元素都会根据元素的键值自动排序 本质： map&#x2F;multimap属于关联式容器，底层结构是用二叉树实现。 优点： 可以根据key值快速找到value值 map和multimap区别： map不允许容器中有重复key值元素 multimap允许容器中有重复key值元素 3.9.2 map构造和赋值功能描述： 对map容器进行构造和赋值操作 函数原型： 构造： map&lt;T1, T2&gt; mp; &#x2F;&#x2F;map默认构造函数: map(const map &amp;mp); &#x2F;&#x2F;拷贝构造函数 赋值： map&amp; operator=(const map &amp;mp); &#x2F;&#x2F;重载等号操作符 示例： 1234567891011121314151617181920212223242526272829303132333435#include &lt;map&gt;void printMap(map&lt;int,int&gt;&amp;m)&#123; for (map&lt;int, int&gt;::iterator it = m.begin(); it != m.end(); it++) &#123; cout &lt;&lt; &quot;key = &quot; &lt;&lt; it-&gt;first &lt;&lt; &quot; value = &quot; &lt;&lt; it-&gt;second &lt;&lt; endl; &#125; cout &lt;&lt; endl;&#125;void test01()&#123; map&lt;int,int&gt;m; //默认构造 m.insert(pair&lt;int, int&gt;(1, 10)); m.insert(pair&lt;int, int&gt;(2, 20)); m.insert(pair&lt;int, int&gt;(3, 30)); printMap(m); map&lt;int, int&gt;m2(m); //拷贝构造 printMap(m2); map&lt;int, int&gt;m3; m3 = m2; //赋值 printMap(m3);&#125;int main() &#123; test01(); system(&quot;pause&quot;); return 0;&#125; 总结：map中所有元素都是成对出现，插入数据时候要使用对组 3.9.3 map大小和交换功能描述： 统计map容器大小以及交换map容器 函数原型： size(); &#x2F;&#x2F;返回容器中元素的数目 empty(); &#x2F;&#x2F;判断容器是否为空 swap(st); &#x2F;&#x2F;交换两个集合容器 示例： 123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263#include &lt;map&gt;void printMap(map&lt;int,int&gt;&amp;m)&#123; for (map&lt;int, int&gt;::iterator it = m.begin(); it != m.end(); it++) &#123; cout &lt;&lt; &quot;key = &quot; &lt;&lt; it-&gt;first &lt;&lt; &quot; value = &quot; &lt;&lt; it-&gt;second &lt;&lt; endl; &#125; cout &lt;&lt; endl;&#125;void test01()&#123; map&lt;int, int&gt;m; m.insert(pair&lt;int, int&gt;(1, 10)); m.insert(pair&lt;int, int&gt;(2, 20)); m.insert(pair&lt;int, int&gt;(3, 30)); if (m.empty()) &#123; cout &lt;&lt; &quot;m为空&quot; &lt;&lt; endl; &#125; else &#123; cout &lt;&lt; &quot;m不为空&quot; &lt;&lt; endl; cout &lt;&lt; &quot;m的大小为： &quot; &lt;&lt; m.size() &lt;&lt; endl; &#125;&#125;//交换void test02()&#123; map&lt;int, int&gt;m; m.insert(pair&lt;int, int&gt;(1, 10)); m.insert(pair&lt;int, int&gt;(2, 20)); m.insert(pair&lt;int, int&gt;(3, 30)); map&lt;int, int&gt;m2; m2.insert(pair&lt;int, int&gt;(4, 100)); m2.insert(pair&lt;int, int&gt;(5, 200)); m2.insert(pair&lt;int, int&gt;(6, 300)); cout &lt;&lt; &quot;交换前&quot; &lt;&lt; endl; printMap(m); printMap(m2); cout &lt;&lt; &quot;交换后&quot; &lt;&lt; endl; m.swap(m2); printMap(m); printMap(m2);&#125;int main() &#123; test01(); test02(); system(&quot;pause&quot;); return 0;&#125; 总结： 统计大小 — size 判断是否为空 — empty 交换容器 — swap 3.9.4 map插入和删除功能描述： map容器进行插入数据和删除数据 函数原型： insert(elem); &#x2F;&#x2F;在容器中插入元素。 clear(); &#x2F;&#x2F;清除所有元素 erase(pos); &#x2F;&#x2F;删除pos迭代器所指的元素，返回下一个元素的迭代器。 erase(beg, end); &#x2F;&#x2F;删除区间[beg,end)的所有元素 ，返回下一个元素的迭代器。 erase(key); &#x2F;&#x2F;删除容器中值为key的元素。 示例： 12345678910111213141516171819202122232425262728293031323334353637383940414243444546#include &lt;map&gt;void printMap(map&lt;int,int&gt;&amp;m)&#123; for (map&lt;int, int&gt;::iterator it = m.begin(); it != m.end(); it++) &#123; cout &lt;&lt; &quot;key = &quot; &lt;&lt; it-&gt;first &lt;&lt; &quot; value = &quot; &lt;&lt; it-&gt;second &lt;&lt; endl; &#125; cout &lt;&lt; endl;&#125;void test01()&#123; //插入 map&lt;int, int&gt; m; //第一种插入方式 m.insert(pair&lt;int, int&gt;(1, 10)); //第二种插入方式 m.insert(make_pair(2, 20)); //第三种插入方式 m.insert(map&lt;int, int&gt;::value_type(3, 30)); //第四种插入方式 m[4] = 40; printMap(m); //删除 m.erase(m.begin()); printMap(m); m.erase(3); printMap(m); //清空 m.erase(m.begin(),m.end()); m.clear(); printMap(m);&#125;int main() &#123; test01(); system(&quot;pause&quot;); return 0;&#125; 总结： map插入方式很多，记住其一即可 插入 — insert 删除 — erase 清空 — clear 3.9.5 map查找和统计功能描述： 对map容器进行查找数据以及统计数据 函数原型： find(key); &#x2F;&#x2F;查找key是否存在,若存在，返回该键的元素的迭代器；若不存在，返回set.end(); count(key); &#x2F;&#x2F;统计key的元素个数 示例： 1234567891011121314151617181920212223242526272829303132333435#include &lt;map&gt;//查找和统计void test01()&#123; map&lt;int, int&gt;m; m.insert(pair&lt;int, int&gt;(1, 10)); m.insert(pair&lt;int, int&gt;(2, 20)); m.insert(pair&lt;int, int&gt;(3, 30)); //查找 map&lt;int, int&gt;::iterator pos = m.find(3); if (pos != m.end()) &#123; cout &lt;&lt; &quot;找到了元素 key = &quot; &lt;&lt; (*pos).first &lt;&lt; &quot; value = &quot; &lt;&lt; (*pos).second &lt;&lt; endl; &#125; else &#123; cout &lt;&lt; &quot;未找到元素&quot; &lt;&lt; endl; &#125; //统计 int num = m.count(3); cout &lt;&lt; &quot;num = &quot; &lt;&lt; num &lt;&lt; endl;&#125;int main() &#123; test01(); system(&quot;pause&quot;); return 0;&#125; 总结： 查找 — find （返回的是迭代器） 统计 — count （对于map，结果为0或者1） 3.9.6 map容器排序学习目标： map容器默认排序规则为 按照key值进行 从小到大排序，掌握如何改变排序规则 主要技术点: 利用仿函数，可以改变排序规则 示例： 123456789101112131415161718192021222324252627282930313233#include &lt;map&gt;class MyCompare &#123;public: bool operator()(int v1, int v2) &#123; return v1 &gt; v2; &#125;&#125;;void test01() &#123; //默认从小到大排序 //利用仿函数实现从大到小排序 map&lt;int, int, MyCompare&gt; m; m.insert(make_pair(1, 10)); m.insert(make_pair(2, 20)); m.insert(make_pair(3, 30)); m.insert(make_pair(4, 40)); m.insert(make_pair(5, 50)); for (map&lt;int, int, MyCompare&gt;::iterator it = m.begin(); it != m.end(); it++) &#123; cout &lt;&lt; &quot;key:&quot; &lt;&lt; it-&gt;first &lt;&lt; &quot; value:&quot; &lt;&lt; it-&gt;second &lt;&lt; endl; &#125;&#125;int main() &#123; test01(); system(&quot;pause&quot;); return 0;&#125; 总结： 利用仿函数可以指定map容器的排序规则 对于自定义数据类型，map必须要指定排序规则,同set容器 3.10 案例-员工分组3.10.1 案例描述 公司今天招聘了10个员工（ABCDEFGHIJ），10名员工进入公司之后，需要指派员工在那个部门工作 员工信息有: 姓名 工资组成；部门分为：策划、美术、研发 随机给10名员工分配部门和工资 通过multimap进行信息的插入 key(部门编号) value(员工) 分部门显示员工信息 3.10.2 实现步骤 创建10名员工，放到vector中 遍历vector容器，取出每个员工，进行随机分组 分组后，将员工部门编号作为key，具体员工作为value，放入到multimap容器中 分部门显示员工信息 案例代码： 123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172737475767778798081828384858687888990919293949596979899100101102103104105106107108109110111112113114115116#include&lt;iostream&gt;using namespace std;#include &lt;vector&gt;#include &lt;string&gt;#include &lt;map&gt;#include &lt;ctime&gt;/*- 公司今天招聘了10个员工（ABCDEFGHIJ），10名员工进入公司之后，需要指派员工在那个部门工作- 员工信息有: 姓名 工资组成；部门分为：策划、美术、研发- 随机给10名员工分配部门和工资- 通过multimap进行信息的插入 key(部门编号) value(员工)- 分部门显示员工信息*/#define CEHUA 0#define MEISHU 1#define YANFA 2class Worker&#123;public: string m_Name; int m_Salary;&#125;;void createWorker(vector&lt;Worker&gt;&amp;v)&#123; string nameSeed = &quot;ABCDEFGHIJ&quot;; for (int i = 0; i &lt; 10; i++) &#123; Worker worker; worker.m_Name = &quot;员工&quot;; worker.m_Name += nameSeed[i]; worker.m_Salary = rand() % 10000 + 10000; // 10000 ~ 19999 //将员工放入到容器中 v.push_back(worker); &#125;&#125;//员工分组void setGroup(vector&lt;Worker&gt;&amp;v,multimap&lt;int,Worker&gt;&amp;m)&#123; for (vector&lt;Worker&gt;::iterator it = v.begin(); it != v.end(); it++) &#123; //产生随机部门编号 int deptId = rand() % 3; // 0 1 2 //将员工插入到分组中 //key部门编号，value具体员工 m.insert(make_pair(deptId, *it)); &#125;&#125;void showWorkerByGourp(multimap&lt;int,Worker&gt;&amp;m)&#123; // 0 A B C 1 D E 2 F G ... cout &lt;&lt; &quot;策划部门：&quot; &lt;&lt; endl; multimap&lt;int,Worker&gt;::iterator pos = m.find(CEHUA); int count = m.count(CEHUA); // 统计具体人数 int index = 0; for (; pos != m.end() &amp;&amp; index &lt; count; pos++ , index++) &#123; cout &lt;&lt; &quot;姓名： &quot; &lt;&lt; pos-&gt;second.m_Name &lt;&lt; &quot; 工资： &quot; &lt;&lt; pos-&gt;second.m_Salary &lt;&lt; endl; &#125; cout &lt;&lt; &quot;----------------------&quot; &lt;&lt; endl; cout &lt;&lt; &quot;美术部门： &quot; &lt;&lt; endl; pos = m.find(MEISHU); count = m.count(MEISHU); // 统计具体人数 index = 0; for (; pos != m.end() &amp;&amp; index &lt; count; pos++, index++) &#123; cout &lt;&lt; &quot;姓名： &quot; &lt;&lt; pos-&gt;second.m_Name &lt;&lt; &quot; 工资： &quot; &lt;&lt; pos-&gt;second.m_Salary &lt;&lt; endl; &#125; cout &lt;&lt; &quot;----------------------&quot; &lt;&lt; endl; cout &lt;&lt; &quot;研发部门： &quot; &lt;&lt; endl; pos = m.find(YANFA); count = m.count(YANFA); // 统计具体人数 index = 0; for (; pos != m.end() &amp;&amp; index &lt; count; pos++, index++) &#123; cout &lt;&lt; &quot;姓名： &quot; &lt;&lt; pos-&gt;second.m_Name &lt;&lt; &quot; 工资： &quot; &lt;&lt; pos-&gt;second.m_Salary &lt;&lt; endl; &#125;&#125;int main() &#123; srand((unsigned int)time(NULL)); //1、创建员工 vector&lt;Worker&gt;vWorker; createWorker(vWorker); //2、员工分组 multimap&lt;int, Worker&gt;mWorker; setGroup(vWorker, mWorker); //3、分组显示员工 showWorkerByGourp(mWorker); ////测试 //for (vector&lt;Worker&gt;::iterator it = vWorker.begin(); it != vWorker.end(); it++) //&#123; // cout &lt;&lt; &quot;姓名： &quot; &lt;&lt; it-&gt;m_Name &lt;&lt; &quot; 工资： &quot; &lt;&lt; it-&gt;m_Salary &lt;&lt; endl; //&#125; system(&quot;pause&quot;); return 0;&#125; 总结： 当数据以键值对形式存在，可以考虑用map 或 multimap 4 STL- 函数对象4.1 函数对象4.1.1 函数对象概念概念： 重载函数调用操作符的类，其对象常称为函数对象 函数对象使用重载的()时，行为类似函数调用，也叫仿函数 本质： 函数对象(仿函数)是一个类，不是一个函数 4.1.2 函数对象使用特点： 函数对象在使用时，可以像普通函数那样调用, 可以有参数，可以有返回值 函数对象超出普通函数的概念，函数对象可以有自己的状态 函数对象可以作为参数传递 示例: 1234567891011121314151617181920212223242526272829303132333435363738394041424344454647484950515253545556575859606162636465#include &lt;string&gt;//1、函数对象在使用时，可以像普通函数那样调用, 可以有参数，可以有返回值class MyAdd&#123;public : int operator()(int v1,int v2) &#123; return v1 + v2; &#125;&#125;;void test01()&#123; MyAdd myAdd; cout &lt;&lt; myAdd(10, 10) &lt;&lt; endl;&#125;//2、函数对象可以有自己的状态class MyPrint&#123;public: MyPrint() &#123; count = 0; &#125; void operator()(string test) &#123; cout &lt;&lt; test &lt;&lt; endl; count++; //统计使用次数 &#125; int count; //内部自己的状态&#125;;void test02()&#123; MyPrint myPrint; myPrint(&quot;hello world&quot;); myPrint(&quot;hello world&quot;); myPrint(&quot;hello world&quot;); cout &lt;&lt; &quot;myPrint调用次数为： &quot; &lt;&lt; myPrint.count &lt;&lt; endl;&#125;//3、函数对象可以作为参数传递void doPrint(MyPrint &amp;mp , string test)&#123; mp(test);&#125;void test03()&#123; MyPrint myPrint; doPrint(myPrint, &quot;Hello C++&quot;);&#125;int main() &#123; //test01(); //test02(); test03(); system(&quot;pause&quot;); return 0;&#125; 总结： 仿函数写法非常灵活，可以作为参数进行传递。 4.2 谓词4.2.1 谓词概念概念： 返回bool类型的仿函数称为谓词 如果operator()接受一个参数，那么叫做一元谓词 如果operator()接受两个参数，那么叫做二元谓词 4.2.2 一元谓词示例： 123456789101112131415161718192021222324252627282930313233343536#include &lt;vector&gt;#include &lt;algorithm&gt;//1.一元谓词struct GreaterFive&#123; bool operator()(int val) &#123; return val &gt; 5; &#125;&#125;;void test01() &#123; vector&lt;int&gt; v; for (int i = 0; i &lt; 10; i++) &#123; v.push_back(i); &#125; vector&lt;int&gt;::iterator it = find_if(v.begin(), v.end(), GreaterFive()); if (it == v.end()) &#123; cout &lt;&lt; &quot;没找到!&quot; &lt;&lt; endl; &#125; else &#123; cout &lt;&lt; &quot;找到:&quot; &lt;&lt; *it &lt;&lt; endl; &#125;&#125;int main() &#123; test01(); system(&quot;pause&quot;); return 0;&#125; 总结：参数只有一个的谓词，称为一元谓词 4.2.3 二元谓词示例： 1234567891011121314151617181920212223242526272829303132333435363738394041424344454647#include &lt;vector&gt;#include &lt;algorithm&gt;//二元谓词class MyCompare&#123;public: bool operator()(int num1, int num2) &#123; return num1 &gt; num2; &#125;&#125;;void test01()&#123; vector&lt;int&gt; v; v.push_back(10); v.push_back(40); v.push_back(20); v.push_back(30); v.push_back(50); //默认从小到大 sort(v.begin(), v.end()); for (vector&lt;int&gt;::iterator it = v.begin(); it != v.end(); it++) &#123; cout &lt;&lt; *it &lt;&lt; &quot; &quot;; &#125; cout &lt;&lt; endl; cout &lt;&lt; &quot;----------------------------&quot; &lt;&lt; endl; //使用函数对象改变算法策略，排序从大到小 sort(v.begin(), v.end(), MyCompare()); for (vector&lt;int&gt;::iterator it = v.begin(); it != v.end(); it++) &#123; cout &lt;&lt; *it &lt;&lt; &quot; &quot;; &#125; cout &lt;&lt; endl;&#125;int main() &#123; test01(); system(&quot;pause&quot;); return 0;&#125; 总结：参数只有两个的谓词，称为二元谓词 4.3 内建函数对象4.3.1 内建函数对象意义概念： STL内建了一些函数对象 分类: 算术仿函数 关系仿函数 逻辑仿函数 用法： 这些仿函数所产生的对象，用法和一般函数完全相同 使用内建函数对象，需要引入头文件 #include&lt;functional&gt; 4.3.2 算术仿函数功能描述： 实现四则运算 其中negate是一元运算，其他都是二元运算 仿函数原型： template&lt;class T&gt; T plus&lt;T&gt; &#x2F;&#x2F;加法仿函数 template&lt;class T&gt; T minus&lt;T&gt; &#x2F;&#x2F;减法仿函数 template&lt;class T&gt; T multiplies&lt;T&gt; &#x2F;&#x2F;乘法仿函数 template&lt;class T&gt; T divides&lt;T&gt; &#x2F;&#x2F;除法仿函数 template&lt;class T&gt; T modulus&lt;T&gt; &#x2F;&#x2F;取模仿函数 template&lt;class T&gt; T negate&lt;T&gt; &#x2F;&#x2F;取反仿函数 示例： 123456789101112131415161718192021222324#include &lt;functional&gt;//negatevoid test01()&#123; negate&lt;int&gt; n; cout &lt;&lt; n(50) &lt;&lt; endl;&#125;//plusvoid test02()&#123; plus&lt;int&gt; p; cout &lt;&lt; p(10, 20) &lt;&lt; endl;&#125;int main() &#123; test01(); test02(); system(&quot;pause&quot;); return 0;&#125; 总结：使用内建函数对象时，需要引入头文件 #include &lt;functional&gt; 4.3.3 关系仿函数功能描述： 实现关系对比 仿函数原型： template&lt;class T&gt; bool equal_to&lt;T&gt; &#x2F;&#x2F;等于 template&lt;class T&gt; bool not_equal_to&lt;T&gt; &#x2F;&#x2F;不等于 template&lt;class T&gt; bool greater&lt;T&gt; &#x2F;&#x2F;大于 template&lt;class T&gt; bool greater_equal&lt;T&gt; &#x2F;&#x2F;大于等于 template&lt;class T&gt; bool less&lt;T&gt; &#x2F;&#x2F;小于 template&lt;class T&gt; bool less_equal&lt;T&gt; &#x2F;&#x2F;小于等于 示例： 12345678910111213141516171819202122232425262728293031323334353637383940414243444546#include &lt;functional&gt;#include &lt;vector&gt;#include &lt;algorithm&gt;class MyCompare&#123;public: bool operator()(int v1,int v2) &#123; return v1 &gt; v2; &#125;&#125;;void test01()&#123; vector&lt;int&gt; v; v.push_back(10); v.push_back(30); v.push_back(50); v.push_back(40); v.push_back(20); for (vector&lt;int&gt;::iterator it = v.begin(); it != v.end(); it++) &#123; cout &lt;&lt; *it &lt;&lt; &quot; &quot;; &#125; cout &lt;&lt; endl; //自己实现仿函数 //sort(v.begin(), v.end(), MyCompare()); //STL内建仿函数 大于仿函数 sort(v.begin(), v.end(), greater&lt;int&gt;()); for (vector&lt;int&gt;::iterator it = v.begin(); it != v.end(); it++) &#123; cout &lt;&lt; *it &lt;&lt; &quot; &quot;; &#125; cout &lt;&lt; endl;&#125;int main() &#123; test01(); system(&quot;pause&quot;); return 0;&#125; 总结：关系仿函数中最常用的就是greater&lt;&gt;大于 4.3.4 逻辑仿函数功能描述： 实现逻辑运算 函数原型： template&lt;class T&gt; bool logical_and&lt;T&gt; &#x2F;&#x2F;逻辑与 template&lt;class T&gt; bool logical_or&lt;T&gt; &#x2F;&#x2F;逻辑或 template&lt;class T&gt; bool logical_not&lt;T&gt; &#x2F;&#x2F;逻辑非 示例： 123456789101112131415161718192021222324252627282930313233343536#include &lt;vector&gt;#include &lt;functional&gt;#include &lt;algorithm&gt;void test01()&#123; vector&lt;bool&gt; v; v.push_back(true); v.push_back(false); v.push_back(true); v.push_back(false); for (vector&lt;bool&gt;::iterator it = v.begin();it!= v.end();it++) &#123; cout &lt;&lt; *it &lt;&lt; &quot; &quot;; &#125; cout &lt;&lt; endl; //逻辑非 将v容器搬运到v2中，并执行逻辑非运算 vector&lt;bool&gt; v2; v2.resize(v.size()); transform(v.begin(), v.end(), v2.begin(), logical_not&lt;bool&gt;()); for (vector&lt;bool&gt;::iterator it = v2.begin(); it != v2.end(); it++) &#123; cout &lt;&lt; *it &lt;&lt; &quot; &quot;; &#125; cout &lt;&lt; endl;&#125;int main() &#123; test01(); system(&quot;pause&quot;); return 0;&#125; 总结：逻辑仿函数实际应用较少，了解即可 5 STL- 常用算法概述: 算法主要是由头文件&lt;algorithm&gt; &lt;functional&gt; &lt;numeric&gt;组成。 &lt;algorithm&gt;是所有STL头文件中最大的一个，范围涉及到比较、 交换、查找、遍历操作、复制、修改等等 &lt;numeric&gt;体积很小，只包括几个在序列上面进行简单数学运算的模板函数 &lt;functional&gt;定义了一些模板类,用以声明函数对象。 5.1 常用遍历算法学习目标： 掌握常用的遍历算法 算法简介： for_each &#x2F;&#x2F;遍历容器 transform &#x2F;&#x2F;搬运容器到另一个容器中 5.1.1 for_each功能描述： 实现遍历容器 函数原型： for_each(iterator beg, iterator end, _func); &#x2F;&#x2F; 遍历算法 遍历容器元素 &#x2F;&#x2F; beg 开始迭代器 &#x2F;&#x2F; end 结束迭代器 &#x2F;&#x2F; _func 函数或者函数对象 示例： 12345678910111213141516171819202122232425262728293031323334353637383940414243#include &lt;algorithm&gt;#include &lt;vector&gt;//普通函数void print01(int val) &#123; cout &lt;&lt; val &lt;&lt; &quot; &quot;;&#125;//函数对象class print02 &#123; public: void operator()(int val) &#123; cout &lt;&lt; val &lt;&lt; &quot; &quot;; &#125;&#125;;//for_each算法基本用法void test01() &#123; vector&lt;int&gt; v; for (int i = 0; i &lt; 10; i++) &#123; v.push_back(i); &#125; //遍历算法 for_each(v.begin(), v.end(), print01); cout &lt;&lt; endl; for_each(v.begin(), v.end(), print02()); cout &lt;&lt; endl;&#125;int main() &#123; test01(); system(&quot;pause&quot;); return 0;&#125; 总结：for_each在实际开发中是最常用遍历算法，需要熟练掌握 5.1.2 transform功能描述： 搬运容器到另一个容器中 函数原型： transform(iterator beg1, iterator end1, iterator beg2, _func); &#x2F;&#x2F;beg1 源容器开始迭代器 &#x2F;&#x2F;end1 源容器结束迭代器 &#x2F;&#x2F;beg2 目标容器开始迭代器 &#x2F;&#x2F;_func 函数或者函数对象 示例： 12345678910111213141516171819202122232425262728293031323334353637383940414243444546474849#include&lt;vector&gt;#include&lt;algorithm&gt;//常用遍历算法 搬运 transformclass TransForm&#123;public: int operator()(int val) &#123; return val; &#125;&#125;;class MyPrint&#123;public: void operator()(int val) &#123; cout &lt;&lt; val &lt;&lt; &quot; &quot;; &#125;&#125;;void test01()&#123; vector&lt;int&gt;v; for (int i = 0; i &lt; 10; i++) &#123; v.push_back(i); &#125; vector&lt;int&gt;vTarget; //目标容器 vTarget.resize(v.size()); // 目标容器需要提前开辟空间 transform(v.begin(), v.end(), vTarget.begin(), TransForm()); for_each(vTarget.begin(), vTarget.end(), MyPrint());&#125;int main() &#123; test01(); system(&quot;pause&quot;); return 0;&#125; 总结： 搬运的目标容器必须要提前开辟空间，否则无法正常搬运 5.2 常用查找算法学习目标： 掌握常用的查找算法 算法简介： find &#x2F;&#x2F;查找元素 find_if &#x2F;&#x2F;按条件查找元素 adjacent_find &#x2F;&#x2F;查找相邻重复元素 binary_search &#x2F;&#x2F;二分查找法 count &#x2F;&#x2F;统计元素个数 count_if &#x2F;&#x2F;按条件统计元素个数 5.2.1 find功能描述： 查找指定元素，找到返回指定元素的迭代器，找不到返回结束迭代器end() 函数原型： find(iterator beg, iterator end, value); &#x2F;&#x2F; 按值查找元素，找到返回指定位置迭代器，找不到返回结束迭代器位置 &#x2F;&#x2F; beg 开始迭代器 &#x2F;&#x2F; end 结束迭代器 &#x2F;&#x2F; value 查找的元素 示例： 1234567891011121314151617181920212223242526272829303132333435363738394041424344454647484950515253545556575859606162636465666768#include &lt;algorithm&gt;#include &lt;vector&gt;#include &lt;string&gt;void test01() &#123; vector&lt;int&gt; v; for (int i = 0; i &lt; 10; i++) &#123; v.push_back(i + 1); &#125; //查找容器中是否有 5 这个元素 vector&lt;int&gt;::iterator it = find(v.begin(), v.end(), 5); if (it == v.end()) &#123; cout &lt;&lt; &quot;没有找到!&quot; &lt;&lt; endl; &#125; else &#123; cout &lt;&lt; &quot;找到:&quot; &lt;&lt; *it &lt;&lt; endl; &#125;&#125;class Person &#123;public: Person(string name, int age) &#123; this-&gt;m_Name = name; this-&gt;m_Age = age; &#125; //重载== bool operator==(const Person&amp; p) &#123; if (this-&gt;m_Name == p.m_Name &amp;&amp; this-&gt;m_Age == p.m_Age) &#123; return true; &#125; return false; &#125;public: string m_Name; int m_Age;&#125;;void test02() &#123; vector&lt;Person&gt; v; //创建数据 Person p1(&quot;aaa&quot;, 10); Person p2(&quot;bbb&quot;, 20); Person p3(&quot;ccc&quot;, 30); Person p4(&quot;ddd&quot;, 40); v.push_back(p1); v.push_back(p2); v.push_back(p3); v.push_back(p4); vector&lt;Person&gt;::iterator it = find(v.begin(), v.end(), p2); if (it == v.end()) &#123; cout &lt;&lt; &quot;没有找到!&quot; &lt;&lt; endl; &#125; else &#123; cout &lt;&lt; &quot;找到姓名:&quot; &lt;&lt; it-&gt;m_Name &lt;&lt; &quot; 年龄: &quot; &lt;&lt; it-&gt;m_Age &lt;&lt; endl; &#125;&#125; 总结： 利用find可以在容器中找指定的元素，返回值是迭代器 5.2.2 find_if功能描述： 按条件查找元素 函数原型： find_if(iterator beg, iterator end, _Pred); &#x2F;&#x2F; 按值查找元素，找到返回指定位置迭代器，找不到返回结束迭代器位置 &#x2F;&#x2F; beg 开始迭代器 &#x2F;&#x2F; end 结束迭代器 &#x2F;&#x2F; _Pred 函数或者谓词（返回bool类型的仿函数） 示例： 1234567891011121314151617181920212223242526272829303132333435363738394041424344454647484950515253545556575859606162636465666768697071727374757677787980818283848586878889#include &lt;algorithm&gt;#include &lt;vector&gt;#include &lt;string&gt;//内置数据类型class GreaterFive&#123;public: bool operator()(int val) &#123; return val &gt; 5; &#125;&#125;;void test01() &#123; vector&lt;int&gt; v; for (int i = 0; i &lt; 10; i++) &#123; v.push_back(i + 1); &#125; vector&lt;int&gt;::iterator it = find_if(v.begin(), v.end(), GreaterFive()); if (it == v.end()) &#123; cout &lt;&lt; &quot;没有找到!&quot; &lt;&lt; endl; &#125; else &#123; cout &lt;&lt; &quot;找到大于5的数字:&quot; &lt;&lt; *it &lt;&lt; endl; &#125;&#125;//自定义数据类型class Person &#123;public: Person(string name, int age) &#123; this-&gt;m_Name = name; this-&gt;m_Age = age; &#125;public: string m_Name; int m_Age;&#125;;class Greater20&#123;public: bool operator()(Person &amp;p) &#123; return p.m_Age &gt; 20; &#125;&#125;;void test02() &#123; vector&lt;Person&gt; v; //创建数据 Person p1(&quot;aaa&quot;, 10); Person p2(&quot;bbb&quot;, 20); Person p3(&quot;ccc&quot;, 30); Person p4(&quot;ddd&quot;, 40); v.push_back(p1); v.push_back(p2); v.push_back(p3); v.push_back(p4); vector&lt;Person&gt;::iterator it = find_if(v.begin(), v.end(), Greater20()); if (it == v.end()) &#123; cout &lt;&lt; &quot;没有找到!&quot; &lt;&lt; endl; &#125; else &#123; cout &lt;&lt; &quot;找到姓名:&quot; &lt;&lt; it-&gt;m_Name &lt;&lt; &quot; 年龄: &quot; &lt;&lt; it-&gt;m_Age &lt;&lt; endl; &#125;&#125;int main() &#123; //test01(); test02(); system(&quot;pause&quot;); return 0;&#125; 总结：find_if按条件查找使查找更加灵活，提供的仿函数可以改变不同的策略 5.2.3 adjacent_find功能描述： 查找相邻重复元素 函数原型： adjacent_find(iterator beg, iterator end); &#x2F;&#x2F; 查找相邻重复元素,返回相邻元素的第一个位置的迭代器 &#x2F;&#x2F; beg 开始迭代器 &#x2F;&#x2F; end 结束迭代器 ​ 示例： 1234567891011121314151617181920212223#include &lt;algorithm&gt;#include &lt;vector&gt;void test01()&#123; vector&lt;int&gt; v; v.push_back(1); v.push_back(2); v.push_back(5); v.push_back(2); v.push_back(4); v.push_back(4); v.push_back(3); //查找相邻重复元素 vector&lt;int&gt;::iterator it = adjacent_find(v.begin(), v.end()); if (it == v.end()) &#123; cout &lt;&lt; &quot;找不到!&quot; &lt;&lt; endl; &#125; else &#123; cout &lt;&lt; &quot;找到相邻重复元素为:&quot; &lt;&lt; *it &lt;&lt; endl; &#125;&#125; 总结：面试题中如果出现查找相邻重复元素，记得用STL中的adjacent_find算法 5.2.4 binary_search功能描述： 查找指定元素是否存在 函数原型： bool binary_search(iterator beg, iterator end, value); &#x2F;&#x2F; 查找指定的元素，查到 返回true 否则false &#x2F;&#x2F; 注意: 在无序序列中不可用 &#x2F;&#x2F; beg 开始迭代器 &#x2F;&#x2F; end 结束迭代器 &#x2F;&#x2F; value 查找的元素 示例： 12345678910111213141516171819202122232425262728293031#include &lt;algorithm&gt;#include &lt;vector&gt;void test01()&#123; vector&lt;int&gt;v; for (int i = 0; i &lt; 10; i++) &#123; v.push_back(i); &#125; //二分查找 bool ret = binary_search(v.begin(), v.end(),2); if (ret) &#123; cout &lt;&lt; &quot;找到了&quot; &lt;&lt; endl; &#125; else &#123; cout &lt;&lt; &quot;未找到&quot; &lt;&lt; endl; &#125;&#125;int main() &#123; test01(); system(&quot;pause&quot;); return 0;&#125; 总结：二分查找法查找效率很高，值得注意的是查找的容器中元素必须的有序序列 5.2.5 count功能描述： 统计元素个数 函数原型： count(iterator beg, iterator end, value); &#x2F;&#x2F; 统计元素出现次数 &#x2F;&#x2F; beg 开始迭代器 &#x2F;&#x2F; end 结束迭代器 &#x2F;&#x2F; value 统计的元素 示例： 123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172737475#include &lt;algorithm&gt;#include &lt;vector&gt;//内置数据类型void test01()&#123; vector&lt;int&gt; v; v.push_back(1); v.push_back(2); v.push_back(4); v.push_back(5); v.push_back(3); v.push_back(4); v.push_back(4); int num = count(v.begin(), v.end(), 4); cout &lt;&lt; &quot;4的个数为： &quot; &lt;&lt; num &lt;&lt; endl;&#125;//自定义数据类型class Person&#123;public: Person(string name, int age) &#123; this-&gt;m_Name = name; this-&gt;m_Age = age; &#125; bool operator==(const Person &amp; p) &#123; if (this-&gt;m_Age == p.m_Age) &#123; return true; &#125; else &#123; return false; &#125; &#125; string m_Name; int m_Age;&#125;;void test02()&#123; vector&lt;Person&gt; v; Person p1(&quot;刘备&quot;, 35); Person p2(&quot;关羽&quot;, 35); Person p3(&quot;张飞&quot;, 35); Person p4(&quot;赵云&quot;, 30); Person p5(&quot;曹操&quot;, 25); v.push_back(p1); v.push_back(p2); v.push_back(p3); v.push_back(p4); v.push_back(p5); Person p(&quot;诸葛亮&quot;,35); int num = count(v.begin(), v.end(), p); cout &lt;&lt; &quot;num = &quot; &lt;&lt; num &lt;&lt; endl;&#125;int main() &#123; //test01(); test02(); system(&quot;pause&quot;); return 0;&#125; 总结： 统计自定义数据类型时候，需要配合重载 operator== 5.2.6 count_if功能描述： 按条件统计元素个数 函数原型： count_if(iterator beg, iterator end, _Pred); &#x2F;&#x2F; 按条件统计元素出现次数 &#x2F;&#x2F; beg 开始迭代器 &#x2F;&#x2F; end 结束迭代器 &#x2F;&#x2F; _Pred 谓词 ​ 示例： 12345678910111213141516171819202122232425262728293031323334353637383940414243444546474849505152535455565758596061626364656667686970717273747576777879808182#include &lt;algorithm&gt;#include &lt;vector&gt;class Greater4&#123;public: bool operator()(int val) &#123; return val &gt;= 4; &#125;&#125;;//内置数据类型void test01()&#123; vector&lt;int&gt; v; v.push_back(1); v.push_back(2); v.push_back(4); v.push_back(5); v.push_back(3); v.push_back(4); v.push_back(4); int num = count_if(v.begin(), v.end(), Greater4()); cout &lt;&lt; &quot;大于4的个数为： &quot; &lt;&lt; num &lt;&lt; endl;&#125;//自定义数据类型class Person&#123;public: Person(string name, int age) &#123; this-&gt;m_Name = name; this-&gt;m_Age = age; &#125; string m_Name; int m_Age;&#125;;class AgeLess35&#123;public: bool operator()(const Person &amp;p) &#123; return p.m_Age &lt; 35; &#125;&#125;;void test02()&#123; vector&lt;Person&gt; v; Person p1(&quot;刘备&quot;, 35); Person p2(&quot;关羽&quot;, 35); Person p3(&quot;张飞&quot;, 35); Person p4(&quot;赵云&quot;, 30); Person p5(&quot;曹操&quot;, 25); v.push_back(p1); v.push_back(p2); v.push_back(p3); v.push_back(p4); v.push_back(p5); int num = count_if(v.begin(), v.end(), AgeLess35()); cout &lt;&lt; &quot;小于35岁的个数：&quot; &lt;&lt; num &lt;&lt; endl;&#125;int main() &#123; //test01(); test02(); system(&quot;pause&quot;); return 0;&#125; 总结：按值统计用count，按条件统计用count_if 5.3 常用排序算法学习目标： 掌握常用的排序算法 算法简介： sort &#x2F;&#x2F;对容器内元素进行排序 random_shuffle &#x2F;&#x2F;洗牌 指定范围内的元素随机调整次序 merge &#x2F;&#x2F; 容器元素合并，并存储到另一容器中 reverse &#x2F;&#x2F; 反转指定范围的元素 5.3.1 sort功能描述： 对容器内元素进行排序 函数原型： sort(iterator beg, iterator end, _Pred); &#x2F;&#x2F; 按值查找元素，找到返回指定位置迭代器，找不到返回结束迭代器位置 &#x2F;&#x2F; beg 开始迭代器 &#x2F;&#x2F; end 结束迭代器 &#x2F;&#x2F; _Pred 谓词 示例： 1234567891011121314151617181920212223242526272829303132333435#include &lt;algorithm&gt;#include &lt;vector&gt;void myPrint(int val)&#123; cout &lt;&lt; val &lt;&lt; &quot; &quot;;&#125;void test01() &#123; vector&lt;int&gt; v; v.push_back(10); v.push_back(30); v.push_back(50); v.push_back(20); v.push_back(40); //sort默认从小到大排序 sort(v.begin(), v.end()); for_each(v.begin(), v.end(), myPrint); cout &lt;&lt; endl; //从大到小排序 sort(v.begin(), v.end(), greater&lt;int&gt;()); for_each(v.begin(), v.end(), myPrint); cout &lt;&lt; endl;&#125;int main() &#123; test01(); system(&quot;pause&quot;); return 0;&#125; 总结：sort属于开发中最常用的算法之一，需熟练掌握 5.3.2 random_shuffle功能描述： 洗牌 指定范围内的元素随机调整次序 函数原型： random_shuffle(iterator beg, iterator end); &#x2F;&#x2F; 指定范围内的元素随机调整次序 &#x2F;&#x2F; beg 开始迭代器 &#x2F;&#x2F; end 结束迭代器 ​ 示例： 1234567891011121314151617181920212223242526272829303132333435363738#include &lt;algorithm&gt;#include &lt;vector&gt;#include &lt;ctime&gt;class myPrint&#123;public: void operator()(int val) &#123; cout &lt;&lt; val &lt;&lt; &quot; &quot;; &#125;&#125;;void test01()&#123; srand((unsigned int)time(NULL)); vector&lt;int&gt; v; for(int i = 0 ; i &lt; 10;i++) &#123; v.push_back(i); &#125; for_each(v.begin(), v.end(), myPrint()); cout &lt;&lt; endl; //打乱顺序 random_shuffle(v.begin(), v.end()); for_each(v.begin(), v.end(), myPrint()); cout &lt;&lt; endl;&#125;int main() &#123; test01(); system(&quot;pause&quot;); return 0;&#125; 总结：random_shuffle洗牌算法比较实用，使用时记得加随机数种子 5.3.3 merge功能描述： 两个容器元素合并，并存储到另一容器中 函数原型： merge(iterator beg1, iterator end1, iterator beg2, iterator end2, iterator dest); &#x2F;&#x2F; 容器元素合并，并存储到另一容器中 &#x2F;&#x2F; 注意: 两个容器必须是有序的 &#x2F;&#x2F; beg1 容器1开始迭代器&#x2F;&#x2F; end1 容器1结束迭代器&#x2F;&#x2F; beg2 容器2开始迭代器&#x2F;&#x2F; end2 容器2结束迭代器&#x2F;&#x2F; dest 目标容器开始迭代器 ​ 示例： 123456789101112131415161718192021222324252627282930313233343536373839#include &lt;algorithm&gt;#include &lt;vector&gt;class myPrint&#123;public: void operator()(int val) &#123; cout &lt;&lt; val &lt;&lt; &quot; &quot;; &#125;&#125;;void test01()&#123; vector&lt;int&gt; v1; vector&lt;int&gt; v2; for (int i = 0; i &lt; 10 ; i++) &#123; v1.push_back(i); v2.push_back(i + 1); &#125; vector&lt;int&gt; vtarget; //目标容器需要提前开辟空间 vtarget.resize(v1.size() + v2.size()); //合并 需要两个有序序列 merge(v1.begin(), v1.end(), v2.begin(), v2.end(), vtarget.begin()); for_each(vtarget.begin(), vtarget.end(), myPrint()); cout &lt;&lt; endl;&#125;int main() &#123; test01(); system(&quot;pause&quot;); return 0;&#125; 总结：merge合并的两个容器必须的有序序列 5.3.4 reverse功能描述： 将容器内元素进行反转 函数原型： reverse(iterator beg, iterator end); &#x2F;&#x2F; 反转指定范围的元素 &#x2F;&#x2F; beg 开始迭代器 &#x2F;&#x2F; end 结束迭代器 ​ 示例： 12345678910111213141516171819202122232425262728293031323334353637383940#include &lt;algorithm&gt;#include &lt;vector&gt;class myPrint&#123;public: void operator()(int val) &#123; cout &lt;&lt; val &lt;&lt; &quot; &quot;; &#125;&#125;;void test01()&#123; vector&lt;int&gt; v; v.push_back(10); v.push_back(30); v.push_back(50); v.push_back(20); v.push_back(40); cout &lt;&lt; &quot;反转前： &quot; &lt;&lt; endl; for_each(v.begin(), v.end(), myPrint()); cout &lt;&lt; endl; cout &lt;&lt; &quot;反转后： &quot; &lt;&lt; endl; reverse(v.begin(), v.end()); for_each(v.begin(), v.end(), myPrint()); cout &lt;&lt; endl;&#125;int main() &#123; test01(); system(&quot;pause&quot;); return 0;&#125; 总结：reverse反转区间内元素，面试题可能涉及到 5.4 常用拷贝和替换算法学习目标： 掌握常用的拷贝和替换算法 算法简介： copy &#x2F;&#x2F; 容器内指定范围的元素拷贝到另一容器中 replace &#x2F;&#x2F; 将容器内指定范围的旧元素修改为新元素 replace_if &#x2F;&#x2F; 容器内指定范围满足条件的元素替换为新元素 swap &#x2F;&#x2F; 互换两个容器的元素 5.4.1 copy功能描述： 容器内指定范围的元素拷贝到另一容器中 函数原型： copy(iterator beg, iterator end, iterator dest); &#x2F;&#x2F; 按值查找元素，找到返回指定位置迭代器，找不到返回结束迭代器位置 &#x2F;&#x2F; beg 开始迭代器 &#x2F;&#x2F; end 结束迭代器 &#x2F;&#x2F; dest 目标起始迭代器 示例： 12345678910111213141516171819202122232425262728293031323334#include &lt;algorithm&gt;#include &lt;vector&gt;class myPrint&#123;public: void operator()(int val) &#123; cout &lt;&lt; val &lt;&lt; &quot; &quot;; &#125;&#125;;void test01()&#123; vector&lt;int&gt; v1; for (int i = 0; i &lt; 10; i++) &#123; v1.push_back(i + 1); &#125; vector&lt;int&gt; v2; v2.resize(v1.size()); copy(v1.begin(), v1.end(), v2.begin()); for_each(v2.begin(), v2.end(), myPrint()); cout &lt;&lt; endl;&#125;int main() &#123; test01(); system(&quot;pause&quot;); return 0;&#125; 总结：利用copy算法在拷贝时，目标容器记得提前开辟空间 5.4.2 replace功能描述： 将容器内指定范围的旧元素修改为新元素 函数原型： replace(iterator beg, iterator end, oldvalue, newvalue); &#x2F;&#x2F; 将区间内旧元素 替换成 新元素 &#x2F;&#x2F; beg 开始迭代器 &#x2F;&#x2F; end 结束迭代器 &#x2F;&#x2F; oldvalue 旧元素 &#x2F;&#x2F; newvalue 新元素 示例： 123456789101112131415161718192021222324252627282930313233343536373839404142#include &lt;algorithm&gt;#include &lt;vector&gt;class myPrint&#123;public: void operator()(int val) &#123; cout &lt;&lt; val &lt;&lt; &quot; &quot;; &#125;&#125;;void test01()&#123; vector&lt;int&gt; v; v.push_back(20); v.push_back(30); v.push_back(20); v.push_back(40); v.push_back(50); v.push_back(10); v.push_back(20); cout &lt;&lt; &quot;替换前：&quot; &lt;&lt; endl; for_each(v.begin(), v.end(), myPrint()); cout &lt;&lt; endl; //将容器中的20 替换成 2000 cout &lt;&lt; &quot;替换后：&quot; &lt;&lt; endl; replace(v.begin(), v.end(), 20,2000); for_each(v.begin(), v.end(), myPrint()); cout &lt;&lt; endl;&#125;int main() &#123; test01(); system(&quot;pause&quot;); return 0;&#125; 总结：replace会替换区间内满足条件的元素 5.4.3 replace_if功能描述: 将区间内满足条件的元素，替换成指定元素 函数原型： replace_if(iterator beg, iterator end, _pred, newvalue); &#x2F;&#x2F; 按条件替换元素，满足条件的替换成指定元素 &#x2F;&#x2F; beg 开始迭代器 &#x2F;&#x2F; end 结束迭代器 &#x2F;&#x2F; _pred 谓词 &#x2F;&#x2F; newvalue 替换的新元素 示例： 12345678910111213141516171819202122232425262728293031323334353637383940414243444546474849505152#include &lt;algorithm&gt;#include &lt;vector&gt;class myPrint&#123;public: void operator()(int val) &#123; cout &lt;&lt; val &lt;&lt; &quot; &quot;; &#125;&#125;;class ReplaceGreater30&#123;public: bool operator()(int val) &#123; return val &gt;= 30; &#125;&#125;;void test01()&#123; vector&lt;int&gt; v; v.push_back(20); v.push_back(30); v.push_back(20); v.push_back(40); v.push_back(50); v.push_back(10); v.push_back(20); cout &lt;&lt; &quot;替换前：&quot; &lt;&lt; endl; for_each(v.begin(), v.end(), myPrint()); cout &lt;&lt; endl; //将容器中大于等于的30 替换成 3000 cout &lt;&lt; &quot;替换后：&quot; &lt;&lt; endl; replace_if(v.begin(), v.end(), ReplaceGreater30(), 3000); for_each(v.begin(), v.end(), myPrint()); cout &lt;&lt; endl;&#125;int main() &#123; test01(); system(&quot;pause&quot;); return 0;&#125; 总结：replace_if按条件查找，可以利用仿函数灵活筛选满足的条件 5.4.4 swap功能描述： 互换两个容器的元素 函数原型： swap(container c1, container c2); &#x2F;&#x2F; 互换两个容器的元素 &#x2F;&#x2F; c1容器1 &#x2F;&#x2F; c2容器2 ​ 示例： 12345678910111213141516171819202122232425262728293031323334353637383940414243#include &lt;algorithm&gt;#include &lt;vector&gt;class myPrint&#123;public: void operator()(int val) &#123; cout &lt;&lt; val &lt;&lt; &quot; &quot;; &#125;&#125;;void test01()&#123; vector&lt;int&gt; v1; vector&lt;int&gt; v2; for (int i = 0; i &lt; 10; i++) &#123; v1.push_back(i); v2.push_back(i+100); &#125; cout &lt;&lt; &quot;交换前： &quot; &lt;&lt; endl; for_each(v1.begin(), v1.end(), myPrint()); cout &lt;&lt; endl; for_each(v2.begin(), v2.end(), myPrint()); cout &lt;&lt; endl; cout &lt;&lt; &quot;交换后： &quot; &lt;&lt; endl; swap(v1, v2); for_each(v1.begin(), v1.end(), myPrint()); cout &lt;&lt; endl; for_each(v2.begin(), v2.end(), myPrint()); cout &lt;&lt; endl;&#125;int main() &#123; test01(); system(&quot;pause&quot;); return 0;&#125; 总结：swap交换容器时，注意交换的容器要同种类型 5.5 常用算术生成算法学习目标： 掌握常用的算术生成算法 注意： 算术生成算法属于小型算法，使用时包含的头文件为 #include &lt;numeric&gt; 算法简介： accumulate &#x2F;&#x2F; 计算容器元素累计总和 fill &#x2F;&#x2F; 向容器中添加元素 ​ 5.5.1 accumulate功能描述： 计算区间内 容器元素累计总和 函数原型： accumulate(iterator beg, iterator end, value); &#x2F;&#x2F; 计算容器元素累计总和 &#x2F;&#x2F; beg 开始迭代器 &#x2F;&#x2F; end 结束迭代器 &#x2F;&#x2F; value 起始值 示例： 12345678910111213141516171819202122#include &lt;numeric&gt;#include &lt;vector&gt;void test01()&#123; vector&lt;int&gt; v; for (int i = 0; i &lt;= 100; i++) &#123; v.push_back(i); &#125; int total = accumulate(v.begin(), v.end(), 0); cout &lt;&lt; &quot;total = &quot; &lt;&lt; total &lt;&lt; endl;&#125;int main() &#123; test01(); system(&quot;pause&quot;); return 0;&#125; 总结：accumulate使用时头文件注意是 numeric，这个算法很实用 5.5.2 fill功能描述： 向容器中填充指定的元素 函数原型： fill(iterator beg, iterator end, value); &#x2F;&#x2F; 向容器中填充元素 &#x2F;&#x2F; beg 开始迭代器 &#x2F;&#x2F; end 结束迭代器 &#x2F;&#x2F; value 填充的值 示例： 123456789101112131415161718192021222324252627282930313233#include &lt;numeric&gt;#include &lt;vector&gt;#include &lt;algorithm&gt;class myPrint&#123;public: void operator()(int val) &#123; cout &lt;&lt; val &lt;&lt; &quot; &quot;; &#125;&#125;;void test01()&#123; vector&lt;int&gt; v; v.resize(10); //填充 fill(v.begin(), v.end(), 100); for_each(v.begin(), v.end(), myPrint()); cout &lt;&lt; endl;&#125;int main() &#123; test01(); system(&quot;pause&quot;); return 0;&#125; 总结：利用fill可以将容器区间内元素填充为 指定的值 5.6 常用集合算法学习目标： 掌握常用的集合算法 算法简介： set_intersection &#x2F;&#x2F; 求两个容器的交集 set_union &#x2F;&#x2F; 求两个容器的并集 set_difference &#x2F;&#x2F; 求两个容器的差集 ​ 5.6.1 set_intersection功能描述： 求两个容器的交集 函数原型： set_intersection(iterator beg1, iterator end1, iterator beg2, iterator end2, iterator dest); &#x2F;&#x2F; 求两个集合的交集 &#x2F;&#x2F; 注意:两个集合必须是有序序列 &#x2F;&#x2F; beg1 容器1开始迭代器&#x2F;&#x2F; end1 容器1结束迭代器&#x2F;&#x2F; beg2 容器2开始迭代器&#x2F;&#x2F; end2 容器2结束迭代器&#x2F;&#x2F; dest 目标容器开始迭代器 示例： 123456789101112131415161718192021222324252627282930313233343536373839404142#include &lt;vector&gt;#include &lt;algorithm&gt;class myPrint&#123;public: void operator()(int val) &#123; cout &lt;&lt; val &lt;&lt; &quot; &quot;; &#125;&#125;;void test01()&#123; vector&lt;int&gt; v1; vector&lt;int&gt; v2; for (int i = 0; i &lt; 10; i++) &#123; v1.push_back(i); v2.push_back(i+5); &#125; vector&lt;int&gt; vTarget; //取两个里面较小的值给目标容器开辟空间 vTarget.resize(min(v1.size(), v2.size())); //返回目标容器的最后一个元素的迭代器地址 vector&lt;int&gt;::iterator itEnd = set_intersection(v1.begin(), v1.end(), v2.begin(), v2.end(), vTarget.begin()); for_each(vTarget.begin(), itEnd, myPrint()); cout &lt;&lt; endl;&#125;int main() &#123; test01(); system(&quot;pause&quot;); return 0;&#125; 总结： 求交集的两个集合必须的有序序列 目标容器开辟空间需要从两个容器中取小值 set_intersection返回值既是交集中最后一个元素的位置 5.6.2 set_union功能描述： 求两个集合的并集 函数原型： set_union(iterator beg1, iterator end1, iterator beg2, iterator end2, iterator dest); &#x2F;&#x2F; 求两个集合的并集 &#x2F;&#x2F; 注意:两个集合必须是有序序列 &#x2F;&#x2F; beg1 容器1开始迭代器&#x2F;&#x2F; end1 容器1结束迭代器&#x2F;&#x2F; beg2 容器2开始迭代器&#x2F;&#x2F; end2 容器2结束迭代器&#x2F;&#x2F; dest 目标容器开始迭代器 ​ 示例： 1234567891011121314151617181920212223242526272829303132333435363738394041#include &lt;vector&gt;#include &lt;algorithm&gt;class myPrint&#123;public: void operator()(int val) &#123; cout &lt;&lt; val &lt;&lt; &quot; &quot;; &#125;&#125;;void test01()&#123; vector&lt;int&gt; v1; vector&lt;int&gt; v2; for (int i = 0; i &lt; 10; i++) &#123; v1.push_back(i); v2.push_back(i+5); &#125; vector&lt;int&gt; vTarget; //取两个容器的和给目标容器开辟空间 vTarget.resize(v1.size() + v2.size()); //返回目标容器的最后一个元素的迭代器地址 vector&lt;int&gt;::iterator itEnd = set_union(v1.begin(), v1.end(), v2.begin(), v2.end(), vTarget.begin()); for_each(vTarget.begin(), itEnd, myPrint()); cout &lt;&lt; endl;&#125;int main() &#123; test01(); system(&quot;pause&quot;); return 0;&#125; 总结： 求并集的两个集合必须的有序序列 目标容器开辟空间需要两个容器相加 set_union返回值既是并集中最后一个元素的位置 5.6.3 set_difference功能描述： 求两个集合的差集 函数原型： set_difference(iterator beg1, iterator end1, iterator beg2, iterator end2, iterator dest); &#x2F;&#x2F; 求两个集合的差集 &#x2F;&#x2F; 注意:两个集合必须是有序序列 &#x2F;&#x2F; beg1 容器1开始迭代器&#x2F;&#x2F; end1 容器1结束迭代器&#x2F;&#x2F; beg2 容器2开始迭代器&#x2F;&#x2F; end2 容器2结束迭代器&#x2F;&#x2F; dest 目标容器开始迭代器 ​ 示例： 1234567891011121314151617181920212223242526272829303132333435363738394041424344454647#include &lt;vector&gt;#include &lt;algorithm&gt;class myPrint&#123;public: void operator()(int val) &#123; cout &lt;&lt; val &lt;&lt; &quot; &quot;; &#125;&#125;;void test01()&#123; vector&lt;int&gt; v1; vector&lt;int&gt; v2; for (int i = 0; i &lt; 10; i++) &#123; v1.push_back(i); v2.push_back(i+5); &#125; vector&lt;int&gt; vTarget; //取两个里面较大的值给目标容器开辟空间 vTarget.resize( max(v1.size() , v2.size())); //返回目标容器的最后一个元素的迭代器地址 cout &lt;&lt; &quot;v1与v2的差集为： &quot; &lt;&lt; endl; vector&lt;int&gt;::iterator itEnd = set_difference(v1.begin(), v1.end(), v2.begin(), v2.end(), vTarget.begin()); for_each(vTarget.begin(), itEnd, myPrint()); cout &lt;&lt; endl; cout &lt;&lt; &quot;v2与v1的差集为： &quot; &lt;&lt; endl; itEnd = set_difference(v2.begin(), v2.end(), v1.begin(), v1.end(), vTarget.begin()); for_each(vTarget.begin(), itEnd, myPrint()); cout &lt;&lt; endl;&#125;int main() &#123; test01(); system(&quot;pause&quot;); return 0;&#125; 总结： 求差集的两个集合必须的有序序列 目标容器开辟空间需要从两个容器取较大值 set_difference返回值既是差集中最后一个元素的位置","categories":[{"name":"C++","slug":"C","permalink":"https://why-1513.github.io.git/categories/C/"}],"tags":[]}],"categories":[{"name":"C++","slug":"C","permalink":"https://why-1513.github.io.git/categories/C/"}],"tags":[]}